=== FOLDER STRUCTURE ===
.
├── app
│   ├── abilities
│   │   └── main.ts
│   ├── controllers
│   │   ├── admin
│   │   │   ├── riasec
│   │   │   │   ├── pertanyaan_riasecs_controller.ts
│   │   │   │   └── siswa_riasecs_controller.ts
│   │   │   ├── dashboard_controller.ts
│   │   │   ├── hasil_tes_controller.ts
│   │   │   ├── profiles_controller.ts
│   │   │   └── users_controller.ts
│   │   ├── auth
│   │   │   └── registers_controller.ts
│   │   ├── user
│   │   │   ├── dashboard_controller.ts
│   │   │   ├── hasil_tes_controller.ts
│   │   │   ├── notes_controller.ts
│   │   │   ├── profiles_controller.ts
│   │   │   ├── recommendations_controller.ts
│   │   │   └── tests_controller.ts
│   │   ├── homepages_controller.ts
│   │   └── session_controller.ts
│   ├── exceptions
│   │   └── handler.ts
│   ├── middleware
│   │   ├── admin_middleware.ts
│   │   ├── auth_middleware.ts
│   │   ├── container_bindings_middleware.ts
│   │   ├── guest_middleware.ts
│   │   ├── initialize_bouncer_middleware.ts
│   │   ├── is_user_middleware.ts
│   │   └── silent_auth_middleware.ts
│   ├── models
│   │   ├── admin.ts
│   │   ├── hasil.ts
│   │   ├── jawaban.ts
│   │   ├── minat_bakat.ts
│   │   ├── note.ts
│   │   ├── program.ts
│   │   ├── program_rating.ts
│   │   ├── rekomendasi.ts
│   │   ├── riasec_pertanyaan.ts
│   │   ├── siswa.ts
│   │   └── user.ts
│   ├── policies
│   │   ├── main.ts
│   │   ├── note_policy.ts
│   │   └── user_policy.ts
│   ├── services
│   │   ├── recommendation_service.ts
│   │   └── riasec_service.ts
│   └── validators
│       ├── note.ts
│       ├── pertanyaan_riasec.ts
│       ├── siswa.ts
│       └── user.ts
├── bin
│   ├── console.ts
│   ├── server.ts
│   └── test.ts
├── config
│   ├── app.ts
│   ├── auth.ts
│   ├── bodyparser.ts
│   ├── cors.ts
│   ├── database.ts
│   ├── hash.ts
│   ├── inertia.ts
│   ├── logger.ts
│   ├── session.ts
│   ├── shield.ts
│   ├── static.ts
│   └── vite.ts
├── database
│   ├── migrations
│   │   ├── 1749892627155_create_users_table.ts
│   │   ├── 1749947099577_create_notes_table.ts
│   │   ├── 1750237566915_create_admins_table.ts
│   │   ├── 1750237567410_create_siswa_table.ts
│   │   ├── 1750237567902_create_riasec_pertanyaans_table.ts
│   │   ├── 1750237568441_create_hasil_tes_table.ts
│   │   ├── 1750237568941_create_jawaban_tes_table.ts
│   │   ├── 1750388069955_create_programs_table.ts
│   │   ├── 1750389796560_create_user_program_ratings_table.ts
│   │   ├── 1750411457716_create_rekomendasis_table.ts
│   │   └── 1750425662712_create_minat_bakats_table.ts
│   └── seeders
│       ├── aauser_seeder.ts
│       ├── admin_seeder.ts
│       ├── minat_bakat_seeder.ts
│       ├── note_seeder.ts
│       ├── program_seeder.ts
│       ├── rekomendasi_seeder.ts
│       ├── riasec_pertanyaan_seeder.ts
│       ├── siswa_seeder.ts
│       └── 'z rating_seeder.ts'
├── inertia
│   ├── app
│   │   ├── app.tsx
│   │   └── ssr.tsx
│   ├── components
│   │   └── button.tsx
│   ├── css
│   │   └── app.css
│   ├── pages
│   │   ├── admin
│   │   │   ├── dashboard
│   │   │   │   └── index.tsx
│   │   │   ├── layouts
│   │   │   │   ├── main.tsx
│   │   │   │   └── sidebar.tsx
│   │   │   ├── pertanyaan
│   │   │   │   ├── create.tsx
│   │   │   │   ├── edit.tsx
│   │   │   │   └── index.tsx
│   │   │   ├── profile
│   │   │   │   └── index.tsx
│   │   │   ├── siswaRiasec
│   │   │   │   ├── create.tsx
│   │   │   │   ├── edit.tsx
│   │   │   │   ├── index.tsx
│   │   │   │   └── view.tsx
│   │   │   └── users
│   │   │       ├── create.tsx
│   │   │       ├── edit.tsx
│   │   │       └── index.tsx
│   │   ├── auth
│   │   │   ├── login.tsx
│   │   │   └── register.tsx
│   │   ├── errors
│   │   │   ├── not_found.tsx
│   │   │   └── server_error.tsx
│   │   ├── user
│   │   │   ├── dashboard
│   │   │   │   └── index.tsx
│   │   │   ├── layouts
│   │   │   │   ├── main.tsx
│   │   │   │   └── sidebar.tsx
│   │   │   ├── notes
│   │   │   │   ├── edit.tsx
│   │   │   │   └── index.tsx
│   │   │   └── riasec
│   │   │       ├── index.tsx
│   │   │       ├── result.tsx
│   │   │       └── test.tsx
│   │   └── home.tsx
│   └── tsconfig.json
├── resources
│   └── views
│       └── inertia_layout.edge
├── start
│   ├── env.ts
│   ├── kernel.ts
│   └── routes.ts
├── tests
│   └── bootstrap.ts
├── ace.js
├── adonisrc.ts
├── anu.html
├── anu2.html
├── eslint.config.js
├── package-lock.json
├── package.json
├── semua_kode.txt
├── tailwind.config.js
├── tsconfig.json
└── vite.config.ts


=== SOURCE FILES ===

// title: adonisrc.ts
import { defineConfig } from '@adonisjs/core/app'

export default defineConfig({
  /*
  |--------------------------------------------------------------------------
  | Experimental flags
  |--------------------------------------------------------------------------
  |
  | The following features will be enabled by default in the next major release
  | of AdonisJS. You can opt into them today to avoid any breaking changes
  | during upgrade.
  |
  */
  experimental: {
    mergeMultipartFieldsAndFiles: true,
    shutdownInReverseOrder: true,
  },

  /*
  |--------------------------------------------------------------------------
  | Commands
  |--------------------------------------------------------------------------
  |
  | List of ace commands to register from packages. The application commands
  | will be scanned automatically from the "./commands" directory.
  |
  */
  commands: [() => import('@adonisjs/core/commands'), () => import('@adonisjs/lucid/commands'), () => import('@adonisjs/bouncer/commands')],

  /*
  |--------------------------------------------------------------------------
  | Service providers
  |--------------------------------------------------------------------------
  |
  | List of service providers to import and register when booting the
  | application
  |
  */
  providers: [
    () => import('@adonisjs/core/providers/app_provider'),
    () => import('@adonisjs/core/providers/hash_provider'),
    {
      file: () => import('@adonisjs/core/providers/repl_provider'),
      environment: ['repl', 'test'],
    },
    () => import('@adonisjs/core/providers/vinejs_provider'),
    () => import('@adonisjs/core/providers/edge_provider'),
    () => import('@adonisjs/session/session_provider'),
    () => import('@adonisjs/vite/vite_provider'),
    () => import('@adonisjs/shield/shield_provider'),
    () => import('@adonisjs/static/static_provider'),
    () => import('@adonisjs/cors/cors_provider'),
    () => import('@adonisjs/lucid/database_provider'),
    () => import('@adonisjs/auth/auth_provider'),
    () => import('@adonisjs/inertia/inertia_provider'),
    () => import('@adonisjs/bouncer/bouncer_provider')
  ],

  /*
  |--------------------------------------------------------------------------
  | Preloads
  |--------------------------------------------------------------------------
  |
  | List of modules to import before starting the application.
  |
  */
  preloads: [() => import('#start/routes'), () => import('#start/kernel')],

  /*
  |--------------------------------------------------------------------------
  | Tests
  |--------------------------------------------------------------------------
  |
  | List of test suites to organize tests by their type. Feel free to remove
  | and add additional suites.
  |
  */
  tests: {
    suites: [
      {
        files: ['tests/unit/**/*.spec(.ts|.js)'],
        name: 'unit',
        timeout: 2000,
      },
      {
        files: ['tests/functional/**/*.spec(.ts|.js)'],
        name: 'functional',
        timeout: 30000,
      },
    ],
    forceExit: false,
  },

  /*
  |--------------------------------------------------------------------------
  | Metafiles
  |--------------------------------------------------------------------------
  |
  | A collection of files you want to copy to the build folder when creating
  | the production build.
  |
  */
  metaFiles: [
    {
      pattern: 'resources/views/**/*.edge',
      reloadServer: false,
    },
    {
      pattern: 'public/**',
      reloadServer: false,
    },
  ],

  assetsBundler: false,
  hooks: {
    onBuildStarting: [() => import('@adonisjs/vite/build_hook')],
  },
})

// title: app/abilities/main.ts
/*
|--------------------------------------------------------------------------
| Bouncer abilities
|--------------------------------------------------------------------------
|
| You may export multiple abilities from this file and pre-register them
| when creating the Bouncer instance.
|
| Pre-registered policies and abilities can be referenced as a string by their
| name. Also they are must if want to perform authorization inside Edge
| templates.
|
*/

import { Bouncer } from '@adonisjs/bouncer'

/**
 * Delete the following ability to start from
 * scratch
 */
export const editUser = Bouncer.ability(() => {
  return true
})

// title: app/controllers/admin/dashboard_controller.ts
// title: app/controllers/admin/dashboard_controller.ts
import type { HttpContext } from '@adonisjs/core/http'

export default class AdminDashboardController {
  index({ auth, inertia }: HttpContext) {
    const admin = auth.user!
    return inertia.render('admin/dashboard/index', {
      user: admin.serialize(),
    })
  }
}

// title: app/controllers/admin/hasil_tes_controller.ts
// import type { HttpContext } from '@adonisjs/core/http'

export default class HasilTesController {}

// title: app/controllers/admin/profiles_controller.ts
import type { HttpContext } from '@adonisjs/core/http'
import { updateAdminProfileValidator } from '#validators/user'

export default class ProfilesController {
  public async show({ auth, inertia }: HttpContext) {
    const admin = auth.user!
    return inertia.render('admin/profile/index', {
      user: admin.serialize(),
    })
  }
  public async update({ auth, request, response, session }: HttpContext) {
    const admin = auth.user!

    // Validasi input, dengan menyertakan userId saat ini agar validasi email unik mengabaikannya.
    const payload = await request.validateUsing(updateAdminProfileValidator, {
      meta: {
        userId: admin.id,
      },
    })

    // Gabungkan data nama lengkap dan email
    admin.merge({
      fullName: payload.fullName,
      email: payload.email,
    })

    // Hanya update password jika field diisi
    if (payload.password) {
      admin.password = payload.password
    }

    await admin.save()

    session.flash('success', 'Profil berhasil diperbarui!')
    return response.redirect().toRoute('admin.profile.show')
  }
}

// title: app/controllers/admin/riasec/pertanyaan_riasecs_controller.ts
import RiasecPertanyaan from '#models/riasec_pertanyaan'
import { createPertanyaanValidator } from '#validators/pertanyaan_riasec'
import type { HttpContext } from '@adonisjs/core/http'

export default class PertanyaanRiasecsController {
  /**
   * Menampilkan daftar semua pertanyaan RIASEC.
   * Data diurutkan berdasarkan tipe RIASEC, lalu nomor urut.
   */
  async index({ inertia }: HttpContext) {
    const pertanyaan = await RiasecPertanyaan.query()
      .orderBy('tipeRiasec', 'asc')
      .orderBy('nomorUrut', 'asc')

    return inertia.render('admin/pertanyaan/index', { pertanyaan })
  }
  create({ inertia }: HttpContext) {
    return inertia.render('admin/pertanyaan/create')
  }
  async store({ request, response, session }: HttpContext) {
    // Pastikan 'session' ada di sini
    const payload = await request.validateUsing(createPertanyaanValidator)

    const lastPertanyaan = await RiasecPertanyaan.query().orderBy('nomor_urut', 'desc').first()
    const nextNomorUrut = lastPertanyaan ? (lastPertanyaan.nomorUrut || 0) + 1 : 1

    await RiasecPertanyaan.create({
      ...payload,
      nomorUrut: nextNomorUrut,
    })

    // --- TAMBAHKAN BARIS INI ---
    session.flash('success', 'Pertanyaan sudah berhasil dibuat!')
    // -------------------------

    return response.redirect().toRoute('admin.pertanyaan.index')
  }
}

// title: app/controllers/admin/riasec/siswa_riasecs_controller.ts
// title: app/controllers/admin/riasec/siswa_riasecs_controller.ts
import Siswa from '#models/siswa'
import Hasil from '#models/hasil'
import User from '#models/user'
import RiasecService from '#services/riasec_service'
import { getHybridRecommendations } from '#services/recommendation_service'
import { createSiswaValidator, updateSiswaValidator } from '#validators/siswa'
import type { HttpContext } from '@adonisjs/core/http'
import db from '@adonisjs/lucid/services/db'
import { Exception } from '@adonisjs/core/exceptions'

/**
 * Controller for managing RIASEC students
 */
export default class SiswaRiasecsController {
  /**
   * Display a list of all students for TanStack Table.
   */
  async index({ inertia, session }: HttpContext) {
    try {
      // Fetch all students instead of paginating
      const allSiswa = await Siswa.query()
        .preload('user')
        .preload('hasilTes', (query) => query.orderBy('tanggal_tes', 'desc').limit(1))
        .orderBy('nama_lengkap', 'asc')

      // Serialize the data to be sent to the view
      return inertia.render('admin/siswaRiasec/index', {
        siswa: allSiswa.map((s) => s.serialize()),
      })
    } catch (error) {
      session.flash('error', 'Gagal memuat daftar siswa')
      return inertia.render('admin/siswaRiasec/index', { siswa: [] })
    }
  }

  /**
   * Show the student creation form
   */
  async create({ inertia }: HttpContext) {
    return inertia.render('admin/siswaRiasec/create')
  }

  /**
   * Store a new student with associated user
   */
  async store({ request, response, session }: HttpContext) {
    const payload = await request.validateUsing(createSiswaValidator)
    const trx = await db.transaction()

    try {
      const user = await User.create(
        {
          email: payload.email,
          password: payload.password,
          fullName: payload.namaLengkap,
          role: 'siswa',
        },
        { client: trx }
      )

      await Siswa.create(
        {
          userId: user.id,
          namaLengkap: payload.namaLengkap,
          nisn: payload.nisn,
          kelas: payload.kelas,
          tanggalLahir: payload.tanggalLahir,
        },
        { client: trx }
      )

      await trx.commit()
      session.flash('success', 'Siswa berhasil ditambahkan')
      return response.redirect().toRoute('admin.siswaRiasec.index')
    } catch (error) {
      await trx.rollback()
      session.flash('error', 'Gagal membuat data siswa')
      return response.redirect().back()
    }
  }

  /**
   * Display a single student's details with test results
   */
  async show({ inertia, params, session }: HttpContext) {
    try {
      const siswa = await Siswa.query()
        .where('id', params.id)
        .preload('user')
        .preload('hasilTes', (query) => query.orderBy('tanggal_tes', 'desc').limit(1))
        .firstOrFail()

      const hasilTes = await Hasil.query()
        .where('siswa_id', siswa.id)
        .preload('siswa')
        .orderBy('tanggal_tes', 'desc')
        .first()

      const riasecService = new RiasecService()
      const recommendedInterests = hasilTes
        ? await riasecService.getInterestRecommendations(hasilTes, 6)
        : []
      const recommendedPrograms = await getHybridRecommendations(siswa.id)

      return inertia.render('admin/siswaRiasec/view', {
        siswa: siswa.serialize(),
        hasilTes: hasilTes ? hasilTes.serialize() : null,
        recommendedPrograms,
        recommendedInterests,
      })
    } catch (error) {
      session.flash('error', 'Siswa tidak ditemukan')
      return inertia.redirect().toRoute('admin.siswaRiasec.index')
    }
  }

  /**
   * Show the student edit form
   */
  async edit({ params, inertia, session }: HttpContext) {
    try {
      const siswa = await Siswa.query().where('id', params.id).preload('user').firstOrFail()

      return inertia.render('admin/siswaRiasec/edit', {
        siswa: siswa.serialize(),
      })
    } catch (error) {
      session.flash('error', 'Siswa tidak ditemukan')
      return inertia.redirect().toRoute('admin.siswaRiasec.index')
    }
  }

  /**
   * Update an existing student
   */
  async update({ params, request, response, session }: HttpContext) {
    const siswa = await Siswa.query().where('id', params.id).preload('user').firstOrFail()

    // Validate the request with meta data for userId
    const payload = await request.validateUsing(updateSiswaValidator, {
      meta: {
        userId: siswa.user?.id, // Pass the userId to the validator
      },
    })
    const trx = await db.transaction()

    try {
      if (!siswa.user) {
        throw new Exception('Relasi user tidak ditemukan', { status: 404 })
      }

      siswa.user.merge({
        email: payload.email,
        fullName: payload.namaLengkap,
        ...(payload.password && { password: payload.password }),
      })
      await siswa.user.useTransaction(trx).save()

      siswa.merge({
        namaLengkap: payload.namaLengkap,
        nisn: payload.nisn,
        kelas: payload.kelas,
        tanggalLahir: payload.tanggalLahir,
      })
      await siswa.useTransaction(trx).save()

      await trx.commit()
      session.flash('success', 'Siswa berhasil diperbarui')
      return response.redirect().toRoute('admin.siswaRiasec.index')
    } catch (error) {
      await trx.rollback()
      session.flash('error', 'Gagal memperbarui data siswa')
      return response.redirect().back()
    }
  }

  /**
   * Delete a student and associated data
   */
  async destroy({ params, response, session }: HttpContext) {
    const trx = await db.transaction()

    try {
      const siswa = await Siswa.query({ client: trx })
        .where('id', params.id)
        .preload('user')
        .firstOrFail()

      await Hasil.query({ client: trx }).where('siswa_id', siswa.id).delete()
      await siswa.delete()
      await siswa.user?.delete()

      await trx.commit()
      session.flash('success', 'Siswa berhasil dihapus')
      return response.redirect().toRoute('admin.siswaRiasec.index')
    } catch (error) {
      await trx.rollback()
      session.flash('error', 'Gagal menghapus siswa')
      return response.redirect().back()
    }
  }
  async resetTest({ params, response, session }: HttpContext) {
    const trx = await db.transaction()

    try {
      const siswa = await Siswa.findOrFail(params.id)

      // Hapus semua hasil tes untuk siswa ini.
      // Database ON DELETE CASCADE akan menangani penghapusan jawaban terkait.
      await Hasil.query({ client: trx }).where('siswa_id', siswa.id).delete()

      await trx.commit()
      session.flash('success', `Tes untuk siswa ${siswa.namaLengkap} berhasil direset.`)
    } catch (error) {
      await trx.rollback()
      console.error('Reset Test Error:', error) // Log error untuk debugging
      session.flash('error', 'Gagal mereset tes siswa.')
    }

    return response.redirect().toRoute('admin.siswaRiasec.index')
  }
}

// title: app/controllers/admin/users_controller.ts
// title: app/controllers/admin/users_controller.ts
import User from '#models/user'
import { createUserValidator, updateUserValidator } from '#validators/user'
import type { HttpContext } from '@adonisjs/core/http'
import vine from '@vinejs/vine'

export default class UsersController {
  async index({ inertia, request }: HttpContext) {
    const page = request.input('page', 1)
    const limit = 10

    const usersPaginated = await User.query().paginate(page, limit)

    // Format pagination links
    const paginationLinks = usersPaginated
      .getUrlsForRange(1, usersPaginated.lastPage)
      .map((link) => ({
        page: link.page,
        url: link.url,
      }))

    return inertia.render('admin/users/index', {
      users: usersPaginated.serialize().data, // hanya array user
      paginationLinks, // array pagination
    })
  }

  async create({ inertia }: HttpContext) {
    return inertia.render('admin/users/create')
  }

  async store({ request, response }: HttpContext) {
    let payload = await request.validateUsing(createUserValidator)
    // Map role 'user' to 'siswa' to match allowed enum values
    const userPayload = {
      ...payload,
      role: payload.role === 'user' ? 'siswa' : payload.role,
    }
    await User.create(userPayload)
    return response.redirect().toRoute('admin.dashboard')
  }

  async edit({ params, inertia }: HttpContext) {
    const user = await User.findOrFail(params.id)
    return inertia.render('admin/users/edit', { user })
  }

  async update({ params, request, response }: HttpContext) {
    const user = await User.findOrFail(params.id)
    const payload = await request.validateUsing(updateUserValidator)

    if (payload.email && payload.email !== user.email) {
      await vine.validate({
        schema: vine.object({
          email: vine
            .string()
            .email()
            .unique(async (db, value) => {
              const match = await db
                .from('users')
                .where('email', value)
                .whereNot('id', user.id)
                .first()
              return !match
            }),
        }),
        data: { email: payload.email },
      })
    }

    // Map role 'user' to 'siswa' to match allowed enum values
    const userPayload = {
      ...payload,
      role: payload.role === 'user' ? 'siswa' : payload.role,
    }

    user.merge(userPayload)
    await user.save()

    return response.redirect().toRoute('admin.dashboard')
  }

  async destroy({ params, response, bouncer }: HttpContext) {
    const user = await User.findOrFail(params.id)

    await bouncer.with('UserPolicy').authorize('delete', user)
    await user.delete()
    return response.redirect().toRoute('admin.dashboard')
  }
}

// title: app/controllers/auth/registers_controller.ts
// title: app/controllers/auth/registers_controller.ts
import User from '#models/user'
import Siswa from '#models/siswa' // <-- 1. Impor model Siswa
import { registerUserValidator } from '#validators/user'
import type { HttpContext } from '@adonisjs/core/http'
import db from '@adonisjs/lucid/services/db' // <-- 2. Impor service database

export default class RegisterController {
  create({ inertia }: HttpContext) {
    return inertia.render('auth/register')
  }

  async store({ request, response, auth }: HttpContext) {
    const payload = await request.validateUsing(registerUserValidator)

    // --- 3. Gunakan Database Transaction ---
    // Ini memastikan bahwa User dan Siswa berhasil dibuat bersama-sama.
    // Jika salah satu gagal, semua perubahan akan dibatalkan.
    const user = await db.transaction(async (trx) => {
      // Buat user baru di dalam transaksi
      const newUser = await User.create(
        {
          fullName: payload.fullName,
          email: payload.email,
          password: payload.password,
          role: 'siswa', // Secara eksplisit atur role untuk setiap pendaftar baru
        },
        { client: trx } // Gunakan transaction client (trx)
      )

      // Buat profil Siswa yang berelasi dengan user baru
      await Siswa.create(
        {
          userId: newUser.id,
          namaLengkap: newUser.fullName!, // Ambil nama dari user yang baru dibuat
          // Kolom lain seperti nisn, kelas, dll bisa diisi nanti melalui halaman profil
        },
        { client: trx } // Gunakan transaction client (trx)
      )

      // Kembalikan objek user yang baru dibuat dari transaksi
      return newUser
    })

    // Setelah transaksi berhasil, loginkan user
    await auth.use('web').login(user)

    // Redirect ke dashboard
    return response.redirect().toRoute('dashboard')
  }
}

// title: app/controllers/homepages_controller.ts
// title: app/controllers/home_controller.ts
import type { HttpContext } from '@adonisjs/core/http'

export default class HomeController {
  // Cuma buat ngerender halaman home
  index({ inertia }: HttpContext) {
    return inertia.render('home')
  }
}

// title: app/controllers/session_controller.ts
// title: app/controllers/session_controller.ts
import User from '#models/user'
import { HttpContext } from '@adonisjs/core/http'

export default class SessionController {
  public async create({ inertia }: HttpContext) {
    return inertia.render('auth/login')
  }

  public async store({ request, auth, response }: HttpContext) {
    const { email, password } = request.only(['email', 'password'])
    const user = await User.verifyCredentials(email, password)

    await auth.use('web').login(user)

    if (user.role === 'admin') {
      return response.redirect().toRoute('admin.dashboard')
    }
    return response.redirect().toRoute('dashboard')
  }

  public async destroy({ auth, response }: HttpContext) {
    await auth.use('web').logout()
    return response.redirect().toRoute('auth.login')
  }
}

// title: app/controllers/user/dashboard_controller.ts
// title: app/controllers/user/dashboard_controller.ts
import type { HttpContext } from '@adonisjs/core/http'

export default class DashboardController {
  index({ auth, inertia }: HttpContext) {
    const user = auth.user!
    return inertia.render('user/dashboard/index', {
      user: user.serialize(),
    })
  }
}

// title: app/controllers/user/hasil_tes_controller.ts
// import type { HttpContext } from '@adonisjs/core/http'

export default class HasilTesController {
}

// title: app/controllers/user/notes_controller.ts
// title: app/controllers/user/notes_controller.ts
import Note from '#models/note'
import { createNoteValidator, updateNoteValidator } from '#validators/note'
import type { HttpContext } from '@adonisjs/core/http'

export default class NotesController {
  async index({ auth, inertia }: HttpContext) {
    const user = auth.user!
    // Ambil notes yang berelasi dengan user
    const notes = await Note.query().where('userId', user.id)
    return inertia.render('user/notes/index', { notes })
  }

  async create({ inertia }: HttpContext) {
    return inertia.render('user/notes/create')
  }

  async store({ request, response, auth }: HttpContext) {
    const payload = await request.validateUsing(createNoteValidator)
    const user = auth.user!
    await user.related('notes').create(payload)

    return response.redirect().toRoute('notes.index')
  }

  async edit({ params, inertia, bouncer }: HttpContext) {
    const note = await Note.findOrFail(params.id)
    await bouncer.with('NotePolicy').authorize('view', note)
    return inertia.render('user/notes/edit', { note })
  }

  async update({ params, request, response, bouncer }: HttpContext) {
    const note = await Note.findOrFail(params.id)
    await bouncer.with('NotePolicy').authorize('update', note)

    const payload = await request.validateUsing(updateNoteValidator)
    note.merge(payload)
    await note.save()

    return response.redirect().toRoute('notes.index')
  }

  async destroy({ params, response, bouncer }: HttpContext) {
    const note = await Note.findOrFail(params.id)
    await bouncer.with('NotePolicy').authorize('delete', note)
    await note.delete()

    return response.redirect().toRoute('notes.index')
  }
}

// title: app/controllers/user/profiles_controller.ts
// import type { HttpContext } from '@adonisjs/core/http'

export default class ProfilesController {
}

// title: app/controllers/user/recommendations_controller.ts
// title: app/controllers/user/recommendations_controller.ts

import { getHybridRecommendations } from '#services/recommendation_service'
import type { HttpContext } from '@adonisjs/core/http'
import Siswa from '#models/siswa'

export default class RecommendationsController {
  /**
   * Menampilkan halaman rekomendasi program untuk siswa yang sedang login.
   */
  public async index({ auth, inertia, response }: HttpContext) {
    const user = auth.user!
    const siswa = await Siswa.findBy('user_id', user.id)

    if (!siswa) {
      // Handle jika profil siswa tidak ditemukan
      return response.redirect().toRoute('dashboard')
    }

    // Panggil service untuk mendapatkan rekomendasi
    const recommendedPrograms = await getHybridRecommendations(siswa.id)

    return inertia.render('user/recommendations/index', {
      programs: recommendedPrograms,
    })
  }
}

// title: app/controllers/user/tests_controller.ts
// title: app/controllers/user/tests_controller.ts

import type { HttpContext } from '@adonisjs/core/http'
import Siswa from '#models/siswa'
import Hasil from '#models/hasil'
import RiasecPertanyaan from '#models/riasec_pertanyaan'
import RiasecService from '#services/riasec_service'
import { getHybridRecommendations } from '#services/recommendation_service'
// Import model MinatBakat tidak lagi diperlukan di sini
// import Interest from '#models/minat_bakat'

export default class TestsController {
  /**
   * Menampilkan halaman utama: hasil terakhir jika ada, atau halaman untuk memulai tes.
   */
  async index({ auth, inertia }: HttpContext) {
    const user = auth.user!
    const siswa = await Siswa.findBy('user_id', user.id)

    if (siswa) {
      const lastResult = await Hasil.query()
        .where('siswa_id', siswa.id)
        .preload('siswa')
        .orderBy('created_at', 'desc')
        .first()

      if (lastResult) {
        return this._renderResultPage(inertia, siswa, lastResult)
      }
    }
    return inertia.render('user/riasec/index', { user: user.serialize() })
  }

  /**
   * Memulai sesi tes baru.
   */
  async start({ auth, inertia, response }: HttpContext) {
    const user = auth.user!
    const siswa = await Siswa.findByOrFail('user_id', user.id)

    const lastResult = await Hasil.query().where('siswa_id', siswa.id).first()
    if (lastResult) {
      return response.redirect().toRoute('riasec.result') // Langsung ke hasil jika sudah ada
    }

    const questions = await RiasecPertanyaan.query().orderBy('nomor_urut', 'asc')
    return inertia.render('user/riasec/test', { questions })
  }

  /**
   * Menyimpan jawaban tes dan memproses hasilnya melalui service.
   */
  async store({ request, auth, response }: HttpContext) {
    const user = auth.user!
    const answers: Record<string, number> = request.input('answers')
    const siswa = await Siswa.findByOrFail('user_id', user.id)

    const riasecService = new RiasecService()
    await riasecService.processTest(siswa.id, answers)

    return response.redirect().toRoute('riasec.result')
  }

  /**
   * Menampilkan halaman hasil tes milik pengguna yang sedang login.
   */
  async showMyResult({ auth, inertia, response }: HttpContext) {
    const user = auth.user!
    const siswa = await Siswa.findByOrFail('user_id', user.id)

    const hasilTes = await Hasil.query()
      .where('siswa_id', siswa.id)
      .preload('siswa')
      .orderBy('created_at', 'desc')
      .first()

    if (!hasilTes) {
      return response.redirect().toRoute('riasec.index')
    }

    return this._renderResultPage(inertia, siswa, hasilTes)
  }

  /**
   * [REFAKTOR] Private helper method untuk mengambil data dan merender halaman hasil.
   */
  private async _renderResultPage(inertia: HttpContext['inertia'], siswa: Siswa, hasilTes: Hasil) {
    // Inisialisasi service yang akan kita gunakan
    const riasecService = new RiasecService()

    // 1. Ambil rekomendasi minat & bakat dari service.
    // Metode baru ini sudah memiliki logika pembobotan dan pembatasan (default 6).
    const recommendedInterests = await riasecService.getInterestRecommendations(hasilTes, 6) // <-- DIUBAH MENJADI 5 SESUAI PERMINTAAN

    // 2. Ambil rekomendasi program menggunakan sistem hybrid.
    // Logika ini tetap sama dan sudah benar.
    const recommendedPrograms = await getHybridRecommendations(siswa.id)

    // 3. Render halaman dengan data yang sudah bersih dan terstruktur.
    return inertia.render('user/riasec/result', {
      hasilTes,
      recommendedPrograms,
      recommendedInterests, // <- Data ini sekarang sudah dibatasi menjadi 5 item paling relevan.
    })
  }
}

// title: app/exceptions/handler.ts
import app from '@adonisjs/core/services/app'
import { HttpContext, ExceptionHandler } from '@adonisjs/core/http'
import type { StatusPageRange, StatusPageRenderer } from '@adonisjs/core/types/http'

export default class HttpExceptionHandler extends ExceptionHandler {
  /**
   * In debug mode, the exception handler will display verbose errors
   * with pretty printed stack traces.
   */
  protected debug = !app.inProduction

  /**
   * Status pages are used to display a custom HTML pages for certain error
   * codes. You might want to enable them in production only, but feel
   * free to enable them in development as well.
   */
  protected renderStatusPages = app.inProduction

  /**
   * Status pages is a collection of error code range and a callback
   * to return the HTML contents to send as a response.
   */
  protected statusPages: Record<StatusPageRange, StatusPageRenderer> = {
    '404': (error, { inertia }) => inertia.render('errors/not_found', { error }),
    '500..599': (error, { inertia }) => inertia.render('errors/server_error', { error }),
  }

  /**
   * The method is used for handling errors and returning
   * response to the client
   */
  async handle(error: unknown, ctx: HttpContext) {
    return super.handle(error, ctx)
  }

  /**
   * The method is used to report error to the logging service or
   * the a third party error monitoring service.
   *
   * @note You should not attempt to send a response from this method.
   */
  async report(error: unknown, ctx: HttpContext) {
    return super.report(error, ctx)
  }
}

// title: app/middleware/admin_middleware.ts
// title: app/middleware/admin_middleware.ts
import type { HttpContext } from '@adonisjs/core/http'
import type { NextFn } from '@adonisjs/core/types/http'

export default class AdminMiddleware {
  async handle(ctx: HttpContext, next: NextFn) {
    if (ctx.auth.user?.role !== 'admin') {
      return ctx.response.redirect().back()
    }
    return next()
  }
}

// title: app/middleware/auth_middleware.ts
import type { HttpContext } from '@adonisjs/core/http'
import type { NextFn } from '@adonisjs/core/types/http'
import type { Authenticators } from '@adonisjs/auth/types'

/**
 * Auth middleware is used authenticate HTTP requests and deny
 * access to unauthenticated users.
 */
export default class AuthMiddleware {
  /**
   * The URL to redirect to, when authentication fails
   */
  redirectTo = '/login'

  async handle(
    ctx: HttpContext,
    next: NextFn,
    options: {
      guards?: (keyof Authenticators)[]
    } = {}
  ) {
    await ctx.auth.authenticateUsing(options.guards, { loginRoute: this.redirectTo })
    return next()
  }
}

// title: app/middleware/container_bindings_middleware.ts
import { Logger } from '@adonisjs/core/logger'
import { HttpContext } from '@adonisjs/core/http'
import { NextFn } from '@adonisjs/core/types/http'

/**
 * The container bindings middleware binds classes to their request
 * specific value using the container resolver.
 *
 * - We bind "HttpContext" class to the "ctx" object
 * - And bind "Logger" class to the "ctx.logger" object
 */
export default class ContainerBindingsMiddleware {
  handle(ctx: HttpContext, next: NextFn) {
    ctx.containerResolver.bindValue(HttpContext, ctx)
    ctx.containerResolver.bindValue(Logger, ctx.logger)

    return next()
  }
}

// title: app/middleware/guest_middleware.ts
// title: app/middleware/guest_middleware.ts
import type { HttpContext } from '@adonisjs/core/http'
import type { NextFn } from '@adonisjs/core/types/http'

export default class GuestMiddleware {
  async handle(ctx: HttpContext, next: NextFn, _options: { guards?: string[] } = {}) {
    await ctx.auth.check()

    if (ctx.auth.isAuthenticated) {
      if (ctx.auth.user?.role === 'admin') {
        return ctx.response.redirect().toRoute('admin.dashboard')
      }
      return ctx.response.redirect().toRoute('dashboard')
    }

    return next()
  }
}

// title: app/middleware/initialize_bouncer_middleware.ts
import { policies } from '#policies/main'
import * as abilities from '#abilities/main'

import { Bouncer } from '@adonisjs/bouncer'
import type { HttpContext } from '@adonisjs/core/http'
import type { NextFn } from '@adonisjs/core/types/http'

/**
 * Init bouncer middleware is used to create a bouncer instance
 * during an HTTP request
 */
export default class InitializeBouncerMiddleware {
  async handle(ctx: HttpContext, next: NextFn) {
    /**
     * Create bouncer instance for the ongoing HTTP request.
     * We will pull the user from the HTTP context.
     */
    ctx.bouncer = new Bouncer(
      () => ctx.auth.user || null,
      abilities,
      policies
    ).setContainerResolver(ctx.containerResolver)

    /**
     * Share bouncer helpers with Edge templates.
     */
    if ('view' in ctx) {
      ctx.view.share(ctx.bouncer.edgeHelpers)
    }

    return next()
  }
}

declare module '@adonisjs/core/http' {
  export interface HttpContext {
    bouncer: Bouncer<
      Exclude<HttpContext['auth']['user'], undefined>,
      typeof abilities,
      typeof policies
    >
  }
}

// title: app/middleware/is_user_middleware.ts
// app/middleware/is_user_middleware.ts
import type { HttpContext } from '@adonisjs/core/http'
import type { NextFn } from '@adonisjs/core/types/http'

export default class IsUserMiddleware {
  async handle(ctx: HttpContext, next: NextFn) {
    /**
     * Cek kalo user yang login BUKAN admin.
     * Kalo dia admin, langsung tendang.
     */
    if (ctx.auth.user?.role === 'admin') {
      return ctx.response.redirect().toRoute('admin.dashboard')
    }

    /**
     * Kalo bukan admin, lanjut ke request berikutnya.
     */
    const output = await next()
    return output
  }
}

// title: app/middleware/silent_auth_middleware.ts
import type { HttpContext } from '@adonisjs/core/http'
import type { NextFn } from '@adonisjs/core/types/http'

/**
 * Silent auth middleware can be used as a global middleware to silent check
 * if the user is logged-in or not.
 *
 * The request continues as usual, even when the user is not logged-in.
 */
export default class SilentAuthMiddleware {
  async handle(ctx: HttpContext, next: NextFn) {
    await ctx.auth.check()

    return next()
  }
}

// title: app/models/admin.ts
import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo } from '@adonisjs/lucid/orm'
import type { BelongsTo } from '@adonisjs/lucid/types/relations'
import User from '#models/user'

export default class Admin extends BaseModel {
  @column({ isPrimary: true })
  declare id: number

  @column()
  declare userId: number

  @column()
  declare namaLengkap: string

  @column()
  declare jabatan: string | null

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime

  // === RELATIONS ===

  // Profil admin ini dimiliki oleh satu User
  @belongsTo(() => User)
  declare user: BelongsTo<typeof User>
}

// title: app/models/hasil.ts
import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo, hasMany } from '@adonisjs/lucid/orm'
import type { BelongsTo, HasMany } from '@adonisjs/lucid/types/relations'
import Siswa from '#models/siswa'
import JawabanTes from '#models/jawaban'

export default class HasilTes extends BaseModel {
  public static table = 'hasil_tes'

  @column({ isPrimary: true })
  declare id: number

  @column()
  declare siswaId: number

  @column.dateTime()
  declare tanggalTes: DateTime

  @column()
  declare skorR: number

  @column()
  declare skorI: number

  @column()
  declare skorA: number

  @column()
  declare skorS: number

  @column()
  declare skorE: number

  @column()
  declare skorC: number

  @column()
  declare kodeHolland: string | null

  @column()
  declare deskripsiHasil: string | null

  // === RELATIONS ===

  // Hasil tes ini milik satu siswa
  @belongsTo(() => Siswa)
  declare siswa: BelongsTo<typeof Siswa>

  // Satu hasil tes terdiri dari banyak jawaban
  @hasMany(() => JawabanTes)
  declare jawaban: HasMany<typeof JawabanTes>
}

// title: app/models/jawaban.ts
import { BaseModel, column, belongsTo } from '@adonisjs/lucid/orm'
import type { BelongsTo } from '@adonisjs/lucid/types/relations'
import HasilTes from '#models/hasil'
import RiasecPertanyaan from '#models/riasec_pertanyaan'

export default class JawabanTes extends BaseModel {
  public static table = 'jawaban_tes'

  @column({ isPrimary: true })
  declare id: number

  @column()
  declare hasilTesId: number

  @column()
  declare pertanyaanId: number

  @column()
  declare jawaban: boolean // true untuk Ya/Suka (1), false untuk Tidak/Tidak Suka (0)

  // === RELATIONS ===

  // Jawaban ini adalah bagian dari satu sesi hasil tes
  @belongsTo(() => HasilTes)
  declare hasilTes: BelongsTo<typeof HasilTes>

  // Jawaban ini merujuk ke satu pertanyaan spesifik
  @belongsTo(() => RiasecPertanyaan)
  declare pertanyaan: BelongsTo<typeof RiasecPertanyaan>
}

// title: app/models/minat_bakat.ts
import { DateTime } from 'luxon'
import { BaseModel, column } from '@adonisjs/lucid/orm'

export default class MinatBakat extends BaseModel {
  public static table = 'minat_bakat'
  @column({ isPrimary: true })
  declare id: number

  @column()
  declare name: string

  @column()
  declare description: string

  @column()
  declare riasecType: string // Lucid otomatis map 'riasec_type' ke 'riasecType'

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime
}

// title: app/models/note.ts
// title: app/models/note.ts
import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo } from '@adonisjs/lucid/orm'
import User from '#models/user'
import type { BelongsTo } from '@adonisjs/lucid/types/relations'

export default class Note extends BaseModel {
  @column({ isPrimary: true })
  declare id: number

  @column()
  declare userId: number

  @column()
  declare title: string

  @column()
  declare content: string

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime | null

  @belongsTo(() => User)
  declare user: BelongsTo<typeof User>
}

// title: app/models/program_rating.ts
import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo } from '@adonisjs/lucid/orm'
import type { BelongsTo } from '@adonisjs/lucid/types/relations'
import Siswa from '#models/siswa'
import Program from '#models/program'

export default class ProgramRating extends BaseModel {
  static table = 'user_program_ratings'
  @column({ isPrimary: true })
  declare id: number

  @column()
  declare siswaId: number

  // Foreign key buat tabel 'program'
  @column()
  declare programId: number

  // Kolom 'rating' dengan default 0
  @column()
  declare rating: number

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime

  @belongsTo(() => Siswa)
  declare siswa: BelongsTo<typeof Siswa>

  // Rating ini punya satu program
  @belongsTo(() => Program)
  declare program: BelongsTo<typeof Program>
}

// title: app/models/program.ts
import { DateTime } from 'luxon'
import { BaseModel, column } from '@adonisjs/lucid/orm'

export default class Program extends BaseModel {
  @column({ isPrimary: true })
  declare id: bigint

  @column()
  declare name: string

  @column()
  declare description: string | null

  @column()
  declare realistic: number

  @column()
  declare investigative: number

  @column()
  declare artistic: number

  @column()
  declare social: number

  @column()
  declare enterprising: number

  @column()
  declare conventional: number

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime
}

// title: app/models/rekomendasi.ts
import { DateTime } from 'luxon'
import { BaseModel, column } from '@adonisjs/lucid/orm'

export default class Rekomendasi extends BaseModel {
  public static table = 'rekomendasi'
  @column({ isPrimary: true })
  declare id: number

  @column()
  declare tipe: 'single' | 'double' | 'triple'

  @column()
  declare kategori: string

  @column()
  declare karakteristik_utama: string | null

  @column({
    serialize: (value: string[]) => value,
    prepare: (value: string[]) => JSON.stringify(value),
    consume: (value: string) => {
      try {
        return JSON.parse(value)
      } catch {
        return []
      }
    },
  })
  declare rekomendasi_jurusan_karier: string[]

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime
}

// title: app/models/riasec_pertanyaan.ts
import { BaseModel, column } from '@adonisjs/lucid/orm'

export default class RiasecPertanyaan extends BaseModel {
  // Secara eksplisit memberitahu Lucid nama tabel jika berbeda dari snake_case plural model
  public static table = 'riasec_pertanyaan'

  @column({ isPrimary: true })
  declare id: number

  @column()
  declare teksPertanyaan: string

  @column()
  declare tipeRiasec: 'R' | 'I' | 'A' | 'S' | 'E' | 'C'

  @column()
  declare nomorUrut: number | null
}

// title: app/models/siswa.ts
import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo, hasMany } from '@adonisjs/lucid/orm'
import type { BelongsTo, HasMany } from '@adonisjs/lucid/types/relations'
import User from '#models/user'
import HasilTes from '#models/hasil'

export default class Siswa extends BaseModel {
  public static table = 'siswa'
  @column({ isPrimary: true })
  declare id: number

  @column()
  declare userId: number

  @column()
  declare namaLengkap: string

  @column()
  declare nisn: string | null

  @column()
  declare kelas: string | null

  @column.date()
  declare tanggalLahir: DateTime | null

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime

  // === RELATIONS ===

  // Profil siswa ini dimiliki oleh satu User
  @belongsTo(() => User)
  declare user: BelongsTo<typeof User>

  // Satu siswa bisa memiliki banyak hasil tes
  @hasMany(() => HasilTes)
  declare hasilTes: HasMany<typeof HasilTes>
}

// title: app/models/user.ts
// title: app/models/user.ts
import { DateTime } from 'luxon'
import hash from '@adonisjs/core/services/hash'
import { compose } from '@adonisjs/core/helpers'
import { BaseModel, column, hasMany } from '@adonisjs/lucid/orm'
import { withAuthFinder } from '@adonisjs/auth/mixins/lucid'
import Note from '#models/note'
import type { HasMany } from '@adonisjs/lucid/types/relations'

const AuthFinder = withAuthFinder(() => hash.use('scrypt'), {
  uids: ['email'],
  passwordColumnName: 'password',
})

export default class User extends compose(BaseModel, AuthFinder) {
  @column({ isPrimary: true })
  declare id: number

  @column()
  declare fullName: string | null

  @column()
  declare email: string

  @column({ serializeAs: null })
  declare password: string

  @column()
  declare role: 'siswa' | 'admin'

  @column.dateTime({ autoCreate: true })
  declare createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  declare updatedAt: DateTime | null

  @hasMany(() => Note)
  declare notes: HasMany<typeof Note>
}

// title: app/policies/main.ts
/*
|--------------------------------------------------------------------------
| Bouncer policies
|--------------------------------------------------------------------------
|
| You may define a collection of policies inside this file and pre-register
| them when creating a new bouncer instance.
|
| Pre-registered policies and abilities can be referenced as a string by their
| name. Also they are must if want to perform authorization inside Edge
| templates.
|
*/

export const policies = {
  UserPolicy: () => import('#policies/user_policy'),
  NotePolicy: () => import('#policies/note_policy'),
}

// title: app/policies/note_policy.ts
// title: app/policies/note_policy.ts
import User from '#models/user'
import Note from '#models/note'
import { BasePolicy } from '@adonisjs/bouncer'
import { AuthorizerResponse } from '@adonisjs/bouncer/types'

export default class NotePolicy extends BasePolicy {
  view(user: User, note: Note): AuthorizerResponse {
    return user.id === note.userId
  }

  update(user: User, note: Note): AuthorizerResponse {
    return user.id === note.userId
  }

  delete(user: User, note: Note): AuthorizerResponse {
    return user.id === note.userId
  }
}

// title: app/policies/user_policy.ts
// title: app/policies/user_policy.ts
import User from '#models/user'
import { BasePolicy } from '@adonisjs/bouncer'
import { AuthorizerResponse } from '@adonisjs/bouncer/types'

export default class UserPolicy extends BasePolicy {
  delete(admin: User, userToDelete: User): AuthorizerResponse {
    return admin.id !== userToDelete.id
  }
}

// title: app/services/recommendation_service.ts
// title: app/services/recommendation_service.ts

import HasilTes from '#models/hasil'
import Program from '#models/program'
import ProgramRating from '#models/program_rating'
import * as math from 'mathjs'

// --- HELPER FUNCTION (Internal - Not Exported) ---
/**
 * Menghitung Cosine Similarity antara dua vektor numerik.
 */
function calculateCosineSimilarity(vecA: number[], vecB: number[]): number {
  if (vecA.length !== vecB.length || vecA.length === 0) {
    console.error('[Similarity] Vektor tidak cocok atau kosong.', { vecA, vecB })
    return 0
  }

  // 1. Hitung Dot Product: (a1*b1) + (a2*b2) + ...
  const dotProduct = vecA.map((val, i) => val * vecB[i]).reduce((sum, current) => sum + current, 0)

  // 2. Hitung Norm (Magnitude/Panjang Vektor) untuk Vektor A: sqrt(a1^2 + a2^2 + ...)
  const normA = math.sqrt(
    vecA.map((val) => val * val).reduce((sum, current) => sum + current, 0)
  ) as number

  // 3. Hitung Norm untuk Vektor B
  const normB = math.sqrt(
    vecB.map((val) => val * val).reduce((sum, current) => sum + current, 0)
  ) as number

  if (normA === 0 || normB === 0) {
    // console.log('[Similarity] Salah satu vektor adalah nol, similaritas = 0.')
    return 0
  }

  // 4. Hitung Similaritas: Dot Product / (NormA * NormB)
  const similarity = dotProduct / (normA * normB)

  // Log untuk pembelajaran:
  console.log(`[Similarity] Menghitung kemiripan:
    -> Vektor A: [${vecA.join(', ')}]
    -> Vektor B: [${vecB.join(', ')}]
    -> Dot Product: ${dotProduct}
    -> Norm A: ${normA.toFixed(4)}
    -> Norm B: ${normB.toFixed(4)}
    -> Similarity Score: ${dotProduct} / (${normA.toFixed(4)} * ${normB.toFixed(4)}) = ${similarity.toFixed(4)}`)

  return similarity
}

// --- METHOD 1: CONTENT-BASED FILTERING (Internal - Not Exported) ---
/**
 * Memberikan rekomendasi program berdasarkan kemiripan profil RIASEC siswa
 * dengan profil RIASEC setiap program studi (Content-Based).
 */
async function getRecommendationsByContent(siswaId: number, topN: number = 6): Promise<Program[]> {
  console.log(`
--- Memulai Rekomendasi [Content-Based] untuk Siswa ID: ${siswaId} ---`)

  // 1. Dapatkan profil RIASEC siswa (vektor target)
  const hasilTes = await HasilTes.query()
    .where('siswa_id', siswaId)
    .orderBy('created_at', 'desc')
    .first()
  if (!hasilTes) {
    console.log('[Content-Based] GAGAL: Siswa belum mengerjakan tes RIASEC.')
    return []
  }
  const siswaVector = [
    hasilTes.skorR,
    hasilTes.skorI,
    hasilTes.skorA,
    hasilTes.skorS,
    hasilTes.skorE,
    hasilTes.skorC,
  ]
  console.log(
    `[Content-Based] LANGKAH 1: Vektor RIASEC siswa target ditemukan: [${siswaVector.join(', ')}]`
  )

  // 2. Dapatkan profil RIASEC dari semua program
  const allPrograms = await Program.all()
  if (allPrograms.length === 0) {
    console.log('[Content-Based] GAGAL: Tidak ada data program di database.')
    return []
  }
  console.log(
    `[Content-Based] LANGKAH 2: Ditemukan ${allPrograms.length} program studi untuk dibandingkan.`
  )

  // 3. Hitung similaritas antara siswa dan SETIAP program
  console.log(
    `
[Content-Based] LANGKAH 3: Menghitung Cosine Similarity antara siswa dan setiap program...`
  )
  const programSimilarities = allPrograms.map((program) => {
    const programVector = [
      program.realistic,
      program.investigative,
      program.artistic,
      program.social,
      program.enterprising,
      program.conventional,
    ]
    console.log(`
  Membandingkan dengan Program ID: ${program.id} (${program.name})`)
    const similarity = calculateCosineSimilarity(siswaVector, programVector)
    return { program, similarity }
  })

  // 4. Urutkan program berdasarkan skor similaritas tertinggi
  console.log(
    `
[Content-Based] LANGKAH 4: Mengurutkan program berdasarkan skor similaritas (tertinggi ke terendah).`
  )
  programSimilarities.sort((a, b) => b.similarity - a.similarity)

  // Log untuk melihat hasil pengurutan
  console.log('  -> Hasil setelah diurutkan:')
  programSimilarities.forEach((p) =>
    console.log(`    - Prog ID ${p.program.id}: Skor ${p.similarity.toFixed(4)}`)
  )

  // 5. Ambil top N program dan kembalikan hasilnya
  const topRecommendations = programSimilarities.slice(0, topN)
  console.log(`
[Content-Based] LANGKAH 5: Mengambil ${topN} rekomendasi teratas.`)

  console.log(
    `[Content-Based] HASIL AKHIR (ID & Skor):`,
    topRecommendations.map((r) => ({
      programId: r.program.id,
      similarityScore: r.similarity.toFixed(4),
    }))
  )
  console.log(`--- Rekomendasi [Content-Based] Selesai ---`)

  return topRecommendations.map((rec) => {
    rec.program.$extras.recommendationScore = rec.similarity
    return rec.program
  })
}

// --- METHOD 2: COLLABORATIVE FILTERING (Internal - Not Exported) ---
/**
 * Memberikan rekomendasi berdasarkan preferensi (rating) dari siswa lain yang
 * memiliki profil RIASEC serupa (User-User Collaborative Filtering).
 */
async function getRecommendationsByCollaborativeFiltering(
  targetSiswaId: number,
  topSimilarUsers: number = 6,
  topNPrograms: number = 6
): Promise<Program[]> {
  console.log(
    `
--- Memulai Rekomendasi [Collaborative-Filtering] untuk Siswa ID: ${targetSiswaId} ---`
  )

  // 1. Dapatkan data tes untuk target dan siswa lainnya
  const targetHasilTes = await HasilTes.query().where('siswa_id', targetSiswaId).first()
  const allOtherHasilTes = await HasilTes.query().whereNot('siswa_id', targetSiswaId)

  if (!targetHasilTes || allOtherHasilTes.length === 0) {
    console.log(
      '[CF] GAGAL: Data tes tidak cukup (membutuhkan data target dan minimal 1 siswa lain).'
    )
    return []
  }
  const targetVector = [
    targetHasilTes.skorR,
    targetHasilTes.skorI,
    targetHasilTes.skorA,
    targetHasilTes.skorS,
    targetHasilTes.skorE,
    targetHasilTes.skorC,
  ]
  console.log(
    `[CF] LANGKAH 1: Vektor siswa target [${targetVector.join(', ')}] dan ${allOtherHasilTes.length} siswa lain ditemukan.`
  )

  // 2. Hitung similaritas dengan semua siswa lain
  console.log(`
[CF] LANGKAH 2: Menghitung kemiripan siswa target dengan semua siswa lain...`)
  const similarities = allOtherHasilTes
    .map((otherHasil) => {
      const otherVector = [
        otherHasil.skorR,
        otherHasil.skorI,
        otherHasil.skorA,
        otherHasil.skorS,
        otherHasil.skorE,
        otherHasil.skorC,
      ]
      console.log(`
  Membandingkan dengan Siswa ID: ${otherHasil.siswaId}`)
      return {
        siswaId: otherHasil.siswaId,
        similarity: calculateCosineSimilarity(targetVector, otherVector),
      }
    })
    .filter((s) => s.similarity > 0.5) // Filter: hanya pertimbangkan user yang cukup mirip (misal > 0.5)

  // 3. Urutkan dan ambil top N "tetangga" (neighbors)
  similarities.sort((a, b) => b.similarity - a.similarity)
  const topSimilarities = similarities.slice(0, topSimilarUsers)
  const similarUserIds = topSimilarities.map((s) => s.siswaId)

  if (similarUserIds.length === 0) {
    console.log('[CF] GAGAL: Tidak ditemukan siswa lain yang cukup mirip.')
    return []
  }
  console.log(
    `
[CF] LANGKAH 3: Ditemukan ${similarUserIds.length} "tetangga" terdekat (paling mirip):`
  )
  topSimilarities.forEach((s) =>
    console.log(`  - Siswa ID: ${s.siswaId}, Skor Kemiripan: ${s.similarity.toFixed(4)}`)
  )

  // 4. Kumpulkan rating dari para tetangga (hanya yang bagus)
  const similarUsersRatings = await ProgramRating.query()
    .whereIn('siswa_id', similarUserIds)
    .where('rating', '>=', 4)
  if (similarUsersRatings.length === 0) {
    console.log('[CF] GAGAL: Para tetangga tidak memiliki rating yang cukup tinggi (>= 4).')
    return []
  }
  console.log(
    `
[CF] LANGKAH 4: Ditemukan ${similarUsersRatings.length} rating tinggi dari para tetangga.`
  )
  // console.log('  -> Data rating:', similarUsersRatings.map(r => ({user: r.siswaId, program: r.programId, rating: r.rating})));

  // 5. Hitung skor prediksi untuk setiap program berdasarkan rating tetangga
  console.log(`
[CF] LANGKAH 5: Menghitung skor prediksi untuk setiap program...`)
  console.log(
    `  -> RUMUS: Prediksi(Program) = Σ (Kemiripan_Tetangga * Rating_Tetangga) / Σ (Kemiripan_Tetangga)`
  )
  const programScores = new Map<number, { totalScore: number; similaritySum: number }>()
  similarUsersRatings.forEach((rating) => {
    const similarityInfo = topSimilarities.find((s) => s.siswaId === rating.siswaId)
    if (!similarityInfo) return

    const similarity = similarityInfo.similarity
    const weightedScore = similarity * rating.rating

    const current = programScores.get(rating.programId) || { totalScore: 0, similaritySum: 0 }
    programScores.set(rating.programId, {
      totalScore: current.totalScore + weightedScore,
      similaritySum: current.similaritySum + similarity,
    })
    console.log(
      `    - Prog ID ${rating.programId}: Tetangga ID ${rating.siswaId} (kemiripan ${similarity.toFixed(2)}) memberi rating ${rating.rating}. Skor berbobot: ${weightedScore.toFixed(2)}.`
    )
  })

  // 6. Buat daftar rekomendasi akhir
  console.log(`
[CF] LANGKAH 6: Menghitung skor prediksi final dan mengurutkan...`)
  const recommendations = Array.from(programScores.entries())
    .map(([programId, scores]) => {
      const predictedRating =
        scores.similaritySum > 0 ? scores.totalScore / scores.similaritySum : 0
      console.log(
        `  -> Prediksi Prog ID ${programId}: ${scores.totalScore.toFixed(2)} / ${scores.similaritySum.toFixed(2)} = ${predictedRating.toFixed(4)}`
      )
      return { programId, predictedRating }
    })
    .sort((a, b) => b.predictedRating - a.predictedRating)
    .slice(0, topNPrograms)

  const recommendationIds = recommendations.map((r) => r.programId)
  if (recommendationIds.length === 0) {
    console.log('[CF] GAGAL: Tidak ada rekomendasi yang bisa dihasilkan setelah perhitungan.')
    return []
  }

  // 7. Ambil detail program dari database
  const recommendedPrograms = await Program.query().whereIn('id', recommendationIds)

  // 8. Susun ulang & tambahkan skor
  const finalResult = recommendationIds
    .map((id) => {
      const program = recommendedPrograms.find((p) => p.id === id)
      if (program) {
        program.$extras.recommendationScore = recommendations.find(
          (r) => r.programId === id
        )?.predictedRating
      }
      return program
    })
    .filter((p): p is Program => p !== undefined)

  console.log(`
[CF] HASIL AKHIR (${finalResult.length} rekomendasi):`)
  finalResult.forEach((p) =>
    console.log(
      `  - Prog ID ${p.id} (${p.name}), Skor Prediksi: ${p.$extras.recommendationScore.toFixed(4)}`
    )
  )
  console.log(`--- Rekomendasi [Collaborative-Filtering] Selesai ---`)

  return finalResult
}

// --- MAIN EXPORT: HYBRID SYSTEM ---
export async function getHybridRecommendations(siswaId: number): Promise<Program[]> {
  console.log(`

======================================================`)
  console.log(`[HYBRID] Memulai Proses Rekomendasi Hybrid untuk Siswa ID: ${siswaId}`)
  console.log(`======================================================`)

  console.log('
[HYBRID] STRATEGI: Mencoba Collaborative Filtering terlebih dahulu.')
  let recommendations = await getRecommendationsByCollaborativeFiltering(siswaId)

  if (recommendations.length === 0) {
    console.log(`
[HYBRID] STRATEGI: Collaborative Filtering tidak menghasilkan rekomendasi.`)
    console.log(`[HYBRID] TINDAKAN: Beralih (fallback) ke metode Content-Based Filtering.`)
    recommendations = await getRecommendationsByContent(siswaId)
  } else {
    console.log('
[HYBRID] STRATEGI: Collaborative Filtering berhasil menghasilkan rekomendasi.')
    console.log('[HYBRID] TINDAKAN: Menggunakan hasil dari Collaborative Filtering.')
  }

  console.log(`
======================================================`)
  console.log(`[HYBRID] PROSES SELESAI. Total ${recommendations.length} rekomendasi ditemukan.`)
  console.log(`======================================================`)
  return recommendations
}

// title: app/services/riasec_service.ts
// title: app/services/riasec_service.ts

import db from '@adonisjs/lucid/services/db'
import RiasecPertanyaan from '#models/riasec_pertanyaan'
import HasilTes from '#models/hasil'
import JawabanTes from '#models/jawaban'
import MinatBakat from '#models/minat_bakat'

type Answers = Record<string, number>
type RiasecScores = { R: number; I: number; A: number; S: number; E: number; C: number }

export default class RiasecService {
  /**
   * Memproses jawaban tes RIASEC, menghitung skor, dan menyimpan hasilnya.
   */
  public async processTest(siswaId: number, answers: Answers): Promise<HasilTes> {
    console.log(`
--- Memulai Proses Tes RIASEC untuk Siswa ID: ${siswaId} ---`)
    console.log('[INPUT] Jawaban yang diterima:', answers)

    return await db.transaction(async (trx) => {
      // (Validasi tidak diubah, jadi kita fokus pada logika utama)
      const allQuestions = await RiasecPertanyaan.query({ client: trx })
      const questionsMap = new Map(allQuestions.map((q) => [q.id, q.tipeRiasec]))

      // ... validasi lainnya ...

      console.log('
[LANGKAH 1] Inisialisasi Skor Awal')
      const scores: RiasecScores = { R: 0, I: 0, A: 0, S: 0, E: 0, C: 0 }
      console.log('Skor Awal:', scores)

      console.log('
[LANGKAH 2] Menghitung Skor Berdasarkan Jawaban')
      for (const [questionIdStr, scoreValue] of Object.entries(answers)) {
        if (scoreValue === 1) {
          // Hanya proses jawaban 'Ya' (nilai 1)
          const questionId = Number(questionIdStr)
          const tipe = questionsMap.get(questionId)
          if (tipe && tipe in scores) {
            scores[tipe as keyof RiasecScores]++
            console.log(
              ` -> Jawaban 'Ya' untuk pertanyaan ID ${questionId} (Tipe: ${tipe}). Menambah skor ${tipe}. Skor ${tipe} sekarang: ${scores[tipe as keyof RiasecScores]}`
            )
          }
        }
      }

      console.log('
[LANGKAH 3] Hasil Akhir Perhitungan Skor')
      console.log('Skor Final:', scores)

      console.log('
[LANGKAH 4] Mengurutkan Skor untuk Menentukan Kode Holland')
      const sortedScores = Object.entries(scores).sort(([keyA, valA], [keyB, valB]) => {
        if (valB !== valA) return valB - valA // Urutkan dari nilai tertinggi ke terendah
        return keyA.localeCompare(keyB) // Jika nilai sama, urutkan berdasarkan abjad (R, I, A, S, E, C)
      })
      console.log(
        'Skor setelah diurutkan (descending):',
        sortedScores.map((s) => `${s[0]}: ${s[1]}`)
      )

      console.log('
[LANGKAH 5] Membuat Kode Holland (3 Tipe Teratas)')
      const hollandCode = sortedScores
        .slice(0, 3)
        .map(([key]) => key)
        .join('')
      console.log('Kode Holland yang dihasilkan:', hollandCode)

      const hasil = await HasilTes.create(
        {
          siswaId,
          skorR: scores.R,
          skorI: scores.I,
          skorA: scores.A,
          skorS: scores.S,
          skorE: scores.E,
          skorC: scores.C,
          kodeHolland: hollandCode,
        },
        { client: trx }
      )
      console.log(`
[LANGKAH 6] Hasil Tes berhasil disimpan ke DB dengan ID: ${hasil.id}`)

      // ... (menyimpan jawaban detail tidak perlu log mendalam)
      const jawabanData = Object.keys(answers)
        .map(Number)
        .map((id) => ({
          hasilTesId: hasil.id,
          pertanyaanId: id,
          jawaban: Boolean(answers[id]),
        }))
      await JawabanTes.createMany(jawabanData, { client: trx })
      console.log(` -> ${jawabanData.length} detail jawaban juga disimpan.`)

      console.log('--- Proses Tes RIASEC Selesai ---')
      return hasil
    })
  }

  /**
   * Memberikan rekomendasi minat dan bakat yang paling relevan berdasarkan
   * hasil tes dengan sistem skor berbobot dan pembatasan jumlah.
   */
  public async getInterestRecommendations(
    hasilTes: HasilTes,
    limit: number = 6
  ): Promise<MinatBakat[]> {
    console.log(`
--- Memulai Proses Rekomendasi untuk Hasil Tes ID: ${hasilTes.id} ---`)
    console.log(`[INPUT] Kode Holland: "${hasilTes.kodeHolland}", Batas Rekomendasi: ${limit}`)

    if (!hasilTes.kodeHolland || hasilTes.kodeHolland.length < 3) {
      console.log(
        '[WARNING] Kode Holland tidak valid atau kurang dari 3 karakter. Mengembalikan array kosong.'
      )
      return []
    }

    const topTypes = hasilTes.kodeHolland.split('') // Misal: ['E', 'C', 'R']
    console.log('
[LANGKAH 1] Mengekstrak 3 Tipe Teratas dari Kode Holland')
    console.log('Tipe Teratas:', topTypes)

    console.log('
[LANGKAH 2] Membuat Peta Pembobotan (Weight Map)')
    const weights: Record<string, number> = {
      [topTypes[0]]: 3, // Tipe primer mendapat 3 poin
      [topTypes[1]]: 2, // Tipe sekunder mendapat 2 poin
      [topTypes[2]]: 1, // Tipe tersier mendapat 1 poin
    }
    console.log('Peta Bobot (Tipe_Primer: 3, Sekunder: 2, Tersier: 1):', weights)

    console.log('
[LANGKAH 3] Mengambil Semua Minat Bakat yang Relevan dari Database')
    const allMatchedInterests = await MinatBakat.query().whereIn('riasec_type', topTypes)
    console.log(
      `Ditemukan ${allMatchedInterests.length} data MinatBakat yang cocok dengan tipe ${topTypes.join(', ')}.`
    )
    // Untuk debugging lebih detail, Anda bisa melihat data mentahnya:
    // console.log('Data mentah dari DB:', allMatchedInterests.map(i => ({ name: i.name, type: i.riasecType })));

    console.log('
[LANGKAH 4] Menghitung Skor Berbobot untuk Setiap Minat Bakat Unik')
    const scoredInterests: Record<string, { data: MinatBakat; matchScore: number }> = {}

    for (const interest of allMatchedInterests) {
      // Inisialisasi jika nama minat bakat ini belum ada di daftar
      if (!scoredInterests[interest.name]) {
        scoredInterests[interest.name] = { data: interest, matchScore: 0 }
        // console.log(` -> Inisialisasi skor untuk minat: "${interest.name}"`)
      }

      const scoreToAdd = weights[interest.riasecType]
      if (scoreToAdd) {
        const oldScore = scoredInterests[interest.name].matchScore
        scoredInterests[interest.name].matchScore += scoreToAdd
        console.log(
          ` -> Minat "${interest.name}" (Tipe: ${interest.riasecType}) mendapat bobot ${scoreToAdd}. Skor total sekarang: ${oldScore} + ${scoreToAdd} = ${scoredInterests[interest.name].matchScore}`
        )
      }
    }
    console.log(
      '
Hasil Agregasi Skor (sebelum diurutkan):',
      Object.fromEntries(
        Object.entries(scoredInterests).map(([name, val]) => [name, val.matchScore])
      )
    )

    console.log('
[LANGKAH 5] Mengurutkan Rekomendasi Berdasarkan Skor Tertinggi')
    const recommendations = Object.values(scoredInterests)
      .sort((a, b) => b.matchScore - a.matchScore)
      .slice(0, limit)
      .map((item) => {
        item.data.$extras.matchScore = item.matchScore
        return item.data
      })

    console.log(
      `
[HASIL AKHIR] ${recommendations.length} Rekomendasi Teratas (dibatasi oleh limit=${limit}):`
    )
    recommendations.forEach((rec, index) => {
      console.log(`  ${index + 1}. Nama: "${rec.name}", Skor Kecocokan: ${rec.$extras.matchScore}`)
    })
    console.log('--- Proses Rekomendasi Selesai ---')

    return recommendations
  }
}

// title: app/validators/note.ts
// title: app/validators/note.ts
import vine from '@vinejs/vine'

export const createNoteValidator = vine.compile(
  vine.object({
    title: vine.string().trim().minLength(3),
    content: vine.string().trim().minLength(5),
  })
)

export const updateNoteValidator = vine.compile(
  vine.object({
    title: vine.string().trim().minLength(3),
    content: vine.string().trim().minLength(5),
  })
)

// title: app/validators/pertanyaan_riasec.ts
// title: app/validators/riasec.ts
import vine from '@vinejs/vine'

export const createPertanyaanValidator = vine.compile(
  vine.object({
    teksPertanyaan: vine.string().trim().minLength(10).maxLength(255),
    tipeRiasec: vine.enum(['R', 'I', 'A', 'S', 'E', 'C']),
  })
)

// title: app/validators/siswa.ts
// title: app/validators/siswa.ts
import vine from '@vinejs/vine'
import { DateTime } from 'luxon'

export const createSiswaValidator = vine.compile(
  vine.object({
    namaLengkap: vine.string().trim().minLength(3).maxLength(255),
    email: vine
      .string()
      .trim()
      .email()
      .unique(async (db, value) => {
        const user = await db.from('users').where('email', value).first()
        return !user
      }),
    password: vine.string().minLength(8).confirmed(),
    nisn: vine.string().trim().nullable(), // Use max instead of maxLength
    kelas: vine.string().trim().nullable(), // Use max for string length validation
    tanggalLahir: vine
      .date({ formats: ['YYYY-MM-DD'] })
      .nullable()
      .transform((value) => (value ? DateTime.fromJSDate(value) : null)),
  })
)
export const updateSiswaValidator = vine.compile(
  vine.object({
    namaLengkap: vine.string().trim().minLength(3),
    email: vine
      .string()
      .trim()
      .email()
      .unique(async (db, value, field) => {
        const user = await db
          .from('users')
          .where('email', value)
          .whereNot('id', field.meta.userId)
          .first()
        return !user
      }),
    password: vine.string().minLength(8).nullable(),
    nisn: vine.string().trim().nullable(),
    kelas: vine.string().trim().nullable(),
    tanggalLahir: vine
      .date({ formats: ['YYYY-MM-DD'] })
      .nullable()
      .transform((value) => (value ? DateTime.fromJSDate(value) : null)),
  })
)

// title: app/validators/user.ts
// title: app/validators/user.ts
import vine from '@vinejs/vine'

export const createUserValidator = vine.compile(
  vine.object({
    fullName: vine.string().trim(),
    email: vine
      .string()
      .email()
      .unique(async (db, value) => {
        const user = await db.from('users').where('email', value).first()
        return !user
      }),
    password: vine.string().minLength(8),
    role: vine.enum(['user', 'admin', 'siswa']),
  })
)

export const updateUserValidator = vine.compile(
  vine.object({
    fullName: vine.string().trim(),
    email: vine.string().email(),
    role: vine.enum(['user', 'admin', 'siswa']),
  })
)

export const registerUserValidator = vine.compile(
  vine.object({
    fullName: vine.string().trim(),
    email: vine
      .string()
      .email()
      .unique(async (db, value) => {
        const user = await db.from('users').where('email', value).first()
        return !user
      }),
    password: vine.string().minLength(8).confirmed(),
  })
)

export const updateAdminProfileValidator = vine.compile(
  vine.object({
    fullName: vine.string().trim().minLength(3),
    email: vine
      .string()
      .trim()
      .email()
      .unique(async (db, value, field) => {
        // Cek apakah ada email yang sama, KECUALI untuk user ID saat ini
        const user = await db
          .from('users')
          .where('email', value)
          .whereNot('id', field.meta.userId) // Ambil userId dari meta
          .first()
        return !user
      }),
    // Password bersifat opsional, tapi jika diisi, harus ada konfirmasinya
    password: vine.string().minLength(8).confirmed().optional(),
  })
)

// title: bin/console.ts
/*
|--------------------------------------------------------------------------
| Ace entry point
|--------------------------------------------------------------------------
|
| The "console.ts" file is the entrypoint for booting the AdonisJS
| command-line framework and executing commands.
|
| Commands do not boot the application, unless the currently running command
| has "options.startApp" flag set to true.
|
*/

import 'reflect-metadata'
import { Ignitor, prettyPrintError } from '@adonisjs/core'

/**
 * URL to the application root. AdonisJS need it to resolve
 * paths to file and directories for scaffolding commands
 */
const APP_ROOT = new URL('../', import.meta.url)

/**
 * The importer is used to import files in context of the
 * application.
 */
const IMPORTER = (filePath: string) => {
  if (filePath.startsWith('./') || filePath.startsWith('../')) {
    return import(new URL(filePath, APP_ROOT).href)
  }
  return import(filePath)
}

new Ignitor(APP_ROOT, { importer: IMPORTER })
  .tap((app) => {
    app.booting(async () => {
      await import('#start/env')
    })
    app.listen('SIGTERM', () => app.terminate())
    app.listenIf(app.managedByPm2, 'SIGINT', () => app.terminate())
  })
  .ace()
  .handle(process.argv.splice(2))
  .catch((error) => {
    process.exitCode = 1
    prettyPrintError(error)
  })

// title: bin/server.ts
/*
|--------------------------------------------------------------------------
| HTTP server entrypoint
|--------------------------------------------------------------------------
|
| The "server.ts" file is the entrypoint for starting the AdonisJS HTTP
| server. Either you can run this file directly or use the "serve"
| command to run this file and monitor file changes
|
*/

import 'reflect-metadata'
import { Ignitor, prettyPrintError } from '@adonisjs/core'

/**
 * URL to the application root. AdonisJS need it to resolve
 * paths to file and directories for scaffolding commands
 */
const APP_ROOT = new URL('../', import.meta.url)

/**
 * The importer is used to import files in context of the
 * application.
 */
const IMPORTER = (filePath: string) => {
  if (filePath.startsWith('./') || filePath.startsWith('../')) {
    return import(new URL(filePath, APP_ROOT).href)
  }
  return import(filePath)
}

new Ignitor(APP_ROOT, { importer: IMPORTER })
  .tap((app) => {
    app.booting(async () => {
      await import('#start/env')
    })
    app.listen('SIGTERM', () => app.terminate())
    app.listenIf(app.managedByPm2, 'SIGINT', () => app.terminate())
  })
  .httpServer()
  .start()
  .catch((error) => {
    process.exitCode = 1
    prettyPrintError(error)
  })

// title: bin/test.ts
/*
|--------------------------------------------------------------------------
| Test runner entrypoint
|--------------------------------------------------------------------------
|
| The "test.ts" file is the entrypoint for running tests using Japa.
|
| Either you can run this file directly or use the "test"
| command to run this file and monitor file changes.
|
*/

process.env.NODE_ENV = 'test'

import 'reflect-metadata'
import { Ignitor, prettyPrintError } from '@adonisjs/core'
import { configure, processCLIArgs, run } from '@japa/runner'

/**
 * URL to the application root. AdonisJS need it to resolve
 * paths to file and directories for scaffolding commands
 */
const APP_ROOT = new URL('../', import.meta.url)

/**
 * The importer is used to import files in context of the
 * application.
 */
const IMPORTER = (filePath: string) => {
  if (filePath.startsWith('./') || filePath.startsWith('../')) {
    return import(new URL(filePath, APP_ROOT).href)
  }
  return import(filePath)
}

new Ignitor(APP_ROOT, { importer: IMPORTER })
  .tap((app) => {
    app.booting(async () => {
      await import('#start/env')
    })
    app.listen('SIGTERM', () => app.terminate())
    app.listenIf(app.managedByPm2, 'SIGINT', () => app.terminate())
  })
  .testRunner()
  .configure(async (app) => {
    const { runnerHooks, ...config } = await import('../tests/bootstrap.js')

    processCLIArgs(process.argv.splice(2))
    configure({
      ...app.rcFile.tests,
      ...config,
      ...{
        setup: runnerHooks.setup,
        teardown: runnerHooks.teardown.concat([() => app.terminate()]),
      },
    })
  })
  .run(() => run())
  .catch((error) => {
    process.exitCode = 1
    prettyPrintError(error)
  })

// title: config/app.ts
import env from '#start/env'
import app from '@adonisjs/core/services/app'
import { Secret } from '@adonisjs/core/helpers'
import { defineConfig } from '@adonisjs/core/http'

/**
 * The app key is used for encrypting cookies, generating signed URLs,
 * and by the "encryption" module.
 *
 * The encryption module will fail to decrypt data if the key is lost or
 * changed. Therefore it is recommended to keep the app key secure.
 */
export const appKey = new Secret(env.get('APP_KEY'))

/**
 * The configuration settings used by the HTTP server
 */
export const http = defineConfig({
  generateRequestId: true,
  allowMethodSpoofing: false,

  /**
   * Enabling async local storage will let you access HTTP context
   * from anywhere inside your application.
   */
  useAsyncLocalStorage: false,

  /**
   * Manage cookies configuration. The settings for the session id cookie are
   * defined inside the "config/session.ts" file.
   */
  cookie: {
    domain: '',
    path: '/',
    maxAge: '2h',
    httpOnly: true,
    secure: app.inProduction,
    sameSite: 'lax',
  },
})

// title: config/auth.ts
import { defineConfig } from '@adonisjs/auth'
import { sessionGuard, sessionUserProvider } from '@adonisjs/auth/session'
import type { InferAuthenticators, InferAuthEvents, Authenticators } from '@adonisjs/auth/types'

const authConfig = defineConfig({
  default: 'web',
  guards: {
    web: sessionGuard({
      useRememberMeTokens: false,
      provider: sessionUserProvider({
        model: () => import('#models/user')
      }),
    }),
  },
})

export default authConfig

/**
 * Inferring types from the configured auth
 * guards.
 */
declare module '@adonisjs/auth/types' {
  export interface Authenticators extends InferAuthenticators<typeof authConfig> {}
}
declare module '@adonisjs/core/types' {
  interface EventsList extends InferAuthEvents<Authenticators> {}
}

// title: config/bodyparser.ts
import { defineConfig } from '@adonisjs/core/bodyparser'

const bodyParserConfig = defineConfig({
  /**
   * The bodyparser middleware will parse the request body
   * for the following HTTP methods.
   */
  allowedMethods: ['POST', 'PUT', 'PATCH', 'DELETE'],

  /**
   * Config for the "application/x-www-form-urlencoded"
   * content-type parser
   */
  form: {
    convertEmptyStringsToNull: true,
    types: ['application/x-www-form-urlencoded'],
  },

  /**
   * Config for the JSON parser
   */
  json: {
    convertEmptyStringsToNull: true,
    types: [
      'application/json',
      'application/json-patch+json',
      'application/vnd.api+json',
      'application/csp-report',
    ],
  },

  /**
   * Config for the "multipart/form-data" content-type parser.
   * File uploads are handled by the multipart parser.
   */
  multipart: {
    /**
     * Enabling auto process allows bodyparser middleware to
     * move all uploaded files inside the tmp folder of your
     * operating system
     */
    autoProcess: true,
    convertEmptyStringsToNull: true,
    processManually: [],

    /**
     * Maximum limit of data to parse including all files
     * and fields
     */
    limit: '20mb',
    types: ['multipart/form-data'],
  },
})

export default bodyParserConfig

// title: config/cors.ts
import { defineConfig } from '@adonisjs/cors'

/**
 * Configuration options to tweak the CORS policy. The following
 * options are documented on the official documentation website.
 *
 * https://docs.adonisjs.com/guides/security/cors
 */
const corsConfig = defineConfig({
  enabled: true,
  origin: [],
  methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE'],
  headers: true,
  exposeHeaders: [],
  credentials: true,
  maxAge: 90,
})

export default corsConfig

// title: config/database.ts
import env from '#start/env'
import { defineConfig } from '@adonisjs/lucid'

const dbConfig = defineConfig({
  connection: 'mysql',
  connections: {
    mysql: {
      client: 'mysql2',
      connection: {
        host: env.get('DB_HOST'),
        port: env.get('DB_PORT'),
        user: env.get('DB_USER'),
        password: env.get('DB_PASSWORD'),
        database: env.get('DB_DATABASE'),
      },
      migrations: {
        naturalSort: true,
        paths: ['database/migrations'],
      },
    },
  },
})

export default dbConfig

// title: config/hash.ts
import { defineConfig, drivers } from '@adonisjs/core/hash'

const hashConfig = defineConfig({
  default: 'scrypt',

  list: {
    scrypt: drivers.scrypt({
      cost: 16384,
      blockSize: 8,
      parallelization: 1,
      maxMemory: 33554432,
    }),
  },
})

export default hashConfig

/**
 * Inferring types for the list of hashers you have configured
 * in your application.
 */
declare module '@adonisjs/core/types' {
  export interface HashersList extends InferHashers<typeof hashConfig> {}
}

// title: config/inertia.ts
import { defineConfig } from '@adonisjs/inertia'
import type { InferSharedProps } from '@adonisjs/inertia/types'

const inertiaConfig = defineConfig({
  /**
   * Path to the Edge view that will be used as the root view for Inertia responses
   */
  rootView: 'inertia_layout',

  /**
   * Data that should be shared with all rendered pages
   */
  sharedData: {
    // user: (ctx) => ctx.inertia.always(() => ctx.auth.user),
    flash: (ctx) => ctx.session.flashMessages,
  },

  /**
   * Options for the server-side rendering
   */
  ssr: {
    enabled: true,
    entrypoint: 'inertia/app/ssr.tsx',
  },
})

export default inertiaConfig

declare module '@adonisjs/inertia/types' {
  export interface SharedProps extends InferSharedProps<typeof inertiaConfig> {}
}

// title: config/logger.ts
import env from '#start/env'
import app from '@adonisjs/core/services/app'
import { defineConfig, targets } from '@adonisjs/core/logger'

const loggerConfig = defineConfig({
  default: 'app',

  /**
   * The loggers object can be used to define multiple loggers.
   * By default, we configure only one logger (named "app").
   */
  loggers: {
    app: {
      enabled: true,
      name: env.get('APP_NAME'),
      level: env.get('LOG_LEVEL'),
      transport: {
        targets: targets()
          .pushIf(!app.inProduction, targets.pretty())
          .pushIf(app.inProduction, targets.file({ destination: 1 }))
          .toArray(),
      },
    },
  },
})

export default loggerConfig

/**
 * Inferring types for the list of loggers you have configured
 * in your application.
 */
declare module '@adonisjs/core/types' {
  export interface LoggersList extends InferLoggers<typeof loggerConfig> {}
}

// title: config/session.ts
import env from '#start/env'
import app from '@adonisjs/core/services/app'
import { defineConfig, stores } from '@adonisjs/session'

const sessionConfig = defineConfig({
  enabled: true,
  cookieName: 'adonis-session',

  /**
   * When set to true, the session id cookie will be deleted
   * once the user closes the browser.
   */
  clearWithBrowser: false,

  /**
   * Define how long to keep the session data alive without
   * any activity.
   */
  age: '2h',

  /**
   * Configuration for session cookie and the
   * cookie store
   */
  cookie: {
    path: '/',
    httpOnly: true,
    secure: app.inProduction,
    sameSite: 'lax',
  },

  /**
   * The store to use. Make sure to validate the environment
   * variable in order to infer the store name without any
   * errors.
   */
  store: env.get('SESSION_DRIVER'),

  /**
   * List of configured stores. Refer documentation to see
   * list of available stores and their config.
   */
  stores: {
    cookie: stores.cookie(),
  },
})

export default sessionConfig

// title: config/shield.ts
import { defineConfig } from '@adonisjs/shield'

const shieldConfig = defineConfig({
  /**
   * Configure CSP policies for your app. Refer documentation
   * to learn more
   */
  csp: {
    enabled: false,
    directives: {},
    reportOnly: false,
  },

  /**
   * Configure CSRF protection options. Refer documentation
   * to learn more
   */
  csrf: {
    enabled: true,
    exceptRoutes: [],
    enableXsrfCookie: true,
    methods: ['POST', 'PUT', 'PATCH', 'DELETE'],
  },

  /**
   * Control how your website should be embedded inside
   * iFrames
   */
  xFrame: {
    enabled: true,
    action: 'DENY',
  },

  /**
   * Force browser to always use HTTPS
   */
  hsts: {
    enabled: true,
    maxAge: '180 days',
  },

  /**
   * Disable browsers from sniffing the content type of a
   * response and always rely on the "content-type" header.
   */
  contentTypeSniffing: {
    enabled: true,
  },
})

export default shieldConfig

// title: config/static.ts
import { defineConfig } from '@adonisjs/static'

/**
 * Configuration options to tweak the static files middleware.
 * The complete set of options are documented on the
 * official documentation website.
 *
 * https://docs.adonisjs.com/guides/static-assets
 */
const staticServerConfig = defineConfig({
  enabled: true,
  etag: true,
  lastModified: true,
  dotFiles: 'ignore',
})

export default staticServerConfig

// title: config/vite.ts
import { defineConfig } from '@adonisjs/vite'

const viteBackendConfig = defineConfig({
  /**
   * The output of vite will be written inside this
   * directory. The path should be relative from
   * the application root.
   */
  buildDirectory: 'public/assets',

  /**
   * The path to the manifest file generated by the
   * "vite build" command.
   */
  manifestFile: 'public/assets/.vite/manifest.json',

  /**
   * Feel free to change the value of the "assetsUrl" to
   * point to a CDN in production.
   */
  assetsUrl: '/assets',

  scriptAttributes: {
    defer: true,
  },
})

export default viteBackendConfig

// title: database/migrations/1749892627155_create_users_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'users'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id').notNullable()
      table.string('full_name').nullable()
      table.string('email', 254).notNullable().unique()
      table.string('password').notNullable()
      table.string('role').notNullable().defaultTo('user')

      table.timestamp('created_at').notNullable()
      table.timestamp('updated_at').nullable()
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1749947099577_create_notes_table.ts
// title: database/migrations/...._create_notes_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'notes'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id')
      table.integer('user_id').unsigned().references('id').inTable('users').onDelete('CASCADE')
      table.string('title').notNullable()
      table.text('content').notNullable()
      table.timestamp('created_at')
      table.timestamp('updated_at')
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750237566915_create_admins_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'admins'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id').primary()
      table
        .integer('user_id')
        .unsigned()
        .notNullable()
        .unique()
        .references('id')
        .inTable('users')
        .onDelete('CASCADE')

      table.string('nama_lengkap', 100).notNullable()
      table.string('jabatan', 50).nullable()

      table.timestamp('created_at')
      table.timestamp('updated_at')
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750237567410_create_siswa_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'siswa'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id').primary()
      table
        .integer('user_id')
        .unsigned()
        .notNullable()
        .unique()
        .references('id')
        .inTable('users')
        .onDelete('CASCADE')

      table.string('nama_lengkap', 100).notNullable()
      table.string('nisn', 20).nullable().unique()
      table.string('kelas', 20).nullable()
      table.date('tanggal_lahir').nullable()

      table.timestamp('created_at')
      table.timestamp('updated_at')
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750237567902_create_riasec_pertanyaans_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'riasec_pertanyaan'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id').primary()
      table.text('teks_pertanyaan').notNullable()
      table.enum('tipe_riasec', ['R', 'I', 'A', 'S', 'E', 'C']).notNullable()
      table.integer('nomor_urut').nullable()
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750237568441_create_hasil_tes_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'hasil_tes'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id').primary()
      table
        .integer('siswa_id')
        .unsigned()
        .notNullable()
        .references('id')
        .inTable('siswa')
        .onDelete('CASCADE')

      table.timestamp('tanggal_tes').defaultTo(this.now())
      table.integer('skor_r').notNullable().defaultTo(0)
      table.integer('skor_i').notNullable().defaultTo(0)
      table.integer('skor_a').notNullable().defaultTo(0)
      table.integer('skor_s').notNullable().defaultTo(0)
      table.integer('skor_e').notNullable().defaultTo(0)
      table.integer('skor_c').notNullable().defaultTo(0)

      table.string('kode_holland', 3).nullable()
      table.text('deskripsi_hasil').nullable()

      table.timestamp('created_at')
      table.timestamp('updated_at')
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750237568941_create_jawaban_tes_table.ts
// title: database/migrations/xxxx_create_jawaban_tes_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'jawaban_tes'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id').primary()
      table
        .integer('hasil_tes_id')
        .unsigned()
        .notNullable()
        .references('id')
        .inTable('hasil_tes')
        .onDelete('CASCADE')
      table
        .integer('pertanyaan_id')
        .unsigned()
        .notNullable()
        .references('id')
        .inTable('riasec_pertanyaan')
        .onDelete('CASCADE')

      table.integer('jawaban').notNullable()
      // highlight-end
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750388069955_create_programs_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'programs'

  public async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.bigIncrements('id').primary()
      table
        .string('name', 255)
        .notNullable()
        .unique()
        .comment('Nama program, misalnya: Tahfidz Al-Quran')
      table.text('description').nullable().defaultTo(null).comment('Deskripsi program')
      table
        .float('realistic')
        .notNullable()
        .defaultTo(0)
        .comment('Bobot untuk tipe Realistic (0-1)')
      table
        .float('investigative')
        .notNullable()
        .defaultTo(0)
        .comment('Bobot untuk tipe Investigative (0-1)')
      table.float('artistic').notNullable().defaultTo(0).comment('Bobot untuk tipe Artistic (0-1)')
      table.float('social').notNullable().defaultTo(0).comment('Bobot untuk tipe Social (0-1)')
      table
        .float('enterprising')
        .notNullable()
        .defaultTo(0)
        .comment('Bobot untuk tipe Enterprising (0-1)')
      table
        .float('conventional')
        .notNullable()
        .defaultTo(0)
        .comment('Bobot untuk tipe Conventional (0-1)')

      table.timestamp('created_at', { useTz: true }).notNullable().defaultTo(this.now())
      table.timestamp('updated_at', { useTz: true }).notNullable().defaultTo(this.now())
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750389796560_create_user_program_ratings_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'user_program_ratings'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id')
      table
        .integer('siswa_id')
        .unsigned()
        .notNullable()
        .references('id')
        .inTable('siswa')
        .onDelete('CASCADE')

      table
        .bigInteger('program_id')
        .unsigned()
        .notNullable()
        .references('id')
        .inTable('programs')
        .onDelete('CASCADE')
      table.integer('rating').notNullable().defaultTo(0)

      table.timestamp('created_at')
      table.timestamp('updated_at')
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750411457716_create_rekomendasis_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'rekomendasi'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id')
      table.enum('tipe', ['single', 'double', 'triple']).notNullable()
      table.string('kategori').notNullable()
      table.text('karakteristik_utama').nullable()
      table.json('rekomendasi_jurusan_karier').notNullable()

      table.timestamp('created_at')
      table.timestamp('updated_at')
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/migrations/1750425662712_create_minat_bakats_table.ts
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'minat_bakat'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id')
      table.string('name', 255).notNullable()
      table.text('description').notNullable()

      // Kolom untuk menyimpan tipe RIASEC (R, I, A, S, E, C)
      table.string('riasec_type', 1).notNullable().index()

      table.timestamp('created_at', { useTz: true })
      table.timestamp('updated_at', { useTz: true })
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}

// title: database/.seeders/aauser_seeder.ts
// database/seeders/user_seeder.ts
import User from '#models/user'
import { BaseSeeder } from '@adonisjs/lucid/seeders'

export default class extends BaseSeeder {
  async run() {
    await User.createMany([
      {
        fullName: 'Admin User',
        email: 'admin@example.com',
        password: '12qwaszx',
        role: 'admin',
      },
      {
        fullName: 'Regular User',
        email: 'user@example.com',
        password: '12qwaszx',
        role: 'siswa',
      },
      {
        fullName: 'lele',
        email: 'lele@lele.com',
        password: '12qwaszx',
        role: 'siswa',
      },
      {
        fullName: 'sapi',
        email: 'sapi@sapi.com',
        password: '12qwaszx',
        role: 'siswa',
      },
    ])
  }
}

// title: database/seeders/aauser_seeder.ts
// title: database/seeders/user_seeder.ts
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import User from '#models/user'
import { faker } from '@faker-js/faker'

export default class extends BaseSeeder {
  async run() {
    // Membuat admin
    await User.create({
      fullName: 'Admin Utama',
      email: 'admin@example.com',
      password: '12qwaszx',
      role: 'admin',
    })
    await User.create({
      fullName: 'User Siswa',
      email: 'user@example.com',
      password: '12qwaszx',
      role: 'siswa',
    })

    // Membuat 100 user dengan role siswa
    const students = Array.from({ length: 100 }, () => ({
      fullName: faker.person.fullName(),
      email: faker.internet.email(),
      password: '12qwaszx',
      role: 'siswa' as 'siswa',
    }))

    await User.createMany(students)
  }
}

// title: database/.seeders/admin_seeder.ts
import { BaseSeeder } from '@adonisjs/lucid/seeders'

export default class extends BaseSeeder {
  async run() {
    // Write your database queries inside the run method
  }
}

// title: database/seeders/admin_seeder.ts
// title: database/seeders/admin_seeder.ts
import Admin from '#models/admin'
import User from '#models/user'
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import { faker } from '@faker-js/faker'

export default class AdminSeeder extends BaseSeeder {
  logger: any
  public async run() {
    const adminUsers = await User.query().where('role', 'admin')

    if (adminUsers.length === 0) {
      this.logger?.info('❌ Gagal seeding: tidak ada user dengan role "admin".')
      return
    }

    const adminData = adminUsers.map((user) => ({
      userId: user.id,
      namaLengkap: user.fullName ?? faker.person.fullName(),
      jabatan: faker.helpers.arrayElement(['Kepala Sekolah', 'Wakil', 'Tata Usaha']),
    }))

    try {
      await Admin.createMany(adminData)
      this.logger?.info(`✅ Berhasil seeding ${adminData.length} data admin.`)
    } catch (error) {
      this.logger?.error('❌ Gagal insert ke tabel admin:')
      console.error(error)
    }
  }
}

// title: database/.seeders/database_seeder.ts
import { BaseSeeder } from '@adonisjs/lucid/seeders'

export default class extends BaseSeeder {
  async run() {
    // Write your database queries inside the run method
  }
}

// title: database/seeders/minat_bakat_seeder.ts
import Interest from '#models/minat_bakat' // Menggunakan model 'Interest' sesuai contoh awal Anda
import { BaseSeeder } from '@adonisjs/lucid/seeders'

export default class extends BaseSeeder {
  async run() {
    // Deskripsi untuk setiap tipe RIASEC
    const descriptions = {
      R: 'Seseorang dengan kepribadian ini menyukai pekerjaan yang melibatkan tindakan daripada berpikir, lebih menyukai hasil nyata atau yang dapat dilihat langsung. Orang dengan tipe kepribadian ini umumnya memiliki rasa ingin tahu yang tinggi tentang sains, benda-benda nyata, dan mekanika.',
      I: 'Mereka yang termasuk dalam kepribadian Investigative menyukai penggunaan kemampuan abstrak atau analisis untuk menemukan dari masalah yang ada di sekitarnya. Mereka dapat dianggap sebagai "pemikir" yang selalu berusaha menyelesaikan tugas dan sering bekerja secara mandiri. Menurut tes RIASEC Holland, kelompok ini cenderung analitis, suka menggali lebih dalam, dan mencari kebenaran atau fakta dari sebuah informasi.',
      A: 'Orang yang masuk dalam kepribadian Artistic pasti menyukai kreativitas dan kaya akan imajinasi, tetapi memiliki kepribadian yang sangat impulsif dan suka bekerja mengandalkan perasaan. Kamu mungkin lebih mudah dipengaruhi oleh emosi, lebih didominasi oleh perasaan daripada logika, dan tidak suka bekerja dalam batasan yang ketat. Sering kali, orang-orang yang termasuk dalam kategori ini telah memiliki potensi atau bakat khusus yang menonjol dalam bidang seni.',
      S: 'Menurut tes RIASEC Holland, mereka yang berkepribadian Social cenderung suka membantu orang lain, berinteraksi, dan berbicara. Mereka peduli pada masalah sosial dan memiliki kemampuan untuk mengekspresikan pendapat dengan baik serta ahli dalam membujuk orang lain. Pada dasarnya, mereka adalah pribadi yang ekstrovert, ramah, dan terbuka. Oleh karena itu bekerja di bidang amal, kegiatan sosial, dan mengajar sangat cocok untuk mereka.',
      E: 'Orang yang punya kepribadian Enterprising cenderung berani berpikir dan bertindak, condong pada peran kepemimpinan. Mereka bersedia menghadapi tantangan dan menghadapi banyak kesulitan, serta memiliki semangat berjuang. Minat mereka umumnya berfokus pada bisnis, kepemimpinan, manajemen, negosiasi, atau membujuk orang lain. Oleh karena itu, mereka cocok untuk posisi manajemen di dunia bisnis karena berjiwa sosial.',
      C: 'Menurut tes RIASEC Holland, Conventional adalah tipe orang yang hati-hati, teliti, berprinsip, dan selalu mengikuti aturan. Mereka bekerja dengan angka, laporan data. Mereka cocok dengan pekerjaan kantor, pejabat pemerintah, pekerjaan yang membutuhkan kehati-hatian, detail, serta keteraturan.',
    }

    await Interest.createMany([
      // --- Realistic (R) ---
      { name: 'Insinyur', description: descriptions.R, riasecType: 'R' },
      { name: 'Teknisi Pemeliharaan', description: descriptions.R, riasecType: 'R' },
      { name: 'Peneliti Kimia', description: descriptions.R, riasecType: 'R' },
      { name: 'Dokter Gigi', description: descriptions.R, riasecType: 'R' },
      { name: 'Arsitek', description: descriptions.R, riasecType: 'R' },
      { name: 'Teknisi', description: descriptions.R, riasecType: 'R' },
      { name: 'Geolog', description: descriptions.R, riasecType: 'R' },
      {
        name: 'Teknisi Tambang, Minyak, dan Material',
        description: descriptions.R,
        riasecType: 'R',
      },
      { name: 'Manajer Produksi', description: descriptions.R, riasecType: 'R' },

      // --- Investigative (I) ---
      { name: 'Peneliti ilmiah', description: descriptions.I, riasecType: 'I' },
      { name: 'Developer', description: descriptions.I, riasecType: 'I' },
      {
        name: 'Konsultan Lingkungan (Perencana Restorasi Lingkungan)',
        description: descriptions.I,
        riasecType: 'I',
      },
      { name: 'Dokter Hewan', description: descriptions.I, riasecType: 'I' },
      { name: 'Antropolog', description: descriptions.I, riasecType: 'I' },
      { name: 'Psikolog', description: descriptions.I, riasecType: 'I' },
      { name: 'Konsultan Hukum', description: descriptions.I, riasecType: 'I' },
      { name: 'Dokter Umum & Dokter Gigi', description: descriptions.I, riasecType: 'I' },
      { name: 'Perawat', description: descriptions.I, riasecType: 'I' },
      { name: 'Ahli gizi', description: descriptions.I, riasecType: 'I' },
      { name: 'Apoteker', description: descriptions.I, riasecType: 'I' },
      { name: 'Teknisi Laboratorium', description: descriptions.I, riasecType: 'I' },

      // --- Artistic (A) ---
      { name: 'Penulis', description: descriptions.A, riasecType: 'A' },
      { name: 'Aktor, Penyanyi, dan Penari', description: descriptions.A, riasecType: 'A' },
      { name: 'Fotografer', description: descriptions.A, riasecType: 'A' },
      { name: 'Perancang Busana', description: descriptions.A, riasecType: 'A' },
      { name: 'Komentator dan MC/Pembawa Acara', description: descriptions.A, riasecType: 'A' },
      { name: 'Social Media Specialist', description: descriptions.A, riasecType: 'A' },
      { name: 'Event Organizer', description: descriptions.A, riasecType: 'A' },
      { name: 'Public Relations', description: descriptions.A, riasecType: 'A' },
      { name: 'Desainer Grafis', description: descriptions.A, riasecType: 'A' },
      { name: 'Arsitek', description: descriptions.A, riasecType: 'A' },
      { name: 'Guru Sejarah/Bahasa Inggris', description: descriptions.A, riasecType: 'A' },

      // --- Social (S) ---
      { name: 'Human Resource Development', description: descriptions.S, riasecType: 'S' },
      {
        name: 'Pekerja Sosial, Sukarelawan, Kesehatan Masyarakat',
        description: descriptions.S,
        riasecType: 'S',
      },
      { name: 'Dosen', description: descriptions.S, riasecType: 'S' },
      { name: 'Tour Guide', description: descriptions.S, riasecType: 'S' },
      { name: 'Guru BK', description: descriptions.S, riasecType: 'S' },
      { name: 'Spesialis Nilai Properti', description: descriptions.S, riasecType: 'S' },
      { name: 'Polisi', description: descriptions.S, riasecType: 'S' },
      { name: 'Perawat, Ahli Gizi', description: descriptions.S, riasecType: 'S' },

      // --- Enterprising (E) ---
      { name: 'Business Development', description: descriptions.E, riasecType: 'E' },
      { name: 'Perencana Wilayah dan Tata Kota', description: descriptions.E, riasecType: 'E' },
      { name: 'Customer Service', description: descriptions.E, riasecType: 'E' },
      { name: 'Trader Saham', description: descriptions.E, riasecType: 'E' },
      { name: 'Akuntan', description: descriptions.E, riasecType: 'E' },
      { name: 'Pengacara', description: descriptions.E, riasecType: 'E' },
      { name: 'Pramugari', description: descriptions.E, riasecType: 'E' },
      { name: 'Sales', description: descriptions.E, riasecType: 'E' },
      { name: 'Polisi', description: descriptions.E, riasecType: 'E' },

      // --- Conventional (C) ---
      { name: 'Pengacara', description: descriptions.C, riasecType: 'C' },
      { name: 'Peneliti', description: descriptions.C, riasecType: 'C' },
      { name: 'Guru', description: descriptions.C, riasecType: 'C' },
      { name: 'Akuntan', description: descriptions.C, riasecType: 'C' },
      { name: 'Staf Keuangan', description: descriptions.C, riasecType: 'C' },
      { name: 'Aparatur Sipil Negara (ASN)', description: descriptions.C, riasecType: 'C' },
      { name: 'Teller', description: descriptions.C, riasecType: 'C' },
    ])
  }
}

// title: database/seeders/note_seeder.ts
// title: database/seeders/note_seeder.ts
import Note from '#models/note'
import User from '#models/user'
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import { faker } from '@faker-js/faker'

export default class extends BaseSeeder {
  async run() {
    const users = await User.all()

    for (const user of users) {
      await Note.createMany([
        {
          userId: user.id,
          title: faker.lorem.sentence(),
          content: faker.lorem.paragraphs(2),
        },
        {
          userId: user.id,
          title: faker.lorem.sentence(),
          content: faker.lorem.paragraphs(3),
        },
      ])
    }
  }
}

// title: database/seeders/program_seeder.ts
import Program from '#models/program'
import { BaseSeeder } from '@adonisjs/lucid/seeders'

export default class extends BaseSeeder {
  async run() {
    await Program.createMany([
      {
        name: 'Kelas Perbaikan Sepeda',
        description:
          'Belajar memperbaiki sepeda dan menggunakan alat bengkel sederhana, cocok untuk calon mekanik.',
        realistic: 0.9,
        investigative: 0.3,
        artistic: 0.05,
        social: 0.1,
        enterprising: 0.15,
        conventional: 0.3,
      },
      {
        name: 'Workshop Kerajinan Kayu',
        description:
          'Membuat kerajinan sederhana seperti rak atau kotak dari kayu, mengasah keterampilan tukang.',
        realistic: 0.85,
        investigative: 0.2,
        artistic: 0.2,
        social: 0.1,
        enterprising: 0.15,
        conventional: 0.25,
      },
      {
        name: 'Eksperimen Sains Sederhana',
        description:
          'Melakukan eksperimen seperti membuat roket air atau larutan kimia aman untuk calon peneliti.',
        realistic: 0.3,
        investigative: 0.9,
        artistic: 0.1,
        social: 0.2,
        enterprising: 0.1,
        conventional: 0.4,
      },
      {
        name: 'Klub Pengamatan Alam',
        description:
          'Mengamati tumbuhan dan serangga di sekitar pondok, cocok untuk pecinta biologi.',
        realistic: 0.35,
        investigative: 0.85,
        artistic: 0.15,
        social: 0.25,
        enterprising: 0.1,
        conventional: 0.35,
      },
      {
        name: 'Lukis Mural Komunitas',
        description:
          'Menggambar mural di dinding pondok untuk mengembangkan kreativitas dan kerja tim.',
        realistic: 0.2,
        investigative: 0.1,
        artistic: 0.9,
        social: 0.4,
        enterprising: 0.3,
        conventional: 0.15,
      },
      {
        name: 'Kelas Menggambar Sketsa',
        description: 'Belajar teknik menggambar sketsa dan poster, ideal untuk calon desainer.',
        realistic: 0.15,
        investigative: 0.1,
        artistic: 0.95,
        social: 0.3,
        enterprising: 0.25,
        conventional: 0.1,
      },
      {
        name: 'Kerajinan Daur Ulang',
        description:
          'Membuat kerajinan dari bahan bekas seperti botol atau kain untuk calon seniman.',
        realistic: 0.25,
        investigative: 0.15,
        artistic: 0.9,
        social: 0.35,
        enterprising: 0.2,
        conventional: 0.2,
      },
      {
        name: 'Kelas Musik Ukulele',
        description: 'Belajar memainkan ukulele dan lagu sederhana, cocok untuk pecinta musik.',
        realistic: 0.1,
        investigative: 0.05,
        artistic: 0.9,
        social: 0.4,
        enterprising: 0.25,
        conventional: 0.15,
      },
      {
        name: 'Kegiatan Amal Lingkungan',
        description: 'Membersihkan lingkungan sekitar pondok, mengasah kepedulian sosial.',
        realistic: 0.15,
        investigative: 0.2,
        artistic: 0.1,
        social: 0.9,
        enterprising: 0.3,
        conventional: 0.25,
      },
      {
        name: 'Kelas Mengajar Teman',
        description:
          'Melatih keterampilan mengajar dengan berbagi pengetahuan kepada teman sebaya.',
        realistic: 0.05,
        investigative: 0.25,
        artistic: 0.2,
        social: 0.95,
        enterprising: 0.4,
        conventional: 0.2,
      },
      {
        name: 'Diskusi Kelompok',
        description:
          'Memimpin diskusi tentang topik kehidupan sehari-hari, cocok untuk calon konselor.',
        realistic: 0.05,
        investigative: 0.3,
        artistic: 0.15,
        social: 0.9,
        enterprising: 0.35,
        conventional: 0.2,
      },
      {
        name: 'Doa dan Refleksi Bersama',
        description:
          'Mengorganisir doa kelompok dan refleksi, meng EMBED keterampilan kepemimpinan sosial.',
        realistic: 0.05,
        investigative: 0.1,
        artistic: 0.2,
        social: 0.95,
        enterprising: 0.4,
        conventional: 0.25,
      },
      {
        name: 'Simulasi Usaha Kecil',
        description:
          'Merancang usaha kecil seperti jualan makanan ringan, cocok untuk calon pengusaha.',
        realistic: 0.15,
        investigative: 0.25,
        artistic: 0.2,
        social: 0.4,
        enterprising: 0.9,
        conventional: 0.5,
      },
      {
        name: 'Kelas Public Speaking',
        description: 'Berlatih berbicara di depan umum untuk membangun kepercayaan diri.',
        realistic: 0.05,
        investigative: 0.2,
        artistic: 0.3,
        social: 0.5,
        enterprising: 0.95,
        conventional: 0.3,
      },
      {
        name: 'Pengelolaan Acara Pondok',
        description:
          'Mengatur acara seperti lomba atau perayaan, melatih kepemimpinan dan organisasi.',
        realistic: 0.1,
        investigative: 0.25,
        artistic: 0.25,
        social: 0.5,
        enterprising: 0.9,
        conventional: 0.4,
      },
      {
        name: 'Kelas Pemasaran Sederhana',
        description:
          'Belajar membuat iklan sederhana untuk produk lokal, cocok untuk calon marketer.',
        realistic: 0.1,
        investigative: 0.3,
        artistic: 0.35,
        social: 0.4,
        enterprising: 0.9,
        conventional: 0.35,
      },
      {
        name: 'Pengelolaan Jadwal',
        description: 'Menyusun jadwal kegiatan pondok, melatih keterampilan administrasi.',
        realistic: 0.05,
        investigative: 0.3,
        artistic: 0.05,
        social: 0.1,
        enterprising: 0.2,
        conventional: 0.95,
      },
      {
        name: 'Pencatatan Inventaris',
        description: 'Mengelola daftar peralatan pondok, cocok untuk calon bendahara.',
        realistic: 0.1,
        investigative: 0.35,
        artistic: 0.05,
        social: 0.15,
        enterprising: 0.2,
        conventional: 0.9,
      },
      {
        name: 'Kelas Penganggaran',
        description:
          'Belajar membuat anggaran sederhana untuk kegiatan, ideal untuk calon akuntan.',
        realistic: 0.05,
        investigative: 0.4,
        artistic: 0.05,
        social: 0.1,
        enterprising: 0.25,
        conventional: 0.95,
      },
      {
        name: 'Pengelolaan Data Sederhana',
        description: 'Menggunakan spreadsheet untuk mengatur data, cocok untuk calon analis data.',
        realistic: 0.1,
        investigative: 0.45,
        artistic: 0.05,
        social: 0.15,
        enterprising: 0.2,
        conventional: 0.9,
      },
    ])
  }
}

// title: database/seeders/rekomendasi_seeder.ts
import Rekomendasi from '#models/rekomendasi'
import { BaseSeeder } from '@adonisjs/lucid/seeders'

export default class extends BaseSeeder {
  async run() {
    const data = [
      // 1. ANALISIS SATU KATEGORI
      {
        tipe: 'single' as const,
        kategori: 'Realistic (R)',
        karakteristik_utama:
          'Senang bekerja dengan tangan, menyukai aktivitas fisik dan teknis, menikmati penggunaan alat dan mesin, serta menyukai tantangan praktis.',
        rekomendasi_jurusan_karier: [
          'Teknik Mesin, Teknik Elektro, Teknik Sipil',
          'Pertanian, Peternakan',
          'Kesehatan (Paramedis, Fisioterapi)',
          'Perbengkelan, Otomotif',
          'Teknisi, Konstruksi, Mekanik',
          'Pekerjaan yang melibatkan aktivitas lapangan',
        ],
      },
      {
        tipe: 'single' as const,
        kategori: 'Investigative (I)',
        karakteristik_utama:
          'Menyukai pemecahan masalah, berpikir analitis, senang melakukan penelitian dan eksplorasi ilmu pengetahuan.',
        rekomendasi_jurusan_karier: [
          'Matematika, Fisika, Kimia',
          'Biologi, Farmasi',
          'Teknologi Informatika, Data Science',
          'Astronomi, Geologi',
          'Hukum Islam, Ushuluddin',
          'Riset dan Pengembangan',
          'Dosen, Ilmuwan, Peneliti',
        ],
      },
      {
        tipe: 'single' as const,
        kategori: 'Artistic (A)',
        karakteristik_utama:
          'Kreatif, menyukai seni, musik, menulis, menggambar, dan mengekspresikan ide melalui karya seni.',
        rekomendasi_jurusan_karier: [
          'Seni Islam, Kaligrafi',
          'Sastra, Jurnalisme',
          'Desain Grafis, Multimedia',
          'Perfilman, Penyiaran',
          'Seniman, Penulis, Editor',
          'Guru Seni, Pendidik Kreatif',
        ],
      },
      {
        tipe: 'single' as const,
        kategori: 'Social (S)',
        karakteristik_utama:
          'Menyukai interaksi sosial, membantu orang lain, memberikan bimbingan, dan bekerja dalam tim.',
        rekomendasi_jurusan_karier: [
          'Pendidikan, Guru',
          'Bimbingan Konseling',
          'Psikologi',
          'Keperawatan, Kesehatan Masyarakat',
          'Dakwah, Komunikasi Islam',
          'Pekerjaan Sosial, LSM',
        ],
      },
      {
        tipe: 'single' as const,
        kategori: 'Enterprising (E)',
        karakteristik_utama:
          'Percaya diri, menyukai kepemimpinan, senang bernegosiasi, mengambil keputusan, dan mengelola bisnis.',
        rekomendasi_jurusan_karier: [
          'Manajemen, Kewirausahaan',
          'Administrasi Publik',
          'Hukum, Ilmu Politik',
          'Ekonomi Islam, Perbankan Syariah',
          'Jurnalisme, Presenter',
          'Motivator, Trainer',
        ],
      },
      {
        tipe: 'single' as const,
        kategori: 'Conventional (C)',
        karakteristik_utama:
          'Menyukai keteraturan, pekerjaan administratif, menyusun laporan, dan mengikuti prosedur sistematis.',
        rekomendasi_jurusan_karier: [
          'Akuntansi, Perpajakan',
          'Administrasi Perkantoran',
          'Manajemen Keuangan',
          'Kearsipan, Tata Usaha',
          'Sekretaris, Pegawai Negeri',
          'Auditor, Perencana Anggaran',
        ],
      },

      // 2. KOMBINASI DUA KATEGORI
      {
        tipe: 'double' as const,
        kategori: 'R & I (Realistic + Investigative)',
        karakteristik_utama:
          'Suka memecahkan masalah dengan cara praktis dan logis.
Tertarik pada eksperimen dan teknologi.
Senang bekerja dengan alat dan mesin, tetapi juga suka analisis.',
        rekomendasi_jurusan_karier: [
          'Teknik Informatika, Teknik Mesin, Teknik Elektro',
          'Kedokteran, Farmasi, Bioteknologi',
          'Astronomi, Geologi, Ilmu Lingkungan',
          'Teknisi, Ilmuwan, Data Analyst',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'R & A (Realistic + Artistic)',
        karakteristik_utama:
          'Kreatif dalam hal desain tetapi juga menyukai pekerjaan praktis.
Suka menggabungkan seni dengan keterampilan teknis.
Menyukai bidang seni terapan seperti desain produk dan arsitektur.',
        rekomendasi_jurusan_karier: [
          'Desain Produk, Arsitektur, Interior Design',
          'Teknik Sipil, Teknik Industri, Desain Otomotif',
          'Multimedia, Animasi, Perfilman',
          'Seniman, Art Director, Pengrajin, Desainer Fashion',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'R & S (Realistic + Social)',
        karakteristik_utama:
          'Menyukai pekerjaan teknis tetapi juga ingin membantu orang lain.
Suka mengajarkan keterampilan praktis kepada orang lain.
Bisa menjadi mentor dalam bidang teknik atau kesehatan.',
        rekomendasi_jurusan_karier: [
          'Keperawatan, Kesehatan Masyarakat, Paramedis',
          'Pendidikan Teknik, Guru Kejuruan',
          'Instruktur Bengkel, Pelatih Olahraga, Teknisi Medis',
          'Pekerjaan Sosial yang Berbasis Keterampilan',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'R & E (Realistic + Enterprising)',
        karakteristik_utama:
          'Praktis tetapi juga suka memimpin atau berwirausaha.
Menyukai bisnis yang berbasis teknologi atau industri.
Berjiwa wirausaha dan suka mengelola proyek teknis.',
        rekomendasi_jurusan_karier: [
          'Kewirausahaan, Manajemen Bisnis Teknik',
          'Teknik Mesin, Teknik Sipil, Teknologi Pangan',
          'Logistik, Properti, Konstruksi',
          'Manajer Proyek, Pemilik Usaha Bengkel/Konstruksi',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'R & C (Realistic + Conventional)',
        karakteristik_utama:
          'Praktis dan terstruktur, suka aturan dan sistem yang jelas.
Menyukai pekerjaan teknis dengan prosedur yang terorganisir.
Cenderung menyukai bidang administrasi teknis.',
        rekomendasi_jurusan_karier: [
          'Akuntansi, Administrasi Perkantoran Teknik',
          'Manajemen Industri, Logistik, Supply Chain',
          'Teknik Sipil, Teknik Elektro (Bagian Perencanaan)',
          'Pegawai Pemerintah di Bidang Infrastruktur',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'I & A (Investigative + Artistic)',
        karakteristik_utama:
          'Suka berpikir analitis dan kreatif dalam waktu bersamaan.
Menikmati menulis, desain, atau penelitian ilmiah.
Inovatif dalam menghasilkan ide baru berbasis riset.',
        rekomendasi_jurusan_karier: [
          'Jurnalistik, Sastra, Penelitian Sosial',
          'Desain Komunikasi Visual, UX/UI Designer',
          'Arsitektur, Desain Produk',
          'Penulis Buku, Ilmuwan Data Kreatif',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'I & S (Investigative + Social)',
        karakteristik_utama:
          'Suka menyelidiki dan memecahkan masalah sosial.
Menyukai bidang penelitian yang berhubungan dengan manusia.
Ingin berkontribusi dalam dunia pendidikan atau psikologi.',
        rekomendasi_jurusan_karier: [
          'Psikologi, Bimbingan Konseling, Pendidikan',
          'Sosiologi, Antropologi, Hukum',
          'Dakwah Islam, Komunikasi Islam',
          'Konsultan Pendidikan, Peneliti Sosial',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'I & E (Investigative + Enterprising)',
        karakteristik_utama:
          'Memiliki pemikiran kritis tetapi juga percaya diri dalam berbicara.
Suka mengambil keputusan berdasarkan analisis dan strategi.
Senang meneliti tetapi juga ingin menjadi pemimpin.',
        rekomendasi_jurusan_karier: [
          'Manajemen Strategis, Ekonomi Islam',
          'Politik, Hukum, Konsultan Bisnis',
          'Teknologi Finansial, Data Science',
          'Peneliti Bisnis, Analis Keuangan, CEO Start-up',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'I & C (Investigative + Conventional)',
        karakteristik_utama:
          'Suka bekerja dengan data dan sistem yang terstruktur.
Menyukai pekerjaan berbasis logika dan angka.
Disiplin dan teliti dalam melakukan analisis.',
        rekomendasi_jurusan_karier: [
          'Akuntansi, Keuangan, Statistik',
          'Teknik Informatika, Database Management',
          'Administrasi Bisnis, Manajemen Risiko',
          'Pekerjaan di Lembaga Riset Pemerintah',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'A & S (Artistic + Social)',
        karakteristik_utama:
          'Kreatif dan ekspresif, tetapi juga suka membantu orang lain.
Senang berinteraksi dan membimbing dalam bidang seni atau komunikasi.
Suka mengajar, berbicara di depan umum, atau menyampaikan inspirasi.',
        rekomendasi_jurusan_karier: [
          'Pendidikan Seni, Drama, Musik Islami',
          'Komunikasi, Dakwah, Penyiaran Islam',
          'Psikologi, Motivator, Jurnalis',
          'Guru Seni, Pembicara, Public Relations',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'A & E (Artistic + Enterprising)',
        karakteristik_utama:
          'Kreatif dan inovatif dalam bisnis atau kepemimpinan.
Suka menciptakan tren baru atau mengembangkan produk kreatif.
Menyukai industri kreatif seperti perfilman, desain, atau mode.',
        rekomendasi_jurusan_karier: [
          'Kewirausahaan Kreatif, Fashion Design',
          'Film, Periklanan, Marketing Digital',
          'Event Organizer, Manajemen Seni',
          'Content Creator, YouTuber, Influencer',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'A & C (Artistic + Conventional)',
        karakteristik_utama:
          'Kreatif tetapi tetap menyukai keteraturan dan sistem.
Menyukai desain yang berbasis struktur seperti arsitektur atau tata ruang.
Senang dengan pekerjaan yang berhubungan dengan data seni.',
        rekomendasi_jurusan_karier: [
          'Desain Interior, Arsitektur',
          'Perpustakaan, Manajemen Arsip Digital',
          'Teknik Sipil, Tata Kota',
          'Editor, Manajemen Galeri Seni',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'S & E (Social + Enterprising)',
        karakteristik_utama:
          'Suka berinteraksi dan membangun hubungan, serta percaya diri dalam kepemimpinan.
Senang mengelola tim atau organisasi.
Memiliki keterampilan komunikasi yang kuat dan mampu memotivasi orang lain.',
        rekomendasi_jurusan_karier: [
          'Manajemen SDM, Public Relations',
          'Hukum, Politik, Organisasi Sosial',
          'Kepemimpinan Pendidikan, Motivator',
          'Manajer, Direktur, Pengusaha Sosial',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'S & C (Social + Conventional)',
        karakteristik_utama:
          'Menyukai pekerjaan sosial yang memiliki struktur dan aturan.
Senang melakukan tugas administrasi dalam organisasi pendidikan atau sosial.
Teliti dan bertanggung jawab dalam mengelola program sosial.',
        rekomendasi_jurusan_karier: [
          'Administrasi Pendidikan, Manajemen Sekolah',
          'Sekretaris Organisasi, Pegawai Lembaga Sosial',
          'Manajemen Non-Profit, Tata Kelola Masjid/Pesantren',
          'Akuntansi Sosial, Pengelola Koperasi Pesantren',
        ],
      },
      {
        tipe: 'double' as const,
        kategori: 'E & C (Enterprising + Conventional)',
        karakteristik_utama:
          'Pemimpin yang suka bekerja dengan sistem terorganisir.
Senang mengatur bisnis dengan aturan yang jelas.
Kuat dalam mengelola sumber daya dan membuat keputusan strategis.',
        rekomendasi_jurusan_karier: [
          'Manajemen Keuangan, Administrasi Publik',
          'Perbankan, Akuntansi, Auditor',
          'Politik, Hukum Tata Negara',
          'Manajemen Usaha, CEO, Konsultan Keuangan',
        ],
      },

      // 3. KOMBINASI TIGA KATEGORI
      {
        tipe: 'triple' as const,
        kategori: 'R - I - A (Realistic + Investigative + Artistic)',
        karakteristik_utama:
          'Suka mengutak-atik teknologi, tetapi juga kreatif dan suka berpikir analitis.
Bisa bekerja dengan alat, data, dan konsep desain sekaligus.',
        rekomendasi_jurusan_karier: [
          'Teknik Arsitektur, Teknik Informatika (UI/UX Design)',
          'Desain Produk Teknologi, Multimedia, Desain Game',
          'Robotika, Rekayasa Perangkat Lunak, Bioengineering',
          'Peneliti Desain, Data Science Kreatif',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'R - I - S (Realistic + Investigative + Social)',
        karakteristik_utama:
          'Suka menyelesaikan masalah secara teknis dan ilmiah, tetapi juga ingin membantu orang lain.
Bisa menjadi pendidik di bidang sains atau teknologi.',
        rekomendasi_jurusan_karier: [
          'Pendidikan Teknik, Guru Sains/Teknologi',
          'Keperawatan, Teknik Medis, Kesehatan Masyarakat',
          'Instruktur Teknologi, Pelatihan Vokasi',
          'Peneliti Pendidikan STEM, Dosen Teknik',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'R - I - E (Realistic + Investigative + Enterprising)',
        karakteristik_utama:
          'Berjiwa wirausaha tetapi berbasis teknologi dan analisis data.
Inovatif dalam menciptakan solusi bisnis berbasis teknologi.',
        rekomendasi_jurusan_karier: [
          'Manajemen Teknologi, Teknologi Finansial',
          'Startup Teknologi, Konsultan Data Science',
          'Industri Otomotif, Kewirausahaan Teknik',
          'Pengembang AI, CEO Startup Teknologi',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'R - I - C (Realistic + Investigative + Conventional)',
        karakteristik_utama:
          'Teliti, analitis, dan terstruktur dalam bekerja dengan data atau sistem.
Cocok dalam bidang sains terapan yang membutuhkan keteraturan.',
        rekomendasi_jurusan_karier: [
          'Teknik Sipil, Teknik Industri, Teknik Elektro',
          'Aktuaris, Statistik, Manajemen Risiko',
          'Analis Data, Ilmuwan, Pegawai Birokrasi Teknologi',
          'Keuangan dan Audit Teknologi',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'R - A - S (Realistic + Artistic + Social)',
        karakteristik_utama:
          'Kreatif dalam pekerjaan teknis, tetapi juga ingin berbagi keterampilan dengan orang lain.
Menikmati seni yang memiliki dampak sosial.',
        rekomendasi_jurusan_karier: [
          'Desain Interior, Arsitektur Sosial, Tata Kota',
          'Seni Pendidikan, Guru Seni Islam, Kaligrafi',
          'Multimedia Islami, Sutradara Film Religi, Dakwah Visual',
          'Seniman, Pelatih Seni Islam, Event Organizer',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'R - A - E (Realistic + Artistic + Enterprising)',
        karakteristik_utama:
          'Suka menciptakan produk inovatif yang juga bisa dikembangkan sebagai bisnis.
Memiliki jiwa kreatif tetapi juga suka memimpin dan berbisnis.',
        rekomendasi_jurusan_karier: [
          'Desain Fashion, Manajemen Event Kreatif',
          'Pengusaha Seni, Desain Produk dan Merek',
          'Startup Kreatif, Film dan Periklanan',
          'Konsultan Branding, Desainer UI/UX, Influencer',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'R - A - C (Realistic + Artistic + Conventional)',
        karakteristik_utama:
          'Kreatif tetapi juga menyukai sistem yang terstruktur dalam seni dan desain.
Menikmati pekerjaan kreatif dengan standar teknis tinggi.',
        rekomendasi_jurusan_karier: [
          'Desain Industri, Tata Kota, Teknik Arsitektur',
          'Arsiparis Seni, Kurator Museum',
          'Produksi Film dengan Standar Teknis Tinggi',
          'Ilustrator Profesional, Manajemen Galeri Seni',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'R - S - E (Realistic + Social + Enterprising)',
        karakteristik_utama:
          'Memiliki keterampilan teknis tetapi juga suka berinteraksi dengan orang banyak dan memimpin.
Cocok menjadi mentor, trainer, atau entrepreneur dalam bidang teknis.',
        rekomendasi_jurusan_karier: [
          'Pelatihan Kewirausahaan, Trainer Vokasi',
          'Manajemen Teknik, Keperawatan Bisnis',
          'Teknisi Medis, Paramedis Sosial',
          'Instruktur Olahraga, Konsultan Lapangan',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'I - A - S (Investigative + Artistic + Social)',
        karakteristik_utama:
          'Kombinasi antara sains, kreativitas, dan kepedulian sosial.
Bisa menjadi komunikator sains atau pendidik dalam bidang seni dan ilmu.',
        rekomendasi_jurusan_karier: [
          'Jurnalisme Ilmiah, Penulis Buku Sains',
          'Guru Sains Kreatif, Ilmuwan Sosial, Peneliti Sosial',
          'Komunikasi Visual, Psikologi, Motivator',
          'Penulis Konten Edukasi, Konsultan Pendidikan',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'I - A - E (Investigative + Artistic + Enterprising)',
        karakteristik_utama:
          'Pemikir kritis yang juga memiliki visi bisnis dalam industri kreatif atau teknologi.
Cocok dalam bidang startup inovatif berbasis desain dan analisis data.',
        rekomendasi_jurusan_karier: [
          'Kewirausahaan Teknologi Kreatif, Digital Marketing',
          'Bisnis Fashion, Desain Produk Digital',
          'Politik dan Komunikasi, Jurnalis Digital',
          'Content Creator Berbasis Data, CEO Startup Kreatif',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'I - S - E (Investigative + Social + Enterprising)',
        karakteristik_utama:
          'Senang meneliti, menganalisis, dan memiliki kemampuan komunikasi yang kuat.
Bisa menjadi konsultan atau pemimpin dalam bidang sosial berbasis sains.',
        rekomendasi_jurusan_karier: [
          'Psikologi, Konsultan SDM, Manajemen Pendidikan',
          'Hukum, Politik, Jurnalis Investigatif',
          'Ekonomi Islam, Pengembangan Sosial',
          'Dakwah Digital, Motivator',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'A - S - E (Artistic + Social + Enterprising)',
        karakteristik_utama:
          'Kreatif dalam komunikasi dan memiliki jiwa kepemimpinan sosial.
Suka menginspirasi orang lain melalui karya seni atau komunikasi.',
        rekomendasi_jurusan_karier: [
          'Public Speaking, Penyiar, Dakwah Islam',
          'Manajemen Event, Penyutradaraan Film Islami',
          'Guru Seni dan Budaya Islam, Motivator',
          'Marketing Digital, Influencer Islami',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'A - S - C (Artistic + Social + Conventional)',
        karakteristik_utama:
          'Suka seni tetapi juga ingin berbagi pengetahuan dalam sistem yang terstruktur.
Cocok menjadi guru seni atau manajer kreatif dalam organisasi sosial.',
        rekomendasi_jurusan_karier: [
          'Manajemen Seni, Arsiparis Seni, Kurator',
          'Pendidikan Seni, Bimbingan Konseling',
          'Jurnalis Media Islam, Pengelola Lembaga Budaya',
          'Pustakawan, Editor Buku Islam',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'S - C - E (Social + Conventional + Enterprising)',
        karakteristik_utama:
          'Cenderung memiliki keterampilan interpersonal yang baik.
Menyukai pekerjaan yang terstruktur dan sistematis.
Memiliki jiwa kepemimpinan dan kewirausahaan (E).',
        rekomendasi_jurusan_karier: [
          'Manajemen Pendidikan',
          'Administrasi Pendidikan',
          'Manajemen Bisnis & Kewirausahaan',
          'Sumber Daya Manusia (HRD)',
          'Manajemen Keuangan & Perbankan',
          'Bimbingan & Konseling',
          'Psikologi Organisasi & Industri',
          'Pekerjaan Sosial dan Layanan Masyarakat',
          'Administrasi Publik & Pemerintahan',
          'Manajemen Rumah Sakit & Layanan Kesehatan',
        ],
      },
      {
        tipe: 'triple' as const,
        kategori: 'S - C - I (Social + Conventional + Investigative)',
        karakteristik_utama:
          'Memiliki kemampuan analitis yang baik.
Senang membantu orang lain.
Serta menyukai pekerjaan yang terstruktur dan administratif.',
        rekomendasi_jurusan_karier: [
          'Psikologi Klinis & Konseling',
          'Bimbingan & Konseling',
          'Administrasi Pendidikan',
          'Sosiologi & Antropologi',
          'Ilmu Hukum & Kriminologi',
          'Manajemen Arsip & Perpustakaan',
          'Kesehatan Masyarakat',
          'Ilmu Perpustakaan & Informasi',
          'Statistik Sosial & Data Science',
          'Riset dan Pengembangan Sosial',
        ],
      },
    ]

    // Memasukkan data ke database
    await Rekomendasi.createMany(data)
  }
}

// title: database/.seeders/riasec_pertanyaan_seeder.ts
// title: database/seeders/riasec_pertanyaan_seeder.ts
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import RiasecPertanyaan from '#models/riasec_pertanyaan'

export default class extends BaseSeeder {
  async run() {
    await RiasecPertanyaan.createMany([
      // Realistic
      {
        teksPertanyaan: 'Saya suka bekerja dengan peralatan mesin.',
        tipeRiasec: 'R',
        nomorUrut: 1,
      },
      {
        teksPertanyaan: 'Saya bisa memperbaiki barang-barang elektronik.',
        tipeRiasec: 'R',
        nomorUrut: 2,
      },
      { teksPertanyaan: 'Saya terampil menggunakan perkakas.', tipeRiasec: 'R', nomorUrut: 3 },

      // Investigative
      { teksPertanyaan: 'Saya suka melakukan penelitian.', tipeRiasec: 'I', nomorUrut: 4 },
      {
        teksPertanyaan: 'Saya senang memecahkan masalah matematika atau sains.',
        tipeRiasec: 'I',
        nomorUrut: 5,
      },
      { teksPertanyaan: 'Saya menikmati membaca artikel ilmiah.', tipeRiasec: 'I', nomorUrut: 6 },

      // Artistic
      { teksPertanyaan: 'Saya orang yang kreatif.', tipeRiasec: 'A', nomorUrut: 7 },
      {
        teksPertanyaan: 'Saya suka memainkan alat musik, melukis, atau menulis.',
        tipeRiasec: 'A',
        nomorUrut: 8,
      },
      {
        teksPertanyaan: 'Saya senang pergi ke pertunjukan seni atau teater.',
        tipeRiasec: 'A',
        nomorUrut: 9,
      },

      // Social
      { teksPertanyaan: 'Saya suka menolong orang lain.', tipeRiasec: 'S', nomorUrut: 10 },
      {
        teksPertanyaan: 'Saya pandai mengajar atau melatih orang.',
        tipeRiasec: 'S',
        nomorUrut: 11,
      },
      { teksPertanyaan: 'Saya menikmati bekerja dalam tim.', tipeRiasec: 'S', nomorUrut: 12 },

      // Enterprising
      { teksPertanyaan: 'Saya suka memimpin sebuah proyek.', tipeRiasec: 'E', nomorUrut: 13 },
      { teksPertanyaan: 'Saya pandai meyakinkan orang lain.', tipeRiasec: 'E', nomorUrut: 14 },
      {
        teksPertanyaan: 'Saya bercita-cita untuk memulai bisnis sendiri.',
        tipeRiasec: 'E',
        nomorUrut: 15,
      },

      // Conventional
      {
        teksPertanyaan: 'Saya suka bekerja dengan data dan angka.',
        tipeRiasec: 'C',
        nomorUrut: 16,
      },
      { teksPertanyaan: 'Saya orang yang terorganisir dan rapi.', tipeRiasec: 'C', nomorUrut: 17 },
      {
        teksPertanyaan: 'Saya suka mengikuti aturan dan prosedur yang jelas.',
        tipeRiasec: 'C',
        nomorUrut: 18,
      },
    ])
  }
}

// title: database/seeders/riasec_pertanyaan_seeder.ts
// title: database/seeders/riasec_pertanyaan_seeder.ts
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import RiasecPertanyaan from '#models/riasec_pertanyaan'

export default class extends BaseSeeder {
  async run() {
    await RiasecPertanyaan.createMany([
      // Realistic (R)
      { teksPertanyaan: 'Saya Suka Memperbaiki alat-alat listrik', tipeRiasec: 'R', nomorUrut: 1 },
      { teksPertanyaan: 'Saya Suka Memperbaiki motor', tipeRiasec: 'R', nomorUrut: 2 },
      { teksPertanyaan: 'Saya Suka Memperbaiki Alat Mekanik', tipeRiasec: 'R', nomorUrut: 3 },
      { teksPertanyaan: 'Saya mampu membuat gambar dengan skala', tipeRiasec: 'R', nomorUrut: 4 },
      {
        teksPertanyaan:
          'Saya mampu menggunakan peralatan mesin (misal: bor listrik atau mesin jahit)',
        tipeRiasec: 'R',
        nomorUrut: 5,
      },
      {
        teksPertanyaan: 'Saya suka menggunakan perkakas bengkel dan mesin',
        tipeRiasec: 'R',
        nomorUrut: 6,
      },
      {
        teksPertanyaan: 'Saya mampu melakukan perbaikan kecil pada pipa air, keran, dll',
        tipeRiasec: 'R',
        nomorUrut: 7,
      },
      {
        teksPertanyaan: 'Saya mampu melakukan perbaikan kecil pada alat listrik',
        tipeRiasec: 'R',
        nomorUrut: 8,
      },
      {
        teksPertanyaan: 'Saya Tertarik menjadi mekanik pesawat terbang',
        tipeRiasec: 'R',
        nomorUrut: 9,
      },
      {
        teksPertanyaan: 'Saya Tertarik menjadi Penanggung jawab keamanan',
        tipeRiasec: 'R',
        nomorUrut: 10,
      },
      {
        teksPertanyaan: 'Saya tertarik menjadi mekanik/ montir mobil',
        tipeRiasec: 'R',
        nomorUrut: 11,
      },
      { teksPertanyaan: 'Saya tertarik menjadi pengrajin kayu', tipeRiasec: 'R', nomorUrut: 12 },
      {
        teksPertanyaan: 'Saya tertarik menjadi spesialis perikanan/ margasatwa',
        tipeRiasec: 'R',
        nomorUrut: 13,
      },
      {
        teksPertanyaan: 'Saya tertarik menjadi operator alat-alat berat',
        tipeRiasec: 'R',
        nomorUrut: 14,
      },
      {
        teksPertanyaan: 'Saya tertarik menjadi pengawas konstruksi bangunan',
        tipeRiasec: 'R',
        nomorUrut: 15,
      },
      { teksPertanyaan: 'Saya tertarik menjadi pengemudi bis', tipeRiasec: 'R', nomorUrut: 16 },
      { teksPertanyaan: 'Saya tertarik menjadi insinyur otomotif', tipeRiasec: 'R', nomorUrut: 17 },
      { teksPertanyaan: 'Saya tertarik menjadi ahli mesin', tipeRiasec: 'R', nomorUrut: 18 },

      // Investigative (I)
      {
        teksPertanyaan: 'Saya Suka Membaca buku ilmiah atau majalah ilmiah',
        tipeRiasec: 'I',
        nomorUrut: 19,
      },
      { teksPertanyaan: 'Saya bekerja di laboratorium', tipeRiasec: 'I', nomorUrut: 20 },
      {
        teksPertanyaan: 'Saya suka mengerjakan suatu proyek ilmiah',
        tipeRiasec: 'I',
        nomorUrut: 21,
      },
      { teksPertanyaan: 'Saya suka mempelajari teori ilmiah', tipeRiasec: 'I', nomorUrut: 22 },
      {
        teksPertanyaan: 'Saya suka membaca mengenai topik-topik khusus atau keinginan sendiri',
        tipeRiasec: 'I',
        nomorUrut: 23,
      },
      {
        teksPertanyaan: 'Saya suka menerapkan matematika dalam masalah praktis',
        tipeRiasec: 'I',
        nomorUrut: 24,
      },
      {
        teksPertanyaan: 'Saya mampu melakukan percobaan atau penelitian ilmiah',
        tipeRiasec: 'I',
        nomorUrut: 25,
      },
      {
        teksPertanyaan: 'Saya mampu memprogram komputer untuk mempelajari masalah ilmiah',
        tipeRiasec: 'I',
        nomorUrut: 26,
      },
      {
        teksPertanyaan: 'Saya mampu menginterpretasikan rumus kimia sederhana',
        tipeRiasec: 'I',
        nomorUrut: 27,
      },
      {
        teksPertanyaan: 'Saya mampu mengerti mengapa satelit buatan manusia tidak jauh dari bumi',
        tipeRiasec: 'I',
        nomorUrut: 28,
      },
      {
        teksPertanyaan: 'Saya mampu menyebutkan tiga macam makanan yang memiliki protein tinggi',
        tipeRiasec: 'I',
        nomorUrut: 29,
      },
      {
        teksPertanyaan: 'Saya tertarik menjadi ahli biologi/ hayati',
        tipeRiasec: 'I',
        nomorUrut: 30,
      },
      {
        teksPertanyaan: 'Saya tertarik menjadi ahli astronomi/ bintang',
        tipeRiasec: 'I',
        nomorUrut: 31,
      },
      {
        teksPertanyaan: 'Saya tertarik menjadi teknisi laboratorium medis',
        tipeRiasec: 'I',
        nomorUrut: 32,
      },
      { teksPertanyaan: 'Saya tertarik menjadi ilmuan peneliti', tipeRiasec: 'I', nomorUrut: 33 },
      { teksPertanyaan: 'Saya tertarik menjadi ahli kimia', tipeRiasec: 'I', nomorUrut: 34 },
      { teksPertanyaan: 'Saya tertarik menjadi ahli geologi', tipeRiasec: 'I', nomorUrut: 35 },
      {
        teksPertanyaan: 'Saya tertarik menjadi pekerja riset ilmiah',
        tipeRiasec: 'I',
        nomorUrut: 36,
      },

      // Artistic (A)
      {
        teksPertanyaan: 'Saya suka membuat sketsa, menggambar, atau melukis',
        tipeRiasec: 'A',
        nomorUrut: 37,
      },
      {
        teksPertanyaan: 'Saya suka menjadi pemain dalam kelompok musik, orkesta, atau teater',
        tipeRiasec: 'A',
        nomorUrut: 38,
      },
      {
        teksPertanyaan: 'Saya suka merancang perabotan, pakaian, atau poster',
        tipeRiasec: 'A',
        nomorUrut: 39,
      },
      {
        teksPertanyaan: 'Saya suka bermain dalam sebuah band, kelompok orchrestra',
        tipeRiasec: 'A',
        nomorUrut: 40,
      },
      { teksPertanyaan: 'Saya suka memainkan alat musik', tipeRiasec: 'A', nomorUrut: 41 },
      {
        teksPertanyaan: 'Saya suka menulis untuk suatu majalah atau koran',
        tipeRiasec: 'A',
        nomorUrut: 42,
      },
      {
        teksPertanyaan: 'Saya suka membuat lukisan atau memfoto pemandangan/ orang',
        tipeRiasec: 'A',
        nomorUrut: 43,
      },
      { teksPertanyaan: 'Saya suka menulis novel atau cerita', tipeRiasec: 'A', nomorUrut: 44 },
      { teksPertanyaan: 'Saya suka membaca dan menulis puisi', tipeRiasec: 'A', nomorUrut: 45 },
      { teksPertanyaan: 'Saya mampu memainkan alat musik', tipeRiasec: 'A', nomorUrut: 46 },
      { teksPertanyaan: 'Saya mampu bermain drama', tipeRiasec: 'A', nomorUrut: 47 },
      {
        teksPertanyaan: 'Saya mampu menginterpretasikan cerita atau bahan bacaan',
        tipeRiasec: 'A',
        nomorUrut: 48,
      },
      {
        teksPertanyaan: 'saya mampu membuat sketsa orang sehingga dapat dikenali',
        tipeRiasec: 'A',
        nomorUrut: 49,
      },
      { teksPertanyaan: 'Saya mampu melukis atau membuat patung', tipeRiasec: 'A', nomorUrut: 50 },
      { teksPertanyaan: 'Saya tertarik menjadi pemain musik', tipeRiasec: 'A', nomorUrut: 51 },
      { teksPertanyaan: 'Saya tertarik menjadi penulis novel', tipeRiasec: 'A', nomorUrut: 52 },
      { teksPertanyaan: 'Saya tertarik menjadi aktor/ aktris', tipeRiasec: 'A', nomorUrut: 53 },
      { teksPertanyaan: 'Saya tertarik menjadi wartawan', tipeRiasec: 'A', nomorUrut: 54 },

      // Social (S)
      {
        teksPertanyaan: 'Saya Suka bertemu dengan pengamat sosial atau pendidikan',
        tipeRiasec: 'S',
        nomorUrut: 55,
      },
      {
        teksPertanyaan: 'Saya suka bekerja untuk palang merah sebagai relawan',
        tipeRiasec: 'S',
        nomorUrut: 56,
      },
      {
        teksPertanyaan: 'Saya Suka membantu orang lain dengan masalah pribadinya',
        tipeRiasec: 'S',
        nomorUrut: 57,
      },
      {
        teksPertanyaan: 'saya suka menjaga/ mengurusdan mengawas anak-anak',
        tipeRiasec: 'S',
        nomorUrut: 58,
      },
      { teksPertanyaan: 'Saya suka mempelajari kenakalan remaja', tipeRiasec: 'S', nomorUrut: 59 },
      { teksPertanyaan: 'Saya mudah berbicara dengan semua orang', tipeRiasec: 'S', nomorUrut: 60 },
      { teksPertanyaan: 'Saya mampu memimpin diskusi kelompok', tipeRiasec: 'S', nomorUrut: 61 },
      {
        teksPertanyaan: 'Saya mampu pandai dalam menjelaskan sesuatu kepada orang lain',
        tipeRiasec: 'S',
        nomorUrut: 62,
      },
      {
        teksPertanyaan: 'Saya mampu dalam pencarian dana atau amal',
        tipeRiasec: 'S',
        nomorUrut: 63,
      },
      {
        teksPertanyaan: 'Saya suka mengajar anak-anak dengan mudah',
        tipeRiasec: 'S',
        nomorUrut: 64,
      },
      {
        teksPertanyaan: 'Saya mampu mengajar orang dewasa/ remaja dengan mudah',
        tipeRiasec: 'S',
        nomorUrut: 65,
      },
      {
        teksPertanyaan:
          'Saya mampu/ pandai dalam menolong orang lain yang sedang bingung atau bermasalah',
        tipeRiasec: 'S',
        nomorUrut: 66,
      },
      {
        teksPertanyaan: 'Saya mampu dalam menghibur dan menemani orang yang lebih tua dari saya',
        tipeRiasec: 'S',
        nomorUrut: 67,
      },
      {
        teksPertanyaan: 'Saya mampu mendengarkan dengan baik cerita permasalahan orang lain',
        tipeRiasec: 'S',
        nomorUrut: 68,
      },
      { teksPertanyaan: 'Saya tertarik menjadi kepala sekolah', tipeRiasec: 'S', nomorUrut: 69 },
      {
        teksPertanyaan: 'Saya tertarik menjadi konselor masalah Pribadi',
        tipeRiasec: 'S',
        nomorUrut: 70,
      },
      { teksPertanyaan: 'Saya tertarik menjadi pekerja sosial', tipeRiasec: 'S', nomorUrut: 71 },
      {
        teksPertanyaan: 'Saya tertarik menjadi konselor kejuruan dan pekerjaan',
        tipeRiasec: 'S',
        nomorUrut: 72,
      },

      // Enterprising (E)
      { teksPertanyaan: 'Saya suka mempengaruhi orang lain', tipeRiasec: 'E', nomorUrut: 73 },
      { teksPertanyaan: 'Saya suka menjual suatu produk', tipeRiasec: 'E', nomorUrut: 74 },
      {
        teksPertanyaan: 'Saya suka mempelajari strategi untuk keberhasilan bisnis',
        tipeRiasec: 'E',
        nomorUrut: 75,
      },
      {
        teksPertanyaan: 'Saya suka menjadi pemimpin dalam kelompok',
        tipeRiasec: 'E',
        nomorUrut: 76,
      },
      {
        teksPertanyaan: 'Saya suka memimpin kelompok dalam meraih tujuan tertentu',
        tipeRiasec: 'E',
        nomorUrut: 77,
      },
      {
        teksPertanyaan: 'Saya mampu/ memenangkan penghargaan sebagai tenaga penjual atau pemimpin',
        tipeRiasec: 'E',
        nomorUrut: 78,
      },
      {
        teksPertanyaan: 'Saya tahu bagaimana menjadi pemimpin yang berhasil/ sukses',
        tipeRiasec: 'E',
        nomorUrut: 79,
      },
      {
        teksPertanyaan: 'Saya mampu berbicara di depan umum dengan baik',
        tipeRiasec: 'E',
        nomorUrut: 80,
      },
      { teksPertanyaan: 'Saya dapat mengelola usaha kecil', tipeRiasec: 'E', nomorUrut: 81 },
      {
        teksPertanyaan: 'Saya dapat membuat kelompok sosial atau kerja berjalan dengan baik',
        tipeRiasec: 'E',
        nomorUrut: 82,
      },
      {
        teksPertanyaan: 'Saya bisa berbicara dengan orang yang keras kepala',
        tipeRiasec: 'E',
        nomorUrut: 83,
      },
      { teksPertanyaan: 'Saya dapat mengelola kampanye penjualan', tipeRiasec: 'E', nomorUrut: 84 },
      {
        teksPertanyaan: 'Saya dapat mengatur pekerjaan orang lain',
        tipeRiasec: 'E',
        nomorUrut: 85,
      },
      {
        teksPertanyaan: 'Saya cenderung berambisi dan berbicara apa adanya',
        tipeRiasec: 'E',
        nomorUrut: 86,
      },
      {
        teksPertanyaan:
          'Saya mampu dan pandai mempengaruhi orang untuk melakukan sesuatu menurut cara saya',
        tipeRiasec: 'E',
        nomorUrut: 87,
      },
      { teksPertanyaan: 'Saya seorang tenaga penjual yang baik', tipeRiasec: 'E', nomorUrut: 88 },
      {
        teksPertanyaan: 'Saya tertarik menjadi eksekutif periklanan',
        tipeRiasec: 'E',
        nomorUrut: 89,
      },
      { teksPertanyaan: 'Saya tertarik menjadi pembawa acara/mc', tipeRiasec: 'E', nomorUrut: 90 },

      // Conventional (C)
      {
        teksPertanyaan: 'Saya suka melakukan pekerjaan surat menyurat atau perkantoran',
        tipeRiasec: 'C',
        nomorUrut: 91,
      },
      {
        teksPertanyaan: 'Saya suka melakukan operasi matematika dalam bisnis dan pembukuan',
        tipeRiasec: 'C',
        nomorUrut: 92,
      },
      {
        teksPertanyaan: 'Saya suka membuat catatan pengeluaran secara terperinci',
        tipeRiasec: 'C',
        nomorUrut: 93,
      },
      { teksPertanyaan: 'Saya suka menyusun sistem pengrsipan', tipeRiasec: 'C', nomorUrut: 94 },
      {
        teksPertanyaan: 'Saya suka membuat daftar inventaris dari persediaan atau produk',
        tipeRiasec: 'C',
        nomorUrut: 95,
      },
      {
        teksPertanyaan: 'Saya mampu mengetik sepuluh jari dengan cepat',
        tipeRiasec: 'C',
        nomorUrut: 96,
      },
      {
        teksPertanyaan: 'Saya mampu menjalankan mesin distributor/ mesin penjumlahan',
        tipeRiasec: 'C',
        nomorUrut: 97,
      },
      {
        teksPertanyaan: 'Saya mampu mengarsipkan surat dan berkas-berkas lain',
        tipeRiasec: 'C',
        nomorUrut: 98,
      },
      {
        teksPertanyaan: 'Saya mampu melaksanakan pekerjaan administrasi kantor',
        tipeRiasec: 'C',
        nomorUrut: 99,
      },
      {
        teksPertanyaan: 'Saya mampu menggunakan program pembukuan',
        tipeRiasec: 'C',
        nomorUrut: 100,
      },
      {
        teksPertanyaan: 'Saya mampu melaksanakan tugas administrasi dalam waktu singkat',
        tipeRiasec: 'C',
        nomorUrut: 101,
      },
      {
        teksPertanyaan: 'Saya mampu menempatkan kredit dan debet',
        tipeRiasec: 'C',
        nomorUrut: 102,
      },
      {
        teksPertanyaan: 'Saya mampu mencatat dengan cermat pembayaran/ penjualan',
        tipeRiasec: 'C',
        nomorUrut: 103,
      },
      {
        teksPertanyaan: 'Saya tertarik menjadi manajer penjualan',
        tipeRiasec: 'C',
        nomorUrut: 104,
      },
      { teksPertanyaan: 'Saya tertarik menjadi ahli pembukuan', tipeRiasec: 'C', nomorUrut: 105 },
      { teksPertanyaan: 'Saya tertarik menjadi kasir di bank', tipeRiasec: 'C', nomorUrut: 106 },
      { teksPertanyaan: 'Saya tertarik menjadi analis keuangan', tipeRiasec: 'C', nomorUrut: 107 },
      { teksPertanyaan: 'Saya tertarik menjadi penaksir biaya', tipeRiasec: 'C', nomorUrut: 108 },
    ])
  }
}

// title: database/.seeders/siswa_seeder.ts
import { BaseSeeder } from '@adonisjs/lucid/seeders'

export default class extends BaseSeeder {
  async run() {
    // Write your database queries inside the run method
  }
}

// title: database/seeders/siswa_seeder.ts
// title: database/seeders/siswa_seeder.ts
import Siswa from '#models/siswa'
import User from '#models/user'
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import { faker } from '@faker-js/faker'
import { DateTime } from 'luxon'

export default class SiswaSeeder extends BaseSeeder {
  logger: any
  public async run() {
    const siswaUsers = await User.query().where('role', 'siswa')

    if (siswaUsers.length === 0) {
      this.logger?.info('❌ Gagal seeding: tidak ada user dengan role "siswa".')
      return
    }

    const usedNisn = new Set<string>()
    const siswaData = siswaUsers.map((user) => {
      let nisn: string
      do {
        nisn = faker.string.numeric(10)
      } while (usedNisn.has(nisn))
      usedNisn.add(nisn)

      return {
        userId: user.id,
        namaLengkap: user.fullName ?? faker.person.fullName(),
        nisn, // jamin unik
        kelas: `XII ${faker.helpers.arrayElement(['IPA 1', 'IPS 2', 'Bahasa'])}`,
        tanggalLahir: DateTime.fromJSDate(faker.date.birthdate({ min: 15, max: 18, mode: 'age' })),
      }
    })

    try {
      await Siswa.createMany(siswaData)
      this.logger?.info(`✅ Berhasil seeding ${siswaData.length} data siswa.`)
    } catch (error) {
      this.logger?.error('❌ Gagal insert ke tabel siswa:')
      console.error(error)
    }
  }
}

// title: database/.seeders/z hasil_seeder.ts
// title: database/seeders/z hasil_tes_seeder.ts (REVISI)
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import HasilTes from '#models/hasil'
import Siswa from '#models/siswa'

export default class extends BaseSeeder {
  public async run() {
    const allSiswa = await Siswa.all()
    if (allSiswa.length === 0) {
      console.log('Tidak ada siswa untuk di-seed hasil tesnya.')
      return
    }

    // Definisikan Persona/Tipe Minat
    const personas = [
      { name: 'Si Praktis', dominant: ['R', 'C'], secondary: ['I', 'E'] }, // Tipe Realistic-Conventional
      { name: 'Si Peneliti', dominant: ['I', 'C'], secondary: ['R', 'A'] }, // Tipe Investigative-Conventional
      { name: 'Si Kreatif', dominant: ['A', 'S'], secondary: ['E', 'I'] }, // Tipe Artistic-Social
      { name: 'Si Sosialita', dominant: ['S', 'E'], secondary: ['A', 'C'] }, // Tipe Social-Enterprising
      { name: 'Si Pebisnis', dominant: ['E', 'C'], secondary: ['S', 'R'] }, // Tipe Enterprising-Conventional
      { name: 'Si Campuran Unik', dominant: ['I', 'A', 'S'], secondary: ['R', 'E', 'C'] }, // Tipe I-A-S
    ]

    const hasilTesData: Partial<HasilTes>[] = []

    for (const [i, siswa] of allSiswa.entries()) {
      // Pilih persona secara bergiliran untuk memastikan variasi
      const persona = personas[i % personas.length]

      const scores: { [key: string]: number } = { R: 0, I: 0, A: 0, S: 0, E: 0, C: 0 }

      // Beri skor TINGGI untuk tipe dominan
      persona.dominant.forEach((type) => {
        scores[type] = Math.floor(Math.random() * 8) + 8 // Skor antara 8-15
      })

      // Beri skor SEDANG untuk tipe sekunder
      persona.secondary.forEach((type) => {
        if (scores[type] === 0) {
          // Hanya isi jika belum diisi oleh dominan
          scores[type] = Math.floor(Math.random() * 5) + 3 // Skor antara 3-7
        }
      })

      // Beri skor RENDAH untuk sisanya
      Object.keys(scores).forEach((type) => {
        if (scores[type] === 0) {
          scores[type] = Math.floor(Math.random() * 3) + 1 // Skor antara 1-3
        }
      })

      // Buat Kode Holland dari 3 skor tertinggi
      const sortedScores = (Object.entries(scores) as [keyof typeof scores, number][]).sort(
        ([, a], [, b]) => b - a
      )
      const hollandCode = sortedScores
        .slice(0, 3)
        .map(([key]) => key)
        .join('')

      hasilTesData.push({
        siswaId: siswa.id,
        skorR: scores.R,
        skorI: scores.I,
        skorA: scores.A,
        skorS: scores.S,
        skorE: scores.E,
        skorC: scores.C,
        kodeHolland: hollandCode,
      })
    }

    // Hapus hasil tes lama untuk menghindari duplikat jika seeder dijalankan lagi
    await HasilTes.truncate()
    await HasilTes.createMany(hasilTesData)
    console.log(`Berhasil membuat ${hasilTesData.length} data hasil tes dengan persona.`)
  }
}

// title: database/seeders/z rating_seeder.ts
import { BaseSeeder } from '@adonisjs/lucid/seeders'
import Siswa from '#models/siswa'
import Program from '#models/program'
import ProgramRating from '#models/program_rating'
import { DateTime } from 'luxon'

export default class extends BaseSeeder {
  // public async run() {
  //   // 1. Ambil semua data siswa dan program yang ada.
  //   // Pastiin kamu udah punya seeder buat Siswa dan Program ya!
  //   const allSiswa = await Siswa.all()
  //   const allPrograms = await Program.all()
  //   if (allSiswa.length === 0 || allPrograms.length === 0) {
  //     return
  //   }
  //   const ratingsToCreate: Partial<ProgramRating>[] = []
  //   // Define the allowed keys for RIASEC profiles
  //   type RIASECKey =
  //     | 'realistic'
  //     | 'investigative'
  //     | 'artistic'
  //     | 'social'
  //     | 'enterprising'
  //     | 'conventional'
  //   // 2. Kita iterasikan setiap siswa buat ngasih rating ke setiap program.
  //   for (const siswa of allSiswa) {
  //     // 3. Buat simulasi profil minat RIASEC buat siswa.
  //     // Di dunia nyata, ini hasil dari asesmen. Di sini kita random aja biar variatif.
  //     const siswaInterestProfile: Record<RIASECKey, number> = {
  //       realistic: Math.random() * 10,
  //       investigative: Math.random() * 10,
  //       artistic: Math.random() * 10,
  //       social: Math.random() * 10,
  //       enterprising: Math.random() * 10,
  //       conventional: Math.random() * 10,
  //     }
  //     for (const program of allPrograms) {
  //       // 4. Hitung "kecocokan" pake Cosine Similarity.
  //       // Ini cara keren buat tau seberapa "mirip" minat siswa dengan karakteristik program.
  //       const programVector: Record<RIASECKey, number> = {
  //         realistic: program.realistic,
  //         investigative: program.investigative,
  //         artistic: program.artistic,
  //         social: program.social,
  //         enterprising: program.enterprising,
  //         conventional: program.conventional,
  //       }
  //       const dotProduct = (Object.keys(siswaInterestProfile) as RIASECKey[]).reduce(
  //         (acc, key) => acc + siswaInterestProfile[key] * programVector[key],
  //         0
  //       )
  //       const magnitudeSiswa = Math.sqrt(
  //         Object.values(siswaInterestProfile).reduce((acc, val) => acc + val * val, 0)
  //       )
  //       const magnitudeProgram = Math.sqrt(
  //         Object.values(programVector).reduce((acc, val) => acc + val * val, 0)
  //       )
  //       let similarity = 0
  //       if (magnitudeSiswa > 0 && magnitudeProgram > 0) {
  //         similarity = dotProduct / (magnitudeSiswa * magnitudeProgram)
  //       }
  //       // 5. Konversi skor similaritas (0-1) jadi rating (1-5).
  //       // Kita tambahin sedikit "noise" biar datanya nggak terlalu sempurna & lebih natural.
  //       let rating = Math.round(similarity * 4) + 1 // Skala 1-5
  //       const noise = Math.random() > 0.8 ? (Math.random() > 0.5 ? 1 : -1) : 0 // 20% kemungkinan ada noise
  //       rating = Math.max(1, Math.min(5, rating + noise)) // Pastiin rating tetap di skala 1-5.
  //       ratingsToCreate.push({
  //         siswaId: siswa.id,
  //         programId: Number(program.id),
  //         rating: rating,
  //         createdAt: DateTime.now(),
  //         updatedAt: DateTime.now(),
  //       })
  //     }
  //   }
  //   // 6. Insert semua rating ke database sekaligus. Lebih efisien!
  //   if (ratingsToCreate.length > 0) {
  //     await ProgramRating.createMany(ratingsToCreate)
  //   }
  // }
}

// title: inertia/app/app.tsx
/// <reference path="../../adonisrc.ts" />
/// <reference path="../../config/inertia.ts" />

import '../css/app.css';
import { hydrateRoot } from 'react-dom/client'
import { createInertiaApp } from '@inertiajs/react';
import { resolvePageComponent } from '@adonisjs/inertia/helpers'

const appName = import.meta.env.VITE_APP_NAME || 'AdonisJS'

createInertiaApp({
  progress: { color: '#5468FF' },

  title: (title) => `${title} - ${appName}`,

  resolve: (name) => {
    return resolvePageComponent(
      `../pages/${name}.tsx`,
      import.meta.glob('../pages/**/*.tsx'),
    )
  },

  setup({ el, App, props }) {
    
    hydrateRoot(el, <App {...props} />)
    
  },
});

// title: inertia/app/ssr.tsx
import ReactDOMServer from 'react-dom/server'
import { createInertiaApp } from '@inertiajs/react'

export default function render(page: any) {
  return createInertiaApp({
    page,
    render: ReactDOMServer.renderToString,
    resolve: (name) => {
      const pages = import.meta.glob('../pages/**/*.tsx', { eager: true })
      return pages[`../pages/${name}.tsx`]
    },
    setup: ({ App, props }) => <App {...props} />,
  })
}

// title: inertia/components/button.tsx
import { ReactNode, MouseEventHandler } from 'react';

type ButtonProps = {
  children: ReactNode;
  onClick?: MouseEventHandler<HTMLButtonElement>;
  className?: string;
};

export default function Button({ children, onClick, className = '' }: ButtonProps) {
  return (
    <button
      onClick={onClick}
      className={`px-6 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-600 rounded-lg hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80 ${className}`}
    >
      {children}
    </button>
  );
}

// title: inertia/pages/admin/dashboard/index.tsx
import { Link } from '@inertiajs/react'
import AdminLayout from '../layouts/main'

export default function AdminDashboard({ user }: { user: { fullName: string } }) {
  return (
    // Layout dashboard yang proper
    <div className="p-8 max-w-7xl mx-auto">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Admin Dashboard</h1>
      <div className="mt-4 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
        <h2 className="text-2xl font-semibold dark:text-white">Welcome, {user.fullName}!</h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          This is the admin control panel. You have super powers here.
        </p>
        <div className="mt-6 flex space-x-4">
          <Link
            href="/admin/users"
            as="button"
            className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
          >
            Manage Users
          </Link>
          <Link
            href="/logout"
            method="post"
            as="button"
            className="px-4 py-2 bg-red-600 text-white font-semibold rounded-lg shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
          >
            Logout
          </Link>
        </div>
      </div>
    </div>
  )
}

AdminDashboard.layout = (page: any) => (
<AdminLayout children={page} />
)

// title: inertia/pages/admin/layouts/main.tsx
// title: inertia/pages/admin/layouts/main.tsx
import { PropsWithChildren, useState, useEffect } from 'react' // 1. Imports
import { usePage } from '@inertiajs/react'
import Sidebar from './sidebar'
import { Head } from '@inertiajs/react'
import { CheckCircle, X, XCircle } from 'lucide-react'

// Definisikan tipe untuk props halaman
interface PageProps {
  children: PropsWithChildren
  flash?: {
    success?: string
    error?: string
  }
  [key: string]: unknown
}

interface AdminLayoutProps extends PropsWithChildren {
  title?: string
}

export default function AdminLayout({ children, title }: AdminLayoutProps) {
  title = title || '' // 1. Set default title if not provided

  const { flash } = usePage<PageProps>().props

  // 2. State & Effect untuk Notifikasi Toast
  const [toast, setToast] = useState({
    show: false,
    message: '',
    type: 'success' as 'success' | 'error',
  })

  useEffect(() => {
    if (flash?.success) {
      setToast({ show: true, message: flash.success, type: 'success' })
    } else if (flash?.error) {
      setToast({ show: true, message: flash.error, type: 'error' })
    }

    if (flash?.success || flash?.error) {
      const timer = setTimeout(() => {
        setToast((current) => ({ ...current, show: false }))
      }, 5000)
      return () => clearTimeout(timer)
    }
  }, [flash])

  return (
    <>
      <Head title="Admin Dashboard" />
      <div className="bg-gray-100 dark:bg-gray-800 min-h-screen">
        <Sidebar />
        <main className="md:ml-64 p-4 sm:p-6 lg:p-8">{children}</main>

        {/* 3. Tambahkan JSX untuk Toast di sini */}
        <div
          className={`fixed bottom-5 right-5 transition-transform duration-300 z-50 ${
            toast.show ? 'translate-x-0' : 'translate-x-[calc(100%+2rem)]'
          }`}
        >
          <div
            className={`flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow-lg dark:text-gray-400 dark:bg-gray-800 ring-1 ${
              toast.type === 'success'
                ? 'ring-green-200 dark:ring-green-700'
                : 'ring-red-200 dark:ring-red-700'
            }`}
            role="alert"
          >
            <div
              className={`inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg ${
                toast.type === 'success'
                  ? 'bg-green-100 text-green-500 dark:bg-green-800 dark:text-green-200'
                  : 'bg-red-100 text-red-500 dark:bg-red-800 dark:text-red-200'
              }`}
            >
              {toast.type === 'success' ? <CheckCircle size={20} /> : <XCircle size={20} />}
            </div>
            <div className="ms-3 text-sm font-normal">{toast.message}</div>
            <button
              type="button"
              className="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
              onClick={() => setToast({ ...toast, show: false })}
              aria-label="Close"
            >
              <span className="sr-only">Close</span>
              <X size={20} />
            </button>
          </div>
        </div>
      </div>
    </>
  )
}

// title: inertia/pages/admin/layouts/sidebar.tsx
// title: inertia/pages/admin/layouts/sidebar.tsx
import { useState } from 'react'
import {
  Menu,
  X,
  LayoutDashboard,
  BookOpen,
  ClipboardList,
  GraduationCap,
  CalendarDays,
  Users,
  Library,
  CheckCircle,
  Wallet,
  LifeBuoy,
  Phone,
  Settings,
  LogOut,
  NotebookText,
  NotebookPen,
} from 'lucide-react'
import { Link, usePage } from '@inertiajs/react' // 1. Impor usePage

// Definisikan tipe untuk props user yang kita harapkan dari Inertia
interface User {
  fullName: string | null
  email: string
}

interface PageProps {
  user: User
  // Anda bisa tambahkan properti lain yang mungkin ada di props
  [key: string]: unknown
}

const Sidebar: React.FC = () => {
  const [isOpen, setIsOpen] = useState<boolean>(false)
  const { user } = usePage<PageProps>().props // 2. Ambil data user dari props

  const toggleSidebar = () => setIsOpen(!isOpen)

  // Class untuk link yang disabled
  const disabledLinkClass = 'pointer-events-none opacity-50 cursor-not-allowed'

  return (
    <>
      {/* Mobile Menu Button */}
      <button
        onClick={toggleSidebar}
        className="md:hidden fixed top-4 left-4 z-50 p-2 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
        aria-label={isOpen ? 'Close menu' : 'Open menu'}
      >
        {isOpen ? <X size={24} /> : <Menu size={24} />}
      </button>

      {/* Sidebar */}
      <aside
        className={`fixed inset-y-0 left-0 w-64 h-screen px-4 py-8 overflow-y-auto bg-white dark:bg-gray-900 border-r dark:border-gray-700 transform ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        } md:translate-x-0 transition-transform duration-300 ease-in-out z-40 flex flex-col`}
      >
        {/* Logo */}
        <a href="/admin/dashboard">
          <img
            className="w-auto h-6 sm:h-7"
            src="https://merakiui.com/images/logo.svg"
            alt="Logo"
          />
        </a>

        {/* Navigation */}
        <div className="flex flex-col justify-between flex-1 mt-6">
          <nav>
            {/* Kategori Utama: Dashboard */}
            <Link
              href="/admin/dashboard" // Ganti 'a' menjadi 'Link' dan href yang benar
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700`}
            >
              <LayoutDashboard className="w-5 h-5" />
              <span className="mx-4 font-medium">Dashboard</span>
            </Link>

            {/* Kategori: Akademik */}
            <p className="text-xs font-semibold text-gray-400 uppercase mt-6 mb-2 px-4">Akademik</p>
            <a
              href="#"
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <CalendarDays className="w-5 h-5" />
              <span className="mx-4 font-medium">Jadwal Kelas</span>
            </a>
            <a
              href="#"
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <BookOpen className="w-5 h-5" />
              <span className="mx-4 font-medium">Materi Belajar</span>
            </a>
            <Link
              href="/admin/users"
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 `}
            >
              <GraduationCap className="w-5 h-5" />
              <span className="mx-4 font-medium">Daftar Users</span>
            </Link>

            {/* Kategori: Test Riasec */}
            <p className="text-xs font-semibold text-gray-400 uppercase mt-6 mb-2 px-4">
              Test Riasec
            </p>
            <Link
              href="/admin/siswa-riasec"
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 `}
            >
              <NotebookText className="w-5 h-5" />
              <span className="mx-4 font-medium">Daftar Siswa Test</span>
            </Link>
            <Link
              href="/admin/pertanyaan"
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 `}
            >
              <NotebookPen className="w-5 h-5" />
              <span className="mx-4 font-medium">Pertanyaan</span>
            </Link>
          </nav>

          {/* Profile Section */}
          <div className="mt-auto">
            <p className="text-xs font-semibold text-gray-400 uppercase mt-6 mb-2 px-4">Akun</p>
            {/* 3. Buat link profil menjadi aktif */}
            <Link
              href="/admin/profile"
              className={`flex items-center px-4 -mx-2 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md`}
            >
              <img
                className="object-cover mx-2 rounded-full h-9 w-9"
                src="https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80"
                alt="avatar"
              />
              {/* 4. Tampilkan nama user yang login, berikan fallback */}
              <span className="mx-2 font-medium text-gray-800 dark:text-gray-200">
                {user?.fullName || 'Admin'}
              </span>
            </Link>

            {/* Settingan (DISABLED) */}
            <a
              href="#"
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 mt-2 ${disabledLinkClass}`}
            >
              <Settings className="w-5 h-5" />
              <span className="mx-4 font-medium">Settingan</span>
            </a>

            {/* 5. Tambahkan `onBefore` untuk konfirmasi logout */}
            <Link
              href="/logout"
              method="post"
              as="button"
              onBefore={() => confirm('Apakah Anda yakin ingin keluar?')}
              className="w-full flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-red-100 dark:hover:bg-red-800 dark:hover:text-red-200 hover:text-red-700 mt-2"
            >
              <LogOut className="w-5 h-5" />
              <span className="mx-4 font-medium">Cabut Dulu</span>
            </Link>
          </div>
        </div>
      </aside>

      {/* Overlay for mobile */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 md:hidden z-30"
          onClick={toggleSidebar}
        ></div>
      )}
    </>
  )
}

export default Sidebar

// title: inertia/pages/admin/pertanyaan/create.tsx
// title: inertia/pages/admin/pertanyaan/create.tsx
import { Link, useForm, Head } from '@inertiajs/react'
import AdminLayout from '../layouts/main'

export default function CreatePertanyaan() {
  const { data, setData, post, processing, errors } = useForm({
    teksPertanyaan: '',
    tipeRiasec: 'R' as 'R' | 'I' | 'A' | 'S' | 'E' | 'C', // Default ke 'R'
  })

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    post('/admin/pertanyaan')
  }

  return (
    <>
      <Head title="Tambah Pertanyaan RIASEC" />
      <div className="p-8 max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            Tambah Pertanyaan Baru
          </h1>
          <Link
            href="/admin/pertanyaan"
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
          >
            ← Kembali ke Daftar
          </Link>
        </div>

        <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md">
          <form onSubmit={submit} className="space-y-6">
            {/* Tipe RIASEC */}
            <div>
              <label
                htmlFor="tipeRiasec"
                className="block  text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Tipe RIASEC <span className="text-red-500">*</span>
              </label>
              <select
                id="tipeRiasec"
                value={data.tipeRiasec}
                onChange={(e) => setData('tipeRiasec', e.target.value as typeof data.tipeRiasec)}
                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                required
              >
                <option value="R">R - Realistic</option>
                <option value="I">I - Investigative</option>
                <option value="A">A - Artistic</option>
                <option value="S">S - Social</option>
                <option value="E">E - Enterprising</option>
                <option value="C">C - Conventional</option>
              </select>
              {errors.tipeRiasec && (
                <div className="text-xs text-red-500 mt-1">{errors.tipeRiasec}</div>
              )}
            </div>

            {/* Teks Pertanyaan */}
            <div>
              <label
                htmlFor="teksPertanyaan"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Teks Pertanyaan <span className="text-red-500">*</span>
              </label>
              <textarea
                id="teksPertanyaan"
                rows={4}
                value={data.teksPertanyaan}
                onChange={(e) => setData('teksPertanyaan', e.target.value)}
                className="mt-1 block px-3 py-2 w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                placeholder="Contoh: Saya suka bekerja dengan peralatan mesin."
                required
              />
              {errors.teksPertanyaan && (
                <div className="text-xs text-red-500 mt-1">{errors.teksPertanyaan}</div>
              )}
            </div>

            <div className="flex justify-end pt-2">
              <button
                type="submit"
                disabled={processing}
                className="inline-flex justify-center px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 transition-colors"
              >
                {processing ? 'Menyimpan...' : 'Simpan Pertanyaan'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </>
  )
}

// Menggunakan layout admin yang sudah ada
CreatePertanyaan.layout = (page: any) => <AdminLayout children={page} />

// title: inertia/pages/admin/pertanyaan/edit.tsx
import AdminLayout from '../layouts/main'

export default function EditPertanyaan() {
  return <></>
}

EditPertanyaan.layout = (page: any) => <AdminLayout children={page} title="Edit Siswa" />

// title: inertia/pages/admin/pertanyaan/index.tsx
import { Link } from '@inertiajs/react'
import { Pencil, Trash2, ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react'
import AdminLayout from '../layouts/main'
import { useMemo, useState, useEffect } from 'react'
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  createColumnHelper,
  flexRender,
  SortingState,
  ColumnDef,
  ColumnFiltersState, // BARU: Impor tipe untuk filter kolom
} from '@tanstack/react-table'

// --- Data Interface (tidak berubah) ---
interface Pertanyaan {
  id: number
  teksPertanyaan: string
  tipeRiasec: 'R' | 'I' | 'A' | 'S' | 'E' | 'C'
  nomorUrut: number | null
}

// --- Debounced Input for Search (tidak berubah) ---
function DebouncedInput({
  value: initialValue,
  onChange,
  debounce = 500,
  ...props
}: {
  value: string | number
  onChange: (value: string | number) => void
  debounce?: number
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'>) {
  const [value, setValue] = useState(initialValue)
  useEffect(() => setValue(initialValue), [initialValue])
  useEffect(() => {
    const timeout = setTimeout(() => onChange(value), debounce)
    return () => clearTimeout(timeout)
  }, [value])
  return <input {...props} value={value} onChange={(e) => setValue(e.target.value)} />
}

// --- Komponen Utama ---
export default function PertanyaanIndex({ pertanyaan }: { pertanyaan: Pertanyaan[] }) {
  const data = useMemo(() => pertanyaan, [pertanyaan])

  // --- State untuk tabel ---
  const [sorting, setSorting] = useState<SortingState>([])
  const [globalFilter, setGlobalFilter] = useState('')
  // BARU: State untuk menyimpan filter per kolom
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])

  const riasecColors: Record<string, string> = {
    R: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
    I: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
    A: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
    S: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
    E: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',
    C: 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200',
  }

  const columnHelper = createColumnHelper<Pertanyaan>()

  const columns = useMemo<ColumnDef<Pertanyaan, any>[]>(
    () => [
      // ... Definisi kolom lainnya tidak berubah ...
      columnHelper.accessor((row, index) => index + 1, {
        id: 'no',
        header: '#',
        size: 50,
        enableSorting: false,
      }),
      columnHelper.accessor('tipeRiasec', {
        header: 'Tipe',
        size: 100,
        cell: (info) => (
          <div className="text-center">
            <span
              className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${riasecColors[info.getValue()]}`}
            >
              {info.getValue()}
            </span>
          </div>
        ),
      }),
      columnHelper.accessor('teksPertanyaan', {
        header: 'Teks Pertanyaan',
        cell: (info) => <div className="whitespace-normal">{info.getValue()}</div>,
      }),
      columnHelper.display({
        id: 'actions',
        header: 'Aksi',
        size: 120,
        cell: ({ row }) => {
          const item = row.original
          return (
            <div className="flex items-center justify-end space-x-1">
              <Link
                href={`/admin/pertanyaan/${item.id}/edit`}
                title="Edit Pertanyaan"
                className="p-2 text-gray-500 rounded-full transition-colors hover:text-indigo-600 hover:bg-indigo-100 dark:hover:bg-gray-700"
              >
                <Pencil size={18} />
              </Link>
              <Link
                href={`/admin/pertanyaan/${item.id}`}
                method="delete"
                as="button"
                title="Hapus Pertanyaan"
                className="p-2 text-gray-500 rounded-full transition-colors hover:text-red-600 hover:bg-red-100 dark:hover:bg-gray-700"
                onBefore={() => confirm('Apakah Anda yakin ingin menghapus pertanyaan ini?')}
              >
                <Trash2 size={18} />
              </Link>
            </div>
          )
        },
      }),
    ],
    []
  )

  const table = useReactTable({
    data,
    columns,
    // DIUBAH: Tambahkan state filter kolom
    state: { sorting, globalFilter, columnFilters },
    onSortingChange: setSorting,
    onGlobalFilterChange: setGlobalFilter,
    // BARU: Tambahkan handler untuk perubahan filter kolom
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(), // Ini yang akan memproses filter
    getPaginationRowModel: getPaginationRowModel(),
    initialState: { pagination: { pageSize: 10 } },
  })

  return (
    <div className="p-8 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
          Manajemen Pertanyaan RIASEC
        </h1>
        <Link
          href="/admin/pertanyaan/create"
          className="inline-block px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors"
        >
          Tambah Pertanyaan
        </Link>
      </div>

      {/* DIUBAH: Kelompokkan kontrol filter */}
      <div className="flex items-center gap-4 mb-4">
        {/* Global Search */}
        <DebouncedInput
          value={globalFilter ?? ''}
          onChange={(value) => setGlobalFilter(String(value))}
          className="w-full max-w-sm p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          placeholder="Cari semua kolom..."
        />

        {/* BARU: Filter Dropdown untuk Tipe RIASEC */}
        <div>
          <select
            value={(table.getColumn('tipeRiasec')?.getFilterValue() as string) ?? ''}
            onChange={(e) => table.getColumn('tipeRiasec')?.setFilterValue(e.target.value)}
            className="p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="">Semua Tipe</option>
            {/* Opsi untuk setiap tipe RIASEC */}
            {['R', 'I', 'A', 'S', 'E', 'C'].map((tipe) => (
              <option key={tipe} value={tipe}>
                 {tipe}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* --- Bagian Tabel dan Paginasi (TIDAK BERUBAH) --- */}
      <div className="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg shadow">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-700">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th
                    key={header.id}
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
                    style={{ width: header.getSize() !== 150 ? header.getSize() : undefined }}
                  >
                    {header.isPlaceholder ? null : (
                      <div
                        {...{
                          className: header.column.getCanSort()
                            ? 'cursor-pointer select-none flex items-center gap-2'
                            : '',
                          onClick: header.column.getToggleSortingHandler(),
                        }}
                      >
                        {flexRender(header.column.columnDef.header, header.getContext())}
                        {{ asc: <ChevronUp size={16} />, desc: <ChevronDown size={16} /> }[
                          header.column.getIsSorted() as string
                        ] ?? (header.column.getCanSort() ? <ChevronsUpDown size={16} /> : null)}
                      </div>
                    )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id} className="hover:bg-gray-50 dark:hover:bg-gray-600">
                {row.getVisibleCells().map((cell) => (
                  <td key={cell.id} className="px-6 py-4 text-sm text-gray-800 dark:text-gray-200">
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="mt-6 flex items-center justify-between">
        {/* ... Kontrol Paginasi ... */}
        <div className="mt-6 flex items-center justify-between">
          <div className="text-sm text-gray-900 dark:text-white">
            Halaman {table.getState().pagination.pageIndex + 1} dari {table.getPageCount()}
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={() => table.setPageIndex(0)}
              disabled={!table.getCanPreviousPage()}
              className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
            >
              {'<<'}
            </button>
            <button
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
              className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
            >
              {'<'}
            </button>
            <button
              onClick={() => table.nextPage()}
              disabled={!table.getCanNextPage()}
              className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
            >
              {'>'}
            </button>
            <button
              onClick={() => table.setPageIndex(table.getPageCount() - 1)}
              disabled={!table.getCanNextPage()}
              className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
            >
              {'>>'}
            </button>
            <span className="flex items-center gap-1 text-sm text-gray-900 dark:text-white">
              | Ke halaman:
              <input
                type="number"
                defaultValue={table.getState().pagination.pageIndex + 1}
                onChange={(e) => {
                  const page = e.target.value ? Number(e.target.value) - 1 : 0
                  table.setPageIndex(page)
                }}
                className="border p-1 rounded w-16 dark:bg-gray-700 dark:text-white dark:border-gray-600"
              />
            </span>
          </div>
        </div>
        {/* ... */}
      </div>
    </div>
  )
}

PertanyaanIndex.layout = (page: any) => <AdminLayout children={page} />

// title: inertia/pages/admin/profile/index.tsx
// title: inertia/pages/admin/profile/index.tsx
import { Link, useForm, Head, usePage } from '@inertiajs/react'
import AdminLayout from '../layouts/main'
import { useState, useEffect } from 'react'
import { CheckCircle, XCircle, X } from 'lucide-react'

// Definisikan tipe data untuk prop
interface User {
  id: number
  fullName: string | null
  email: string
}

interface PageProps {
  user: User
  flash?: {
    success?: string
    error?: string
  }
}

export default function AdminProfile() {
  const { user, flash } = usePage<PageProps>().props

  const { data, setData, put, processing, errors } = useForm({
    fullName: user.fullName || '',
    email: user.email,
    password: '',
    password_confirmation: '',
  })

  // CUKUP SATU STATE untuk notifikasi "toast"
  const [toast, setToast] = useState({
    show: false,
    message: '',
    type: 'success' as 'success' | 'error',
  })

  // useEffect untuk memantau perubahan pada flash message dari backend
  useEffect(() => {
    if (flash?.success) {
      setToast({ show: true, message: flash.success, type: 'success' })
    } else if (flash?.error) {
      setToast({ show: true, message: flash.error, type: 'error' })
    }

    // Otomatis sembunyikan toast setelah 5 detik
    if (flash?.success || flash?.error) {
      const timer = setTimeout(() => {
        setToast((current) => ({ ...current, show: false }))
      }, 5000)
      // Cleanup timer jika komponen di-unmount atau flash berubah lagi
      return () => clearTimeout(timer)
    }
  }, [flash])

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    put('/admin/profile', {
      preserveScroll: true,
      onSuccess: () => {
        // Kosongkan field password setelah berhasil update
        setData((currentData) => ({
          ...currentData,
          password: '',
          password_confirmation: '',
        }))
      },
    })
  }

  return (
    <>
      <Head title="My Profile" />
      <div className="p-4 md:p-8 max-w-2xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">
            My Profile
          </h1>
          <Link
            href="/admin/dashboard"
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
          >
            ← Kembali
          </Link>
        </div>

        <div className="bg-white dark:bg-gray-800 p-6 md:p-8 rounded-lg shadow-md">
          <form onSubmit={submit} className="space-y-6">
            {/* Form fields... (sama seperti kode Anda) */}
            <div>
              <label
                htmlFor="fullName"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Nama Lengkap <span className="text-red-500">*</span>
              </label>
              <input
                id="fullName"
                type="text"
                value={data.fullName}
                onChange={(e) => setData('fullName', e.target.value)}
                className="mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                required
              />
              {errors.fullName && (
                <div className="text-xs text-red-500 mt-1">{errors.fullName}</div>
              )}
            </div>
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Email <span className="text-red-500">*</span>
              </label>
              <input
                id="email"
                type="email"
                value={data.email}
                onChange={(e) => setData('email', e.target.value)}
                className="mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                required
              />
              {errors.email && <div className="text-xs text-red-500 mt-1">{errors.email}</div>}
            </div>
            <hr className="border-gray-200 dark:border-gray-700" />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                >
                  Password Baru
                </label>
                <input
                  id="password"
                  type="password"
                  value={data.password}
                  autoComplete="new-password"
                  onChange={(e) => setData('password', e.target.value)}
                  className="mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  placeholder="Kosongkan jika tidak diubah"
                />
                {errors.password && (
                  <div className="text-xs text-red-500 mt-1">{errors.password}</div>
                )}
              </div>
              <div>
                <label
                  htmlFor="password_confirmation"
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                >
                  Konfirmasi Password Baru
                </label>
                <input
                  id="password_confirmation"
                  type="password"
                  value={data.password_confirmation}
                  onChange={(e) => setData('password_confirmation', e.target.value)}
                  className="mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                />
              </div>
            </div>
            <div className="flex justify-end pt-2">
              <button
                type="submit"
                disabled={processing}
                className="inline-flex justify-center px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 transition-colors"
              >
                {processing ? 'Menyimpan...' : 'Simpan Perubahan'}
              </button>
            </div>
          </form>
        </div>
      </div>

      {/* --- Floating Toast Notification --- */}
      <div
        className={`fixed bottom-5 right-5 transition-transform duration-300 z-50 ${
          toast.show ? 'translate-x-0' : 'translate-x-[calc(100%+2rem)]'
        }`}
      >
        <div
          className={`flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow-lg dark:text-gray-400 dark:bg-gray-800 ring-1 ${
            toast.type === 'success'
              ? 'ring-green-200 dark:ring-green-700'
              : 'ring-red-200 dark:ring-red-700'
          }`}
          role="alert"
        >
          <div
            className={`inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg ${
              toast.type === 'success'
                ? 'bg-green-100 text-green-500 dark:bg-green-800 dark:text-green-200'
                : 'bg-red-100 text-red-500 dark:bg-red-800 dark:text-red-200'
            }`}
          >
            {toast.type === 'success' ? <CheckCircle size={20} /> : <XCircle size={20} />}
          </div>
          <div className="ms-3 text-sm font-normal">{toast.message}</div>
          <button
            type="button"
            className="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
            onClick={() => setToast({ ...toast, show: false })}
            aria-label="Close"
          >
            <span className="sr-only">Close</span>
            <X size={20} />
          </button>
        </div>
      </div>
    </>
  )
}

// Menggunakan layout admin yang sudah ada
AdminProfile.layout = (page: any) => <AdminLayout children={page} />

// title: inertia/pages/admin/siswaRiasec/create.tsx
import { Link, useForm, Head } from '@inertiajs/react'
import AdminLayout from '../layouts/main'

export default function CreateSiswa() {
    type SiswaFormData = {
        namaLengkap: string
        email: string
        password: string
        password_confirmation: string
        nisn: string
        kelas: string
        tanggalLahir: string
    }

    const { data, setData, post, processing, errors } = useForm<SiswaFormData>({
        namaLengkap: '',
        email: '',
        password: '',
        password_confirmation: '', // Ditambahkan field untuk konfirmasi password
        nisn: '',
        kelas: '',
        tanggalLahir: '', // Gunakan string kosong untuk input tanggal
    })

    function submit(e: React.FormEvent<HTMLFormElement>) {
        e.preventDefault()
        // Kirim data ke rute yang telah kita buat
        post('/admin/siswa-riasec', {
            onSuccess: () => {
                // Optional: Lakukan sesuatu setelah berhasil, misalnya reset form
            },
        })
    }

    return (
        <>
            <Head title="Tambah Siswa Baru" />
            <div className="p-8 max-w-4xl mx-auto">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Tambah Siswa Baru</h1>
                    <Link
                        href="/admin/siswa-riasec"
                        className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
                    >
                        ← Kembali ke Daftar Siswa
                    </Link>
                </div>

                <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md">
                    {/* Menampilkan error global dari backend (misal: kegagalan transaksi) */}
                    {errors.form && (
                        <div
                            className="mb-4 p-4 text-sm text-red-800 rounded-lg bg-red-100 dark:bg-gray-700 dark:text-red-400"
                            role="alert"
                        >
                            {errors.form}
                        </div>
                    )}

                    <form onSubmit={submit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Nama Lengkap */}
                        <div className="md:col-span-2">
                            <label
                                htmlFor="namaLengkap"
                                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                            >
                                Nama Lengkap <span className="text-red-500">*</span>
                            </label>
                            <input
                                id="namaLengkap"
                                type="text"
                                value={data.namaLengkap}
                                onChange={(e) => setData('namaLengkap', e.target.value)}
                                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                required
                            />
                            {errors.namaLengkap && (
                                <div className="text-xs text-red-500 mt-1">{errors.namaLengkap}</div>
                            )}
                        </div>

                        {/* Email */}
                        <div>
                            <label
                                htmlFor="email"
                                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                            >
                                Email <span className="text-red-500">*</span>
                            </label>
                            <input
                                id="email"
                                type="email"
                                value={data.email}
                                onChange={(e) => setData('email', e.target.value)}
                                className="mt-1 block px-3 py-2 w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                required
                            />
                            {errors.email && <div className="text-xs text-red-500 mt-1">{errors.email}</div>}
                        </div>

                        {/* Password */}
                        <div>
                            <label
                                htmlFor="password"
                                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                            >
                                Password <span className="text-red-500">*</span>
                            </label>
                            <input
                                id="password"
                                type="password"
                                value={data.password}
                                autoComplete="new-password"
                                onChange={(e) => setData('password', e.target.value)}
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                required
                            />
                            {errors.password && <div className="text-xs text-red-500 mt-1">{errors.password}</div>}
                        </div>

                        {/* Konfirmasi Password */}
                        <div>
                            <label
                                htmlFor="password_confirmation"
                                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                            >
                                Konfirmasi Password <span className="text-red-500">*</span>
                            </label>
                            <input
                                id="password_confirmation"
                                type="password"
                                value={data.password_confirmation}
                                onChange={(e) => setData('password_confirmation', e.target.value)}
                                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                required
                            />
                            {errors.password_confirmation && (
                                <div className="text-xs text-red-500 mt-1">{errors.password_confirmation}</div>
                            )}
                        </div>

                        {/* NISN */}
                        <div>
                            <label
                                htmlFor="nisn"
                                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                            >
                                NISN (Opsional)
                            </label>
                            <input
                                id="nisn"
                                type="text"
                                value={data.nisn}
                                onChange={(e) => setData('nisn', e.target.value)}
                                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                            />
                            {errors.nisn && <div className="text-xs text-red-500 mt-1">{errors.nisn}</div>}
                        </div>

                        {/* Kelas */}
                        <div>
                            <label
                                htmlFor="kelas"
                                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                            >
                                Kelas (Opsional)
                            </label>
                            <input
                                id="kelas"
                                type="text"
                                value={data.kelas}
                                onChange={(e) => setData('kelas', e.target.value)}
                                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                placeholder="Contoh: XII IPA 1"
                            />
                            {errors.kelas && <div className="text-xs text-red-500 mt-1">{errors.kelas}</div>}
                        </div>

                        {/* Tanggal Lahir */}
                        <div className="md:col-span-2">
                            <label
                                htmlFor="tanggalLahir"
                                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                            >
                                Tanggal Lahir (Opsional)
                            </label>
                            <input
                                id="tanggalLahir"
                                type="date"
                                value={data.tanggalLahir}
                                onChange={(e) => setData('tanggalLahir', e.target.value)}
                                className="mt-1 block px-3 py-2 w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                            />
                            {errors.tanggalLahir && (
                                <div className="text-xs text-red-500 mt-1">{errors.tanggalLahir}</div>
                            )}
                        </div>

                        <div className="md:col-span-2 flex justify-end">
                            <button
                                type="submit"
                                disabled={processing}
                                className="inline-flex justify-center px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 transition-colors"
                            >
                                {processing ? 'Menyimpan...' : 'Simpan Siswa'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </>
    )
}

// Menggunakan layout admin yang sama dengan halaman index
CreateSiswa.layout = (page: any) => <AdminLayout children={page} title="Tambah Siswa" />

// title: inertia/pages/admin/siswaRiasec/edit.tsx
// title: inertia/pages/admin/siswa/edit.tsx
import { Link, useForm, Head } from '@inertiajs/react'
import AdminLayout from '../layouts/main'
import { DateTime } from 'luxon'

// Definisikan tipe data untuk prop `siswa`
interface SiswaData {
  id: number
  namaLengkap: string
  nisn: string | null
  kelas: string | null
  tanggalLahir: string | null // Datetime dari Lucid sering datang sebagai string ISO
  user: {
    email: string
  }
}

export default function EditSiswa({ siswa }: { siswa: SiswaData }) {
  const { data, setData, put, processing, errors } = useForm({
    namaLengkap: siswa.namaLengkap,
    email: siswa.user.email,
    password: '', // Selalu kosongkan password di awal demi keamanan
    nisn: siswa.nisn || '',
    kelas: siswa.kelas || '',
    tanggalLahir: siswa.tanggalLahir ? DateTime.fromISO(siswa.tanggalLahir).toISODate() : '',
  })

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    // Gunakan method PUT untuk update, arahkan ke rute update
    put(`/admin/siswa-riasec/${siswa.id}`)
  }

  return (
    <>
      <Head title={`Edit Siswa - ${siswa.namaLengkap}`} />
      <div className="p-8 max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Edit Data Siswa</h1>
          <Link
            href="/admin/siswa-riasec"
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
          >
            ← Kembali ke Daftar Siswa
          </Link>
        </div>

        <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md">
          {/* Global form error handling can be added here if needed */}

          <form onSubmit={submit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Nama Lengkap */}
            <div className="md:col-span-2">
              <label
                htmlFor="namaLengkap"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Nama Lengkap <span className="text-red-500">*</span>
              </label>
              <input
                id="namaLengkap"
                type="text"
                value={data.namaLengkap}
                onChange={(e) => setData('namaLengkap', e.target.value)}
                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                required
              />
              {errors.namaLengkap && (
                <div className="text-xs text-red-500 mt-1">{errors.namaLengkap}</div>
              )}
            </div>

            {/* Email */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Email <span className="text-red-500">*</span>
              </label>
              <input
                id="email"
                type="email"
                value={data.email}
                onChange={(e) => setData('email', e.target.value)}
                className="mt-1 block px-3 py-2 w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                required
              />
              {errors.email && <div className="text-xs text-red-500 mt-1">{errors.email}</div>}
            </div>

            {/* Password */}
            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Password Baru
              </label>
              <input
                id="password"
                type="password"
                value={data.password}
                autoComplete="new-password"
                onChange={(e) => setData('password', e.target.value)}
                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                placeholder="Kosongkan jika tidak diubah"
              />
              {errors.password && (
                <div className="text-xs text-red-500 mt-1">{errors.password}</div>
              )}
            </div>

            {/* NISN, Kelas, Tanggal Lahir (sama seperti di form create) */}
            {/* ... (copy-paste form input untuk nisn, kelas, tanggalLahir dari create.tsx) ... */}
            <div>
              <label
                htmlFor="nisn"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                NISN (Opsional)
              </label>
              <input
                id="nisn"
                type="text"
                value={data.nisn}
                onChange={(e) => setData('nisn', e.target.value)}
                className="mt-1 block px-3 py-2 w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
              {errors.nisn && <div className="text-xs text-red-500 mt-1">{errors.nisn}</div>}
            </div>

            <div>
              <label
                htmlFor="kelas"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Kelas (Opsional)
              </label>
              <input
                id="kelas"
                type="text"
                value={data.kelas}
                onChange={(e) => setData('kelas', e.target.value)}
                className="mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                placeholder="Contoh: XII IPA 1"
              />
              {errors.kelas && <div className="text-xs text-red-500 mt-1">{errors.kelas}</div>}
            </div>

            <div className="md:col-span-2">
              <label
                htmlFor="tanggalLahir"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Tanggal Lahir (Opsional)
              </label>
              <input
                id="tanggalLahir"
                type="date"
                value={data.tanggalLahir ?? ''}
                onChange={(e) => setData('tanggalLahir', e.target.value)}
                className="mt-1 block px-3 py-2 w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
              {errors.tanggalLahir && (
                <div className="text-xs text-red-500 mt-1">{errors.tanggalLahir}</div>
              )}
            </div>

            <div className="md:col-span-2 flex justify-end">
              <button
                type="submit"
                disabled={processing}
                className="inline-flex justify-center px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 transition-colors"
              >
                {processing ? 'Menyimpan...' : 'Simpan Perubahan'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </>
  )
}

EditSiswa.layout = (page: any) => <AdminLayout children={page} title="Edit Siswa" />

// title: inertia/pages/admin/siswaRiasec/index.tsx
// title: inertia/pages/admin/siswaRiasec/index.tsx
import { Link } from '@inertiajs/react'
import {
  Eye,
  Pencil,
  Trash2,
  RefreshCw,
  ChevronUp,
  ChevronDown,
  ChevronsUpDown,
} from 'lucide-react'
import AdminLayout from '../layouts/main'
import { useMemo, useState, useEffect } from 'react'
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  createColumnHelper,
  flexRender,
  SortingState,
  ColumnDef,
} from '@tanstack/react-table'

// --- Data Interfaces ---
interface User {
  id: number
  email: string
}
interface HasilTes {
  id: number
  kodeHolland: string | null
}
interface Siswa {
  id: number
  namaLengkap: string
  nisn: string | null
  kelas: string | null
  user: User
  hasilTes: HasilTes[]
}

// --- Debounced Input for Search ---
function DebouncedInput({
  value: initialValue,
  onChange,
  debounce = 500,
  ...props
}: {
  value: string | number
  onChange: (value: string | number) => void
  debounce?: number
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'>) {
  const [value, setValue] = useState(initialValue)
  useEffect(() => setValue(initialValue), [initialValue])
  useEffect(() => {
    const timeout = setTimeout(() => onChange(value), debounce)
    return () => clearTimeout(timeout)
  }, [value])
  return <input {...props} value={value} onChange={(e) => setValue(e.target.value)} />
}

export default function SiswaIndex({ siswa }: { siswa: Siswa[] }) {
  const data = useMemo(() => siswa, [siswa])
  const [sorting, setSorting] = useState<SortingState>([])
  const [globalFilter, setGlobalFilter] = useState('')

  const columnHelper = createColumnHelper<Siswa>()

  const columns = useMemo<ColumnDef<Siswa, any>[]>(
    () => [
      columnHelper.accessor((row, index) => index + 1, {
        id: 'no',
        header: '#',
        size: 50,
      }),
      columnHelper.accessor('namaLengkap', {
        header: 'Nama Lengkap',
        cell: (info) => info.getValue(),
      }),
      columnHelper.accessor((row) => row.user?.email, {
        id: 'email',
        header: 'Email',
        cell: (info) => info.getValue() || 'N/A',
      }),
      columnHelper.accessor('kelas', {
        header: 'Kelas',
        cell: (info) => info.getValue() || '-',
      }),
      columnHelper.display({
        id: 'statusTes',
        header: 'Status Tes',
        cell: ({ row }) => {
          const sudahTes = row.original.hasilTes && row.original.hasilTes.length > 0
          return sudahTes ? (
            <span className="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
              Sudah Tes
            </span>
          ) : (
            <span className="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
              Belum Tes
            </span>
          )
        },
      }),
      columnHelper.display({
        id: 'kodeHolland',
        header: 'Hasil (Kode)',
        cell: ({ row }) => {
          const hasilTerbaru =
            row.original.hasilTes && row.original.hasilTes.length > 0
              ? row.original.hasilTes[0]
              : null
          return <span className="font-mono">{hasilTerbaru?.kodeHolland || '-'}</span>
        },
      }),
      columnHelper.display({
        id: 'actions',
        header: 'Aksi',
        cell: ({ row }) => {
          const item = row.original
          const sudahTes = item.hasilTes && item.hasilTes.length > 0
          return (
            <div className="flex items-center justify-end space-x-1">
              <Link
                href={`/admin/siswa-riasec/${item.id}`}
                title="Lihat Detail"
                className="p-2 text-gray-500 rounded-full transition-colors hover:text-blue-600 hover:bg-blue-100 dark:hover:bg-gray-700"
              >
                <Eye size={18} />
              </Link>
              <Link
                href={`/admin/siswa-riasec/${item.id}/edit`}
                title="Edit Siswa"
                className="p-2 text-gray-500 rounded-full transition-colors hover:text-indigo-600 hover:bg-indigo-100 dark:hover:bg-gray-700"
              >
                <Pencil size={18} />
              </Link>
              <Link
                href={`/admin/siswa-riasec/${item.id}/reset`}
                method="post"
                as="button"
                title="Reset Tes"
                className={`p-2 rounded-full transition-colors ${!sudahTes ? 'text-gray-300 dark:text-gray-600' : 'text-gray-500 hover:text-orange-600 hover:bg-orange-100 dark:hover:bg-gray-700'}`}
                disabled={!sudahTes}
                onBefore={() => confirm('Yakin ingin mereset tes siswa ini?')}
              >
                <RefreshCw size={18} />
              </Link>
              <Link
                href={`/admin/siswa-riasec/${item.id}`}
                method="delete"
                as="button"
                title="Hapus Siswa"
                className="p-2 text-gray-500 rounded-full transition-colors hover:text-red-600 hover:bg-red-100 dark:hover:bg-gray-700"
                onBefore={() => confirm('Yakin ingin menghapus data siswa ini?')}
              >
                <Trash2 size={18} />
              </Link>
            </div>
          )
        },
      }),
    ],
    []
  )

  const table = useReactTable({
    data,
    columns,
    state: { sorting, globalFilter },
    onSortingChange: setSorting,
    onGlobalFilterChange: setGlobalFilter,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: { pagination: { pageSize: 10 } },
  })

  return (
    <div className="p-8 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Manajemen Siswa</h1>
        <Link
          href="/admin/siswa-riasec/create"
          className="inline-block px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Tambah Siswa Baru
        </Link>
      </div>

      <div className="mb-4">
        <DebouncedInput
          value={globalFilter ?? ''}
          onChange={(value) => setGlobalFilter(String(value))}
          className="w-full max-w-sm p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          placeholder="Cari semua kolom..."
        />
      </div>

      <div className="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg shadow">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-700">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th
                    key={header.id}
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
                    style={{ width: header.getSize() !== 150 ? header.getSize() : undefined }}
                  >
                    {header.isPlaceholder ? null : (
                      <div
                        {...{
                          className: header.column.getCanSort()
                            ? 'cursor-pointer select-none flex items-center gap-2'
                            : '',
                          onClick: header.column.getToggleSortingHandler(),
                        }}
                      >
                        {flexRender(header.column.columnDef.header, header.getContext())}
                        {{
                          asc: <ChevronUp size={16} />,
                          desc: <ChevronDown size={16} />,
                        }[header.column.getIsSorted() as string] ??
                          (header.column.getCanSort() ? <ChevronsUpDown size={16} /> : null)}
                      </div>
                    )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id} className="hover:bg-gray-50 dark:hover:bg-gray-600">
                {row.getVisibleCells().map((cell) => (
                  <td
                    key={cell.id}
                    className="px-6 py-4 whitespace-nowrap text-sm text-gray-800 dark:text-gray-200"
                  >
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination Controls */}
      <div className="mt-6 flex items-center justify-between">
        <div className="text-sm text-gray-900 dark:text-white">
          Halaman {table.getState().pagination.pageIndex + 1} dari {table.getPageCount()}
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
            className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
          >
            {'<<'}
          </button>
          <button
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
            className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
          >
            {'<'}
          </button>
          <button
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
            className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
          >
            {'>'}
          </button>
          <button
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
            className="px-2 py-1 border rounded-md text-sm disabled:opacity-50 text-gray-900 dark:text-white dark:border-gray-600"
          >
            {'>>'}
          </button>
          <span className="flex items-center gap-1 text-sm text-gray-900 dark:text-white">
            | Ke halaman:
            <input
              type="number"
              defaultValue={table.getState().pagination.pageIndex + 1}
              onChange={(e) => {
                const page = e.target.value ? Number(e.target.value) - 1 : 0
                table.setPageIndex(page)
              }}
              className="border p-1 rounded w-16 dark:bg-gray-700 dark:text-white dark:border-gray-600"
            />
          </span>
        </div>
      </div>
    </div>
  )
}

SiswaIndex.layout = (page: any) => <AdminLayout children={page} />

// title: inertia/pages/admin/siswaRiasec/view.tsx
// title: inertia/pages/admin/siswaRiasec/view.tsx
import { Head, Link } from '@inertiajs/react'
import AdminLayout from '../layouts/main'
import { Award, BrainCircuit, Lightbulb, RefreshCw } from 'lucide-react' // 1. Impor ikon RefreshCw

// --- DATA DESKRIPSI RIASEC (Untuk Tampilan UI) ---
const descriptions = {
    R: {
        name: 'Realistic (The Doer)',
        desc: 'Orang dengan tipe Realistis suka bekerja dengan objek, mesin, peralatan, tanaman, atau hewan. Mereka menikmati pekerjaan yang membutuhkan keterampilan praktis dan kekuatan fisik.',
        color: 'bg-orange-500',
    },
    I: {
        name: 'Investigative (The Thinker)',
        desc: 'Tipe Investigatif senang mengamati, belajar, menyelidiki, menganalisis, dan memecahkan masalah. Mereka unggul dalam tugas-tugas yang membutuhkan pemikiran abstrak dan analitis.',
        color: 'bg-sky-500',
    },
    A: {
        name: 'Artistic (The Creator)',
        desc: 'Tipe Artistik memiliki kemampuan artistik, inovatif, dan intuitif. Mereka suka bekerja dalam situasi yang tidak terstruktur di mana mereka dapat menggunakan imajinasi dan kreativitas mereka.',
        color: 'bg-purple-500',
    },
    S: {
        name: 'Social (The Helper)',
        desc: 'Tipe Sosial senang bekerja dengan orang lain untuk mencerahkan, membantu, melatih, atau menyembuhkan. Mereka terampil dalam berkomunikasi dan membangun hubungan.',
        color: 'bg-emerald-500',
    },
    E: {
        name: 'Enterprising (The Persuader)',
        desc: 'Tipe Enterprising suka bekerja dengan orang lain untuk mempengaruhi, membujuk, atau memimpin. Mereka ambisius, energik, dan menikmati peran kepemimpinan.',
        color: 'bg-red-500',
    },
    C: {
        name: 'Conventional (The Organizer)',
        desc: 'Tipe Konvensional suka bekerja dengan data, memiliki kemampuan klerikal atau numerik, dan mengikuti instruksi. Mereka terorganisir, efisien, dan menghargai ketelitian.',
        color: 'bg-yellow-500',
    },
}

interface User {
    id: number
    email: string
}

interface Program {
    id: number
    name: string
    description: string | null
}

interface Interest {
    id: number
    name: string
    description: string
}

interface HasilTes {
    id: number
    kodeHolland: string | null
    tanggalTes?: string
    skorR?: number
    skorI?: number
    skorA?: number
    skorS?: number
    skorE?: number
    skorC?: number
    deskripsiHasil?: string | null
    siswa: {
        namaLengkap: string
    }
}

interface Siswa {
    id: number
    namaLengkap: string
    nisn: string | null
    kelas: string | null
    user: User
    hasilTes: HasilTes[]
}

interface SiswaViewProps {
    siswa: Siswa
    hasilTes: HasilTes | null
    recommendedPrograms: Program[]
    recommendedInterests: Interest[]
}

export default function SiswaView({ siswa, hasilTes, recommendedPrograms, recommendedInterests }: SiswaViewProps) {
    // Prepare scores for display
    const rawScores = hasilTes
        ? [
            { type: 'R', score: hasilTes.skorR || 0 },
            { type: 'I', score: hasilTes.skorI || 0 },
            { type: 'A', score: hasilTes.skorA || 0 },
            { type: 'S', score: hasilTes.skorS || 0 },
            { type: 'E', score: hasilTes.skorE || 0 },
            { type: 'C', score: hasilTes.skorC || 0 },
        ]
        : []

    // Find the maximum score to normalize the bar widths
    const maxScore = rawScores.length > 0 ? Math.max(...rawScores.map((s) => s.score), 1) : 1

    // Sort scores from highest to lowest
    const scores = [...rawScores].sort((a, b) => b.score - a.score)

    // Get top three RIASEC types from kodeHolland
    const topThreeTypes = hasilTes?.kodeHolland
        ? (hasilTes.kodeHolland.split('') as (keyof typeof descriptions)[])
        : []

    return (
        <>
            <Head title={`Detail Siswa - ${siswa.namaLengkap}`} />

            <div className="p-8 max-w-7xl mx-auto">
                {/* Header and Student Information */}
                <section className="bg-white p-6 sm:p-8 rounded-xl shadow-lg mb-8">
                    <div className="flex flex-wrap justify-between items-center mb-6 gap-4">
                        <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Detail Siswa</h1>
                        {/* 2. Grup untuk tombol aksi */}
                        <div className="flex items-center space-x-2">
                            {/* Tombol Reset Tes (BARU) */}
                            {hasilTes && (
                                <Link
                                    href={`/admin/siswa-riasec/${siswa.id}/reset`}
                                    method="post"
                                    as="button"
                                    title="Reset Tes"
                                    className="inline-flex items-center px-4 py-2 bg-orange-500 text-white font-semibold rounded-lg shadow-md hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                    onBefore={() => confirm('Apakah Anda yakin ingin mereset hasil tes siswa ini? Data tes akan dihapus secara permanen.')}
                                >
                                    <RefreshCw className="w-4 h-4 mr-2" />
                                    Reset Tes
                                </Link>
                            )}
                            <Link
                                href="/admin/siswa-riasec"
                                className="inline-block px-4 py-2 bg-gray-600 text-white font-semibold rounded-lg shadow-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors"
                            >
                                Kembali
                            </Link>
                        </div>
                    </div>

                    <div className="text-center">
                        <h2 className="text-2xl font-semibold text-slate-900">Informasi Siswa</h2>
                        <p className="mt-2 text-slate-600">Berikut adalah detail untuk {siswa.namaLengkap}.</p>
                        <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <p><strong>Nama Lengkap:</strong> {siswa.namaLengkap}</p>
                            <p><strong>NISN:</strong> {siswa.nisn || '-'}</p>
                            <p><strong>Email:</strong> {siswa.user?.email || 'N/A'}</p>
                            <p><strong>Kelas:</strong> {siswa.kelas || '-'}</p>
                        </div>
                    </div>

                    {/* Test Results Section */}
                    {hasilTes ? (
                        <>
                            <div className="mt-8 pt-6 border-t border-slate-200">
                                <h3 className="text-xl font-semibold mb-4 text-center sm:text-left">Hasil Tes RIASEC</h3>
                                <div className="text-center">
                                    <p className="text-lg text-slate-500">Kode Holland:</p>
                                    <p className="text-5xl sm:text-6xl font-bold text-blue-600 tracking-widest my-2">
                                        {hasilTes.kodeHolland || '-'}
                                    </p>
                                </div>

                                {/* Score Breakdown */}
                                <div className="mt-8">
                                    <h4 className="text-xl font-semibold mb-4 text-center sm:text-left">Rincian Skor</h4>
                                    <div className="space-y-4">
                                        {scores.map(({ type, score }) => {
                                            const percentage = (score / maxScore) * 100
                                            const typeInfo = descriptions[type as keyof typeof descriptions]

                                            return (
                                                <div key={type} className="flex items-center gap-x-3 sm:gap-x-4">
                                                    <div className="w-44 shrink-0 text-right">
                                                        <span className="font-bold text-slate-700">{typeInfo.name}</span>
                                                    </div>
                                                    <div className="flex-1 bg-slate-200 rounded-full h-7 relative">
                                                        <div
                                                            className={`${typeInfo.color} h-7 rounded-full`}
                                                            style={{ width: `${percentage}%` }}
                                                        />
                                                        <span
                                                            className={`absolute left-3 top-1/2 -translate-y-1/2 text-sm font-bold ${percentage > 15 ? 'text-white' : 'text-slate-800'
                                                                }`}
                                                        >
                                                            {score}
                                                        </span>
                                                    </div>
                                                </div>
                                            )
                                        })}
                                    </div>
                                </div>

                                {/* Personality Type Descriptions */}
                                <div className="mt-8 pt-6 border-t border-slate-200">
                                    <h4 className="text-xl font-semibold mb-4 text-center sm:text-left">
                                        Deskripsi Tipe Kepribadian Teratas
                                    </h4>
                                    <div className="space-y-6">
                                        {topThreeTypes.map((type) => {
                                            const typeInfo = descriptions[type]
                                            return (
                                                <div key={type} className="p-4 rounded-lg border border-slate-200">
                                                    <div className="flex items-center mb-2">
                                                        <div
                                                            className={`w-4 h-4 rounded-full ${typeInfo.color} mr-3 flex-shrink-0`}
                                                        ></div>
                                                        <h4 className="text-lg font-bold text-slate-800">{typeInfo.name}</h4>
                                                    </div>
                                                    <p className="text-slate-600">{typeInfo.desc}</p>
                                                </div>
                                            )
                                        })}
                                    </div>
                                </div>
                            </div>

                            {/* Recommendations: Interests */}
                            <section className="mt-8 pt-6 border-t border-slate-200">
                                <div className="text-center mb-8">
                                    <Lightbulb className="mx-auto h-12 w-12 text-indigo-500" />
                                    <h2 className="text-3xl font-bold text-gray-900 mt-4">
                                        Rekomendasi Pengembangan Minat dan Bakat
                                    </h2>
                                    <p className="mt-2 text-gray-600 max-w-2xl mx-auto">
                                        Kepribadian {siswa.namaLengkap} juga tercermin dalam hobinya. Berikut aktivitas yang bisa dijelajahi untuk mengembangkan diri!
                                    </p>
                                </div>

                                {recommendedInterests && recommendedInterests.length > 0 ? (
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {recommendedInterests.map((interest) => (
                                            <div
                                                key={interest.id}
                                                className="border border-gray-200 rounded-lg p-6 flex flex-col items-center text-center transform hover:shadow-xl hover:-translate-y-1 transition-all duration-300"
                                            >
                                                <h3 className="text-xl font-bold text-gray-900">{interest.name}</h3>
                                                <p className="text-gray-500 mt-2 flex-grow">
                                                    {interest.description || 'Deskripsi belum tersedia.'}
                                                </p>
                                                <Link
                                                    href="#"
                                                    className="mt-4 inline-block bg-indigo-100 text-indigo-700 font-semibold py-2 px-4 rounded-lg hover:bg-indigo-200 transition-colors"
                                                >
                                                    Coba Jelajahi
                                                </Link>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <div className="text-center py-10">
                                        <p className="text-gray-500">
                                            Saat ini belum ada rekomendasi minat dan bakat untuk {siswa.namaLengkap}. Cek lagi nanti!
                                        </p>
                                    </div>
                                )}
                            </section>

                            {/* Recommendations: Programs */}
                            <section className="mt-8 pt-6 border-t border-slate-200">
                                <div className="text-center mb-8">
                                    <Award className="mx-auto h-12 w-12 text-yellow-500" />
                                    <h2 className="text-3xl font-bold text-gray-900 mt-4">
                                        Program Rekomendasi
                                    </h2>
                                    <p className="mt-2 text-gray-600 max-w-2xl mx-auto">
                                        Berdasarkan profil {siswa.namaLengkap} dan pilihan siswa lain yang mirip, program berikut mungkin cocok!
                                    </p>
                                </div>

                                {recommendedPrograms && recommendedPrograms.length > 0 ? (
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {recommendedPrograms.map((program) => (
                                            <div
                                                key={program.id}
                                                className="border border-gray-200 rounded-lg p-6 flex flex-col items-center text-center transform hover:shadow-xl hover:-translate-y-1 transition-all duration-300"
                                            >
                                                <BrainCircuit className="h-10 w-10 text-blue-500 mb-4" />
                                                <h3 className="text-xl font-bold text-gray-900">{program.name}</h3>
                                                <p className="text-gray-500 mt-2 flex-grow">
                                                    {program.description || 'Deskripsi program belum tersedia.'}
                                                </p>
                                                <Link
                                                    href="#"
                                                    className="mt-4 inline-block bg-blue-100 text-blue-700 font-semibold py-2 px-4 rounded-lg hover:bg-blue-200 transition-colors"
                                                >
                                                    Pelajari Lebih Lanjut
                                                </Link>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <div className="text-center py-10">
                                        <p className="text-gray-500">
                                            Saat ini belum ada rekomendasi yang cocok untuk {siswa.namaLengkap}. Cek lagi nanti!
                                        </p>
                                    </div>
                                )}
                            </section>
                        </>
                    ) : (
                        // 3. Tampilkan pesan bahwa siswa belum tes
                        <div className="mt-8 text-center py-10 border-t border-dashed">
                            <h3 className="text-xl font-semibold text-gray-500">Belum Ada Hasil Tes</h3>
                            <p className="text-gray-400 mt-2">Siswa ini belum mengerjakan tes minat bakat RIASEC.</p>
                        </div>
                    )}
                </section>
            </div>
        </>
    )
}

SiswaView.layout = (page: any) => <AdminLayout children={page} />

// title: inertia/pages/admin/users/create.tsx
// title: inertia/pages/admin/users/create.tsx
import { Link, useForm, Head } from '@inertiajs/react'

export default function CreateUser() {
  const { data, setData, post, processing, errors } = useForm({
    fullName: '',
    email: '',
    password: '',
    role: 'user' as 'user' | 'admin',
  })

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    post('/admin/users')
  }

  return (
    <>
      <Head title="Create User" />
      <div className="max-w-2xl mx-auto p-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Create New User</h1>
          <Link href="/admin/users" className="text-indigo-600 hover:underline">
            &larr; Back to Users
          </Link>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <form onSubmit={submit} className="space-y-4">
            {/* Full Name */}
            <div>
              <label htmlFor="fullName" className="block text-sm font-medium text-gray-700">
                Full Name
              </label>
              <input
                id="fullName"
                type="text"
                value={data.fullName}
                onChange={(e) => setData('fullName', e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              />
              {errors.fullName && (
                <div className="text-xs text-red-500 mt-1">{errors.fullName}</div>
              )}
            </div>

            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={data.email}
                onChange={(e) => setData('email', e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              />
              {errors.email && <div className="text-xs text-red-500 mt-1">{errors.email}</div>}
            </div>

            {/* Password */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                id="password"
                type="password"
                value={data.password}
                autoComplete="new-password"
                onChange={(e) => setData('password', e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              />
              {errors.password && (
                <div className="text-xs text-red-500 mt-1">{errors.password}</div>
              )}
            </div>

            {/* Role */}
            <div>
              <label htmlFor="role" className="block text-sm font-medium text-gray-700">
                Role
              </label>
              <select
                id="role"
                value={data.role}
                onChange={(e) => setData('role', e.target.value as 'user' | 'admin')}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              >
                <option value="user">User</option>
                <option value="admin">Admin</option>
              </select>
              {errors.role && <div className="text-xs text-red-500 mt-1">{errors.role}</div>}
            </div>

            <div className="flex justify-end">
              <button
                type="submit"
                disabled={processing}
                className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 disabled:bg-indigo-400"
              >
                {processing ? 'Creating...' : 'Create User'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </>
  )
}

// title: inertia/pages/admin/users/edit.tsx
// title: inertia/pages/admin/users/edit.tsx
import { Link, useForm, Head } from '@inertiajs/react'

interface User {
  id: number
  fullName: string
  email: string
  role: 'user' | 'admin'
}

export default function EditUser({ user }: { user: User }) {
  const { data, setData, put, processing, errors } = useForm({
    fullName: user.fullName || '',
    email: user.email || '',
    role: user.role,
  })

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    put(`/admin/users/${user.id}`)
  }

  return (
    <>
      <Head title={`Edit User - ${user.fullName}`} />
      <div className="max-w-2xl mx-auto p-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Edit User: {user.fullName}</h1>
          <Link href="/admin/users" className="text-indigo-600 hover:underline">
            &larr; Back to Users
          </Link>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <form onSubmit={submit} className="space-y-4">
            {/* Full Name */}
            <div>
              <label htmlFor="fullName" className="block text-sm font-medium text-gray-700">
                Full Name
              </label>
              <input
                id="fullName"
                type="text"
                value={data.fullName}
                onChange={(e) => setData('fullName', e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              />
              {errors.fullName && (
                <div className="text-xs text-red-500 mt-1">{errors.fullName}</div>
              )}
            </div>

            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={data.email}
                onChange={(e) => setData('email', e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              />
              {errors.email && <div className="text-xs text-red-500 mt-1">{errors.email}</div>}
            </div>

            {/* Role */}
            <div>
              <label htmlFor="role" className="block text-sm font-medium text-gray-700">
                Role
              </label>
              <select
                id="role"
                value={data.role}
                onChange={(e) => setData('role', e.target.value as 'user' | 'admin')}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              >
                <option value="user">User</option>
                <option value="admin">Admin</option>
              </select>
              {errors.role && <div className="text-xs text-red-500 mt-1">{errors.role}</div>}
            </div>

            <div className="flex justify-end">
              <button
                type="submit"
                disabled={processing}
                className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 disabled:bg-indigo-400"
              >
                {processing ? 'Updating...' : 'Update User'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </>
  )
}

// title: inertia/pages/admin/users/index.tsx
import { Link } from '@inertiajs/react'
import AdminLayout from '../layouts/main'

interface User {
  id: number
  fullName: string
  email: string
  role: 'user' | 'admin'
}

interface PaginationLink {
  url: string
  page: number
}

export default function UsersIndex({
  users,
  paginationLinks,
}: {
  users: User[]
  paginationLinks: PaginationLink[]
}) {
  return (
    <div className="p-8 max-w-7xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Manage Users</h1>
        <div className="space-x-2">
          <Link
            href="/admin/users/create"
            className="inline-block px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors"
          >
            Create New User
          </Link>
        </div>
      </div>

      {/* Tabel user */}
      <div className="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg shadow">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                No
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Email
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Role
              </th>
              <th className="relative px-6 py-3">
                <span className="sr-only">Actions</span>
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
            {users.map((user, index) => (
              <tr key={user.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                  {index + 1}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                  {user.fullName}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                  {user.email}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                  <span
                    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${user.role === 'admin'
                      ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                      : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                      }`}
                  >
                    {user.role}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-4">
                  <Link
                    href={`/admin/users/${user.id}/edit`}
                    className="text-indigo-600 dark:text-indigo-400 hover:underline"
                  >
                    Edit
                  </Link>
                  <Link
                    href={`/admin/users/${user.id}`}
                    method="delete"
                    as="button"
                    className="text-red-600 dark:text-red-400 hover:underline"
                    onBefore={() => confirm('Are you sure you want to delete this user?')}
                  >
                    Delete
                  </Link>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {/* Pagination */}
      {paginationLinks && paginationLinks.length > 0 && (
        <div className="mt-6 flex justify-center space-x-2">
          {(() => {
            const currentPage = paginationLinks.find(link => link.url === null)?.page ?? 1;

            // Cari link untuk previous dan next berdasarkan page
            const prevLink = paginationLinks.find(link => link.page === currentPage - 1);
            const nextLink = paginationLinks.find(link => link.page === currentPage + 1);

            return (
              <>
                {/* Tombol Prev */}
                {prevLink && (
                  <Link
                    href={`/admin/users${prevLink.url}`}
                    className="px-3 py-1 rounded-md border text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                  >
                    &larr; Prev
                  </Link>
                )}

                {/* Nomor halaman */}
                {paginationLinks.map((anchor) => (
                  <Link
                    key={anchor.page}
                    href={`/admin/users${anchor.url}`}
                    className={`px-3 py-1 rounded-md border text-sm font-medium ${anchor.url === null
                      ? 'bg-indigo-600 text-white dark:bg-indigo-500'
                      : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                      }`}
                  >
                    {anchor.page}
                  </Link>
                ))}

                {/* Tombol Next */}
                {nextLink && (
                  <Link
                    href={`/admin/users${nextLink.url}`}
                    className="px-3 py-1 rounded-md border text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                  >
                    Next &rarr;
                  </Link>
                )}
              </>
            );
          })()}
        </div>
      )}
    </div >
  )
}

UsersIndex.layout = (page: any) => <AdminLayout children={page} />

// title: inertia/pages/auth/login.tsx
import { useForm, Link } from '@inertiajs/react';
import { useState } from 'react';

export default function Login() {
  const { data, setData, post, processing, errors } = useForm({
    email: '',
    password: '',
  });

  const [alert, setAlert] = useState({
    show: false,
    type: 'success', 
    message: '',
  });

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    post('/login', {
      onSuccess: () => {
        setAlert({
          show: true,
          type: 'success',
          message: 'Login successful! Redirecting...',
        });
        setTimeout(() => setAlert({ show: false, type: 'success', message: '' }), 3000);
      },
      onError: () => {
        setAlert({
          show: true,
          type: 'error',
          message: 'Login failed. Please check your credentials.',
        });
      },
    });
  }

  // Function to close the alert
  const closeAlert = () => {
    setAlert({ ...alert, show: false });
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      {/* Form Card */}
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">Login</h1>
        <form onSubmit={submit} className="space-y-6">
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Email
            </label>
            <input
              id="email"
              type="email"
              value={data.email}
              onChange={(e) => setData('email', e.target.value)}
              className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="you@example.com"
            />
            {errors.email && <div className="mt-1 text-xs text-red-500">{errors.email}</div>}
          </div>

          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Password
            </label>
            <input
              id="password"
              type="password"
              value={data.password}
              onChange={(e) => setData('password', e.target.value)}
              autoComplete="off"
              className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="••••••••"
            />
            {errors.password && <div className="mt-1 text-xs text-red-500">{errors.password}</div>}
          </div>

          <div>
            <button
              type="submit"
              disabled={processing}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed"
            >
              {processing ? 'Logging in...' : 'Login'}
            </button>
          </div>
        </form>
        <div className="text-center text-sm">
          <Link
            href="/register"
            className="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300"
          >
            Don't have an account? Register
          </Link>
        </div>
      </div>

      {/* Floating Alert - Positioned at the bottom of the screen */}
      {alert.show && (
        <div
          className={`fixed bottom-4 left-1/2 transform -translate-x-1/2 w-full max-w-md p-4 rounded-md flex justify-between items-center shadow-lg transition-opacity duration-300 ${alert.type === 'success'
              ? 'bg-green-100 text-green-700 dark:bg-green-800 dark:text-green-200'
              : 'bg-red-100 text-red-700 dark:bg-red-800 dark:text-red-200'
            }`}
        >
          <span>{alert.message}</span>
          <button
            onClick={closeAlert}
            className="text-sm font-medium focus:outline-none hover:opacity-75"
          >
            ✕
          </button>
        </div>
      )}
    </div>
  );
}

// title: inertia/pages/auth/register.tsx
// title: inertia/pages/auth/register.tsx
import { useForm, Link, Head } from '@inertiajs/react';
import { useState } from 'react';

export default function Register() {
  const { data, setData, post, processing, errors } = useForm({
    fullName: '',
    email: '',
    password: '',
    password_confirmation: '',
  });

  // State for alert feedback
  const [alert, setAlert] = useState({
    show: false,
    type: 'success', // 'success' or 'error'
    message: '',
  });

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    post('/register', {
      onSuccess: () => {
        setAlert({
          show: true,
          type: 'success',
          message: 'Registration successful! Redirecting...',
        });
        // Auto-dismiss success alert after 3 seconds
        setTimeout(() => setAlert({ show: false, type: 'success', message: '' }), 3000);
      },
      onError: () => {
        setAlert({
          show: true,
          type: 'error',
          message: 'Registration failed. Please check your details.',
        });
      },
    });
  }

  // Function to close the alert
  const closeAlert = () => {
    setAlert({ ...alert, show: false });
  };

  return (
    <>
      <Head title="Register" />
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
        <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
          <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
            Create an Account
          </h1>
          <form onSubmit={submit} className="space-y-6">
            {/* Full Name */}
            <div>
              <label
                htmlFor="fullName"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Full Name
              </label>
              <input
                id="fullName"
                type="text"
                value={data.fullName}
                onChange={(e) => setData('fullName', e.target.value)}
                className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"
              />
              {errors.fullName && (
                <div className="mt-1 text-xs text-red-500">{errors.fullName}</div>
              )}
            </div>

            {/* Email */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Email
              </label>
              <input
                id="email"
                type="email"
                value={data.email}
                onChange={(e) => setData('email', e.target.value)}
                className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"
              />
              {errors.email && <div className="mt-1 text-xs text-red-500">{errors.email}</div>}
            </div>

            {/* Password */}
            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Password
              </label>
              <input
                id="password"
                type="password"
                value={data.password}
                autoComplete="new-password"
                onChange={(e) => setData('password', e.target.value)}
                className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"
              />
              {errors.password && (
                <div className="mt-1 text-xs text-red-500">{errors.password}</div>
              )}
            </div>

            {/* Password Confirmation */}
            <div>
              <label
                htmlFor="password_confirmation"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Confirm Password
              </label>
              <input
                id="password_confirmation"
                type="password"
                value={data.password_confirmation}
                autoComplete="new-password"
                onChange={(e) => setData('password_confirmation', e.target.value)}
                className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"
              />
            </div>

            <div>
              <button
                type="submit"
                disabled={processing}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400"
              >
                {processing ? 'Registering...' : 'Register'}
              </button>
            </div>
          </form>
          <div className="text-center text-sm">
            <Link
              href="/login"
              className="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300"
            >
              Already have an account? Login
            </Link>
          </div>
        </div>

        {/* Floating Alert - Positioned at the bottom of the screen */}
        {alert.show && (
          <div
            className={`fixed bottom-4 left-1/2 transform -translate-x-1/2 w-full max-w-md p-4 rounded-md flex justify-between items-center shadow-lg transition-opacity duration-300 ${alert.type === 'success'
                ? 'bg-green-100 text-green-700 dark:bg-green-800 dark:text-green-200'
                : 'bg-red-100 text-red-700 dark:bg-red-800 dark:text-red-200'
              }`}
            role="alert"
            aria-live="assertive"
          >
            <span>{alert.message}</span>
            <button
              onClick={closeAlert}
              className="text-sm font-medium focus:outline-none hover:opacity-75"
            >
              ✕
            </button>
          </div>
        )}
      </div>
    </>
  );
}

// title: inertia/pages/errors/not_found.tsx
export default function NotFound() {
  return (
    <>
      <div className="container">
        <div className="title">Page not found</div>

        <span>This page does not exist.</span>
      </div>
    </>
  )
}

// title: inertia/pages/errors/server_error.tsx
export default function ServerError(props: { error: any }) {
  return (
    <>
      <div className="container">
        <div className="title">Server Error</div>

        <span>{props.error.message}</span>
      </div>
    </>
  )
}

// title: inertia/pages/home.tsx
import { Link } from '@inertiajs/react'

// Komponen Ikon (ditempatkan di sini agar mudah digunakan)

export default function Home() {
  return (
    <div className="bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200">

      {/* 1. Bagian Hero */}
      <section className="relative flex items-center justify-center min-h-screen px-4 text-center bg-gradient-to-br from-blue-50 to-green-50 dark:from-gray-900 dark:to-blue-900/30">
        <div className="z-10">
          <h1 className="text-4xl font-extrabold tracking-tight md:text-6xl">
            Bantu Siswa Temukan
            <br />
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-green-500">
              Jurusan dan Karier Impian
            </span>
          </h1>
          <p className="max-w-3xl mx-auto mt-6 text-lg text-gray-600 md:text-xl dark:text-gray-300">
            Platform Tes Minat Bakat RIASEC yang terintegrasi, dirancang khusus untuk sekolah modern. Dapatkan laporan akurat dan mudahkan proses bimbingan karier.
          </p>
          <div className="flex flex-col justify-center gap-4 mt-8 sm:flex-row">
            <Link
              href="/register" // Arahkan ke halaman pendaftaran atau login
              className="inline-block px-8 py-3 font-semibold text-white transition-transform transform bg-blue-600 rounded-full shadow-lg hover:bg-blue-700 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Coba Demo Gratis
            </Link>
            <Link
              href="#features"
              className="inline-block px-8 py-3 font-semibold text-blue-600 transition-colors bg-transparent rounded-full dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-gray-800"
            >
              Lihat Fitur →
            </Link>
          </div>
        </div>
      </section>


      {/* 3. Bagian Solusi & Cara Kerja */}
      <section className="py-16 bg-blue-50 sm:py-24 dark:bg-gray-800/50" id="features">
        <div className="max-w-6xl px-4 mx-auto">
          <div className="mb-12 text-center">
            <h2 className="text-3xl font-bold md:text-4xl">Solusi Cerdas untuk Sekolah Anda</h2>
            <p className="max-w-2xl mx-auto mt-4 text-gray-600 dark:text-gray-400">Dengan Tes RIASEC, kami mengubah kebingungan menjadi kejelasan. Cukup dalam 3 langkah mudah.</p>
          </div>
          <div className="relative grid gap-10 md:grid-cols-3">
            {/* Garis Penghubung (Hanya tampil di desktop) */}
            <div className="absolute top-1/2 left-0 right-0 h-0.5 bg-gray-300 dark:bg-gray-600 hidden md:block" style={{ transform: 'translateY(-50%)', zIndex: 0 }}></div>

            <div className="relative z-10 p-6 text-center bg-white border border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700">
              <div className="flex items-center justify-center mx-auto mb-4 font-bold text-white bg-blue-500 rounded-full w-14 h-14">1</div>
              <h3 className="text-lg font-semibold">Buat Sesi Tes</h3>
              <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">Admin membuat jadwal dan membagikan kode akses unik kepada siswa hanya dalam beberapa klik.</p>
            </div>
            <div className="relative z-10 p-6 text-center bg-white border border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700">
              <div className="flex items-center justify-center mx-auto mb-4 font-bold text-white bg-blue-500 rounded-full w-14 h-14">2</div>
              <h3 className="text-lg font-semibold">Siswa Mengerjakan</h3>
              <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">Siswa mengerjakan tes online di mana saja melalui komputer atau smartphone dengan antarmuka yang ramah.</p>
            </div>
            <div className="relative z-10 p-6 text-center bg-white border border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700">
              <div className="flex items-center justify-center mx-auto mb-4 font-bold text-white bg-blue-500 rounded-full w-14 h-14">3</div>
              <h3 className="text-lg font-semibold">Analisis Hasilnya</h3>
              <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">Dapatkan laporan individual yang detail dan rekapitulasi sekolah secara real-time untuk sesi konseling.</p>
            </div>
          </div>
        </div>
      </section>

      {/* 4. Bagian Testimoni */}
      <section className="py-16 sm:py-24">
        <div className="max-w-3xl px-4 mx-auto text-center">
          <h2 className="text-3xl font-bold md:text-4xl">Dipercaya oleh Para Pendidik</h2>
          <figure className="mt-10">
            <blockquote className="text-lg italic text-gray-700 md:text-xl dark:text-gray-300">
              <p>"Laporan hasil tes RIASEC dari platform ini sangat membantu kami. Sesi konseling menjadi lebih terarah dan produktif. Siswa dan orang tua merasa lebih tercerahkan dalam mengambil keputusan."</p>
            </blockquote>
            <figcaption className="mt-6">
              <img className="w-16 h-16 mx-auto rounded-full" src="https://i.pravatar.cc/150?u=anisa" alt="Foto Ibu Anisa" />
              <div className="mt-3">
                <cite className="font-semibold not-italic">Ibu Anisa Wulandari, S.Pd.</cite>
                <br />
                <cite className="text-gray-500 not-italic">Guru Bimbingan & Konseling, SMAN 2 Maju Jaya</cite>
              </div>
            </figcaption>
          </figure>
        </div>
      </section>

      {/* 5. Bagian CTA Terakhir */}
      <section className="text-white bg-blue-600 dark:bg-blue-700">
        <div className="max-w-4xl px-4 py-16 mx-auto text-center sm:py-20">
          <h2 className="text-3xl font-extrabold sm:text-4xl">Siap Mengoptimalkan Layanan Bimbingan Karier?</h2>
          <p className="mt-4 text-lg text-blue-100">Lihat sendiri bagaimana platform kami dapat memberikan dampak positif bagi siswa dan sekolah Anda.</p>
          <Link
            href="/register"
            className="inline-block px-10 py-4 mt-8 font-bold text-blue-600 transition-transform transform bg-white rounded-full shadow-lg hover:scale-105"
          >
            Daftar & Minta Akses Demo
          </Link>
        </div>
      </section>

      {/* 6. Footer */}
      <footer className="text-gray-400 bg-gray-800 dark:bg-black">
        <div className="max-w-6xl px-4 py-12 mx-auto">
          <div className="grid gap-8 md:grid-cols-4">
            <div className="col-span-1 md:col-span-2">
              <h3 className="text-lg font-bold text-white">Platform RIASEC Sekolah</h3>
              <p className="mt-2 text-sm">Membantu generasi muda Indonesia menemukan potensi terbaiknya melalui teknologi.</p>
            </div>
            <div>
              <h4 className="font-semibold text-white">Navigasi</h4>
              <ul className="mt-4 space-y-2 text-sm">
                <li><a href="#" className="hover:text-white">Tentang Kami</a></li>
                <li><a href="#features" className="hover:text-white">Fitur</a></li>
                <li><a href="#" className="hover:text-white">Harga</a></li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-white">Kontak</h4>
              <ul className="mt-4 space-y-2 text-sm">
                <li><a href="mailto:info@sekolah.app" className="hover:text-white">info@sekolah.app</a></li>
                <li><a href="tel:+6221123456" className="hover:text-white">(021) 123-456</a></li>
              </ul>
            </div>
          </div>
          <div className="pt-8 mt-8 text-sm text-center border-t border-gray-700">
            <p>&copy; {new Date().getFullYear()} Platform RIASEC Anda. Hak Cipta Dilindungi.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}

// title: inertia/pages/user/dashboard/index.tsx
import { Link } from '@inertiajs/react'

import UserLayout from '../layouts/main'

export default function Dashboard({ user }: { user: { fullName: string } }) {
  return (
    // Mirip admin, tapi buat user biasa
    <div className="p-8 max-w-7xl mx-auto">

      <h1 className="text-3xl font-bold text-gray-900 dark:text-white">User Dashboard</h1>
      <div className="mt-4 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
        <h2 className="text-2xl font-semibold dark:text-white">Welcome, {user.fullName}!</h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Here you can manage your personal notes.
        </p>
        <div className="mt-6 flex space-x-4">
          <Link
            href="/notes"
            as="button"
            className="px-4 py-2 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors"
          >
            My Notes
          </Link>
          <Link
            href="/logout"
            method="post"
            as="button"
            className="px-4 py-2 bg-red-600 text-white font-semibold rounded-lg shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
          >
            Logout
          </Link>
        </div>
      </div>
    </div>
  )
}

Dashboard.layout = (page: any) => (
  <UserLayout children={page} />
)

// title: inertia/pages/user/layouts/main.tsx
// inertia/pages/user/layouts/main.tsx

import { PropsWithChildren } from 'react'
import Sidebar from './sidebar' // Sidebar-nya tetap sama
import { Head } from '@inertiajs/react'

export default function UserLayout({ children }: PropsWithChildren) {
  return (
    <>
      <Head title="User Dashboard" />

      {/* Struktur ini lebih bener. Sidebar dan Main Content itu sibling.
        Sidebar akan ngatur posisinya sendiri (fixed di mobile, static di desktop).
      */}
      <div className="bg-gray-100 dark:bg-gray-800 min-h-screen">
        <Sidebar />

        {/* Di layar kecil (mobile), main content bakal full-width.
          Di layar medium ke atas (md), kita kasih margin kiri seukuran lebar sidebar (w-64).
          Ini yang bikin kontennya gak ketimpa sidebar.
        */}
        <main className="md:ml-64 p-4 sm:p-6 lg:p-8">
          {children}
        </main>
      </div>
    </>
  )
}

// title: inertia/pages/user/layouts/sidebar.tsx
import { useState } from 'react';
import { Menu, X, LayoutDashboard, BookOpen, ClipboardList, GraduationCap, Bell, CalendarDays, Users, Library, CheckCircle, Wallet, LifeBuoy, Phone, Settings, LogOut } from 'lucide-react'; 
import { Link } from '@inertiajs/react';

const Sidebar: React.FC = () => {
  const [isOpen, setIsOpen] = useState<boolean>(false);

  const toggleSidebar = () => setIsOpen(!isOpen);

  // Class untuk link yang disabled
  const disabledLinkClass = "pointer-events-none opacity-50 cursor-not-allowed";

  return (
    <>
      {/* Mobile Menu Button */}
      <button
        onClick={toggleSidebar}
        className="md:hidden fixed top-4 left-4 z-50 p-2 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
        aria-label={isOpen ? 'Close menu' : 'Open menu'}
      >
        {isOpen ? <X size={24} /> : <Menu size={24} />}
      </button>

      {/* Sidebar */}
      <aside
        className={`fixed inset-y-0 left-0 w-64 h-screen px-4 py-8 overflow-y-auto bg-white dark:bg-gray-900 border-r dark:border-gray-700 transform ${isOpen ? 'translate-x-0' : '-translate-x-full'
          } md:translate-x-0 transition-transform duration-300 ease-in-out z-40 flex flex-col`}
      >
        {/* Logo */}
        <a href="#">
          <img
            className="w-auto h-6 sm:h-7"
            src="https://merakiui.com/images/logo.svg"
            alt="Logo"
          />
        </a>

        {/* Search Bar (tetep aktif biar bisa nyari) */}
        {/* <div className="relative mt-6">
          <span className="absolute inset-y-0 left-0 flex items-center pl-3">
            <Search className="w-5 h-5 text-gray-400" />
          </span>
          <input
            type="text"
            className="w-full py-2 pl-10 pr-4 text-gray-700 bg-white border rounded-md dark:bg-gray-900 dark:text-gray-300 dark:border-gray-600 focus:border-blue-400 dark:focus:border-blue-300 focus:ring-blue-300 focus:ring-opacity-40 focus:outline-none focus:ring"
            placeholder="Search"
          />
        </div> */}

        {/* Navigation */}
        <div className="flex flex-col justify-between flex-1 mt-6">
          <nav>
            {/* Kategori Utama: Dashboard (DISABLED) */}
            <a
              href="/dashboard"
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700`}
            >
              <LayoutDashboard className="w-5 h-5" />
              <span className="mx-4 font-medium">Dashboard</span>
            </a>

            {/* Kategori: Akademik */}
            <p className="text-xs font-semibold text-gray-400 uppercase mt-6 mb-2 px-4">Akademik</p>
            <a
              // href="/jadwal" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <CalendarDays className="w-5 h-5" />
              <span className="mx-4 font-medium">Jadwal Kelas</span>
            </a>
            <a
              // href="/materi" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <BookOpen className="w-5 h-5" />
              <span className="mx-4 font-medium">Materi Belajar</span>
            </a>
            <a
              // href="/tugas" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <ClipboardList className="w-5 h-5" />
              <span className="mx-4 font-medium">Tugas & PR</span>
            </a>
            <a
              // href="/nilai" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <GraduationCap className="w-5 h-5" />
              <span className="mx-4 font-medium">Nilai & Raport</span>
            </a>
            {/* RIASEC Test (ENABLED) */}
            <a
              href="/riasec"
              className="flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700"
            >
              <svg
                className="w-5 h-5"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M19 11H5M19 11C20.1046 11 21 11.8954 21 13V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V13C3 11.8954 3.89543 11 5 11M19 11V9C19 7.89543 18.1046 7 17 7M5 11V9C5 7.89543 5.89543 7 7 7M7 7V5C7 3.89543 7.89543 3 9 3H15C16.1046 3 17 3.89543 17 5V7M7 7H17"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
              <span className="mx-4 font-medium">RIASEC Test</span>
            </a>

            {/* Kategori: Kehidupan Sekolah (DISABLED) */}
            <p className="text-xs font-semibold text-gray-400 uppercase mt-6 mb-2 px-4">Kehidupan Sekolah</p>
            <a
              // href="/pengumuman" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <Bell className="w-5 h-5" />
              <span className="mx-4 font-medium">Info Penting</span>
            </a>
            <a
              // href="/kalender" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <CalendarDays className="w-5 h-5" />
              <span className="mx-4 font-medium">Kalender Sekolah</span>
            </a>
            <a
              // href="/ekskul" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <Users className="w-5 h-5" />
              <span className="mx-4 font-medium">Ekskul Gaul</span>
            </a>
            <a
              // href="/perpustakaan" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <Library className="w-5 h-5" />
              <span className="mx-4 font-medium">Perpus Online</span>
            </a>

            {/* Kategori: Administrasi & Bantuan (DISABLED) */}
            <p className="text-xs font-semibold text-gray-400 uppercase mt-6 mb-2 px-4">Administrasi & Bantuan</p>
            <a
              // href="/absensi" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <CheckCircle className="w-5 h-5" />
              <span className="mx-4 font-medium">Absensi Kece</span>
            </a>
            <a
              // href="/pembayaran" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <Wallet className="w-5 h-5" />
              <span className="mx-4 font-medium">Bayar-bayar SPP</span>
            </a>
            <a
              // href="/bantuan" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <LifeBuoy className="w-5 h-5" />
              <span className="mx-4 font-medium">Tanya-tanya Dong</span>
            </a>
            <a
              // href="/kontak" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 ${disabledLinkClass}`}
            >
              <Phone className="w-5 h-5" />
              <span className="mx-4 font-medium">Kontak Sekolah</span>
            </a>
          </nav>

          {/* Profile Section */}
          <div className="mt-auto">
            <p className="text-xs font-semibold text-gray-400 uppercase mt-6 mb-2 px-4">Akun</p>
            {/* Profil Gue (DISABLED) */}
            <a
              // href="/profil" // Dihapus href-nya
              className={`flex items-center px-4 -mx-2 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md ${disabledLinkClass}`}
            >
              <img
                className="object-cover mx-2 rounded-full h-9 w-9"
                src="https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80"
                alt="avatar"
              />
              <span className="mx-2 font-medium text-gray-800 dark:text-gray-200">
                John Doe
              </span>
            </a>
            {/* Settingan (DISABLED) */}
            <a
              // href="/settings" // Dihapus href-nya
              className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-200 hover:text-gray-700 mt-2 ${disabledLinkClass}`}
            >
              <Settings className="w-5 h-5" />
              <span className="mx-4 font-medium">Settingan</span>
            </a>
            {/* Cabut Dulu (ENABLED) */}
            <Link
              href="/logout"
              method="post"
              as="button"
              className="flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 transition-colors duration-300 transform rounded-md hover:bg-red-100 dark:hover:bg-red-800 dark:hover:text-red-200 hover:text-red-700 mt-2"
            >
              <LogOut className="w-5 h-5" /> {/* Icon LogOut */}
              <span className="mx-4 font-medium">Cabut Dulu</span>
            </Link>
          </div>
        </div>
      </aside>

      {/* Overlay for mobile */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 md:hidden z-30"
          onClick={toggleSidebar}
        ></div>
      )}
    </>
  );
};

export default Sidebar;

// title: inertia/pages/user/notes/edit.tsx
// title: inertia/pages/user/notes/edit.tsx
import { useForm, Link } from '@inertiajs/react'

interface Note {
  id: number
  title: string
  content: string
}

export default function EditNote({ note }: { note: Note }) {
  const { data, setData, put, processing, errors } = useForm({
    title: note.title,
    content: note.content,
  })

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    put(`/notes/${note.id}`)
  }

  return (
    <div className="max-w-4xl mx-auto p-4 sm:p-6 lg:p-8">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">Edit Note</h1>
      <Link href="/notes" className="text-sm text-indigo-600 dark:text-indigo-400 hover:underline">
        &larr; Back to Notes
      </Link>

      <div className="mt-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
        <form onSubmit={submit} className="space-y-4">
          <div>
            <label
              htmlFor="title"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Title
            </label>
            <input
              id="title"
              type="text"
              value={data.title}
              onChange={(e) => setData('title', e.target.value)}
              className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
            {errors.title && <div className="mt-1 text-xs text-red-500">{errors.title}</div>}
          </div>

          <div>
            <label
              htmlFor="content"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Content
            </label>
            <textarea
              id="content"
              value={data.content}
              onChange={(e) => setData('content', e.target.value)}
              rows={8}
              className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
            {errors.content && <div className="mt-1 text-xs text-red-500">{errors.content}</div>}
          </div>

          <div className="flex justify-end">
            <button
              type="submit"
              disabled={processing}
              className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors"
            >
              {processing ? 'Saving...' : 'Update Note'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

// title: inertia/pages/user/notes/index.tsx
// title: inertia/pages/user/notes/index.tsx
import { Link, useForm } from '@inertiajs/react'
import UserLayout from '../layouts/main'

interface Note {
  id: number
  title: string
  content: string
}

export default function NotesIndex({ notes }: { notes: Note[] }) {
  const { data, setData, post, processing, errors, reset } = useForm({
    title: '',
    content: '',
  })

  function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    // Kalo berhasil, form-nya kita reset biar kosong lagi
    post('/notes', {
      onSuccess: () => reset(),
    })
  }

  return (
    <div className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">My Notes</h1>
        <Link
          href="/dashboard"
          className="text-sm text-indigo-600 dark:text-indigo-400 hover:underline"
        >
          &larr; Back to Dashboard
        </Link>
      </div>

      {/* Form buat bikin catatan baru, kita bungkus dalam card */}
      <div className="mb-8 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
        <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          Create New Note
        </h2>
        <form onSubmit={submit} className="space-y-4">
          <div>
            <label
              htmlFor="title"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Title
            </label>
            <input
              id="title"
              type="text"
              value={data.title}
              onChange={(e) => setData('title', e.target.value)}
              className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="What's on your mind?"
            />
            {errors.title && <div className="mt-1 text-xs text-red-500">{errors.title}</div>}
          </div>
          <div>
            <label
              htmlFor="content"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Content
            </label>
            <textarea
              id="content"
              value={data.content}
              onChange={(e) => setData('content', e.target.value)}
              rows={4}
              className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="Jot down your thoughts..."
            />
            {errors.content && <div className="mt-1 text-xs text-red-500">{errors.content}</div>}
          </div>
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={processing}
              className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors"
            >
              {processing ? 'Saving...' : 'Create Note'}
            </button>
          </div>
        </form>
      </div>

      <hr className="my-8 border-gray-200 dark:border-gray-700" />

      {/* Daftar catatan dalam bentuk grid cards, lebih modern! */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {notes.length > 0 ? (
          notes.map((note) => (
            <div
              key={note.id}
              className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 flex flex-col justify-between transition hover:shadow-lg"
            >
              <div>
                <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-2">
                  {note.title}
                </h3>
                <p className="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap">
                  {note.content}
                </p>
              </div>
              <div className="mt-4 flex justify-end space-x-3">
                <Link
                  href={`/notes/${note.id}/edit`}
                  className="text-sm font-medium text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300"
                >
                  Edit
                </Link>
                <Link
                  href={`/notes/${note.id}`}
                  method="delete"
                  as="button"
                  className="text-sm font-medium text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                  onBefore={() => confirm('Are you sure you want to delete this note?')}
                >
                  Delete
                </Link>
              </div>
            </div>
          ))
        ) : (
          <p className="col-span-full text-center text-gray-500 dark:text-gray-400">
            You haven't created any notes yet.
          </p>
        )}
      </div>
    </div>
  )
}

NotesIndex.layout = (page: any) => (
  <UserLayout children={page} />
)

// title: inertia/pages/user/riasec/index.tsx
// title: inertia/pages/user/riasec/index.tsx
import { Head, Link, usePage } from '@inertiajs/react'
import UserLayout from '../layouts/main'

interface User {
    fullName: string
}

interface IndexPageProps {
    user: User
}

export default function RiasecIndexPage() {
    const { user } = usePage<IndexPageProps>().props

    return (
        <>
            <Head title="Tes Minat RIASEC" />
            <section className="bg-white p-6 sm:p-8 rounded-xl shadow-lg ">
                <img className="w-full h-96 object-cover rounded-xl mb-6" src="https://images.unsplash.com/photo-1507183711269-1235bed98f14?q=80&w=1674&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" alt="" />
                <h1 className="text-4xl font-bold text-slate-900 mb-4">Halo, {user.fullName}! 👋</h1>
                <p className="text-lg text-slate-700 mb-8">
                    Selamat datang! Silakan mulai Tes Minat RIASEC untuk mengetahui tipe kepribadian dan
                    potensi karir Anda.
                </p>

                <div className="space-y-4">
                    {/* Tombol ini akan mengarahkan ke controller 'start' yang akan memvalidasi sekali lagi sebelum menampilkan soal */}
                    <Link
                        href="/riasec/test"
                        className="inline-block bg-blue-600 text-white font-bold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-300"
                    >
                        Mulai Tes Minat RIASEC
                    </Link>
                </div>
            </section>
        </>
    )
}

// Layout tetap digunakan
RiasecIndexPage.layout = (page: any) => <UserLayout children={page} />

// title: inertia/pages/user/riasec/result.tsx
import { Head, usePage, Link } from '@inertiajs/react';
import UserLayout from '../layouts/main';
import { Award, BrainCircuit, Lightbulb } from 'lucide-react';

// --- DATA DESKRIPSI RIASEC (Untuk Tampilan UI) ---
const descriptions = {
    R: { name: "Realistic (The Doer)", desc: "Orang dengan tipe Realistis suka bekerja dengan objek, mesin, peralatan, tanaman, atau hewan. Mereka menikmati pekerjaan yang membutuhkan keterampilan praktis dan kekuatan fisik.", color: "bg-orange-500" },
    I: { name: "Investigative (The Thinker)", desc: "Tipe Investigatif senang mengamati, belajar, menyelidiki, menganalisis, dan memecahkan masalah. Mereka unggul dalam tugas-tugas yang membutuhkan pemikiran abstrak dan analitis.", color: "bg-sky-500" },
    A: { name: "Artistic (The Creator)", desc: "Tipe Artistik memiliki kemampuan artistik, inovatif, dan intuitif. Mereka suka bekerja dalam situasi yang tidak terstruktur di mana mereka dapat menggunakan imajinasi dan kreativitas mereka.", color: "bg-purple-500" },
    S: { name: "Social (The Helper)", desc: "Tipe Sosial senang bekerja dengan orang lain untuk mencerahkan, membantu, melatih, atau menyembuhkan. Mereka terampil dalam berkomunikasi dan membangun hubungan.", color: "bg-emerald-500" },
    E: { name: "Enterprising (The Persuader)", desc: "Tipe Enterprising suka bekerja dengan orang lain untuk mempengaruhi, membujuk, atau memimpin. Mereka ambisius, energik, dan menikmati peran kepemimpinan.", color: "bg-red-500" },
    C: { name: "Conventional (The Organizer)", desc: "Tipe Konvensional suka bekerja dengan data, memiliki kemampuan klerikal atau numerik, dan mengikuti instruksi. Mereka terorganisir, efisien, dan menghargai ketelitian.", color: "bg-yellow-500" }
};

// --- Tipe Data untuk Props ---
interface Program {
    id: number
    name: string
    description: string | null
}

interface Interest {
    id: number;
    name: string;
    description: string;
}

interface HasilTes {
    id: number;
    kodeHolland: string;
    skorR: number; skorI: number; skorA: number; skorS: number; skorE: number; skorC: number;
    siswa: {
        namaLengkap: string;
    };
}

interface ResultPageProps {
    hasilTes: HasilTes;
    recommendedPrograms: Program[];
    recommendedInterests: Interest[];
}

// --- Komponen Utama ---
export default function RiasecResultPage() {
    const { hasilTes, recommendedPrograms, recommendedInterests } = usePage<ResultPageProps>().props;

    // Kumpulkan semua skor mentah dari hasil tes
    const rawScores = [
        { type: 'R', score: hasilTes.skorR }, { type: 'I', score: hasilTes.skorI },
        { type: 'A', score: hasilTes.skorA }, { type: 'S', score: hasilTes.skorS },
        { type: 'E', score: hasilTes.skorE }, { type: 'C', score: hasilTes.skorC },
    ];

    // **PERBAIKAN UTAMA:**
    // 1. Cari skor tertinggi dari hasil tes untuk dijadikan patokan 100% pada bar.
    //    Ini mencegah bar melebihi lebar kontainer (overflow).
    const maxScore = Math.max(...rawScores.map(s => s.score), 1); // Tambahkan , 1 untuk menghindari pembagian dengan 0 jika semua skor 0

    // 2. Urutkan skor dari tertinggi ke terendah untuk ditampilkan
    const scores = [...rawScores].sort((a, b) => b.score - a.score);

    const topThreeTypes = hasilTes.kodeHolland.split('') as (keyof typeof descriptions)[];

    return (
        <>
            <Head title={`Hasil Tes RIASEC - ${hasilTes.kodeHolland}`} />

            {/* BAGIAN HASIL TES RIASEC */}
            <section className="bg-white p-6 sm:p-8 rounded-xl shadow-lg mb-8">
                <div className="text-center">
                    <h2 className="text-2xl font-semibold text-slate-900">Hasil Tes Anda</h2>
                    <p className="mt-2 text-slate-600">
                        Ini adalah tipe kepribadian karir yang paling cocok untuk Anda, {hasilTes.siswa.namaLengkap}.
                    </p>
                    <div className="my-6">
                        <p className="text-lg text-slate-500">Kode Holland Anda adalah:</p>
                        <p className="text-5xl sm:text-6xl font-bold text-blue-600 tracking-widest my-2">
                            {hasilTes.kodeHolland}
                        </p>
                    </div>
                </div>

                <div className="mt-8">
                    <h3 className="text-xl font-semibold mb-4 text-center sm:text-left">Rincian Skor</h3>
                    <div className="space-y-4">
                        {scores.map(({ type, score }) => {
                            // 3. Hitung persentase lebar bar berdasarkan skor tertinggi yang didapat
                            const percentage = (score / maxScore) * 100;
                            const typeInfo = descriptions[type as keyof typeof descriptions];

                            return (
                                // **REFACTORING TAMPILAN BAR:**
                                <div key={type} className="flex items-center gap-x-3 sm:gap-x-4">
                                    <div className="w-44 shrink-0 text-right">
                                        <span className="font-bold text-slate-700">{typeInfo.name}</span>
                                    </div>
                                    <div className="flex-1 bg-slate-200 rounded-full h-7 relative">
                                        {/* Colored bar */}
                                        <div
                                            className={`${typeInfo.color} h-7 rounded-full`}
                                            style={{ width: `${percentage}%` }}
                                        />
                                        {/* Score label, diposisikan di atas bar */}
                                        <span className={`absolute left-3 top-1/2 -translate-y-1/2 text-sm font-bold ${percentage > 15 ? 'text-white' : 'text-slate-800'
                                            }`}>
                                            {score}
                                        </span>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>

                <div className="mt-8 pt-6 border-t border-slate-200">
                    <h3 className="text-xl font-semibold mb-4 text-center sm:text-left">Deskripsi Tipe Kepribadian Teratas</h3>
                    <div className="space-y-6">
                        {topThreeTypes.map((type) => {
                            const typeInfo = descriptions[type];
                            return (
                                <div key={type} className="p-4 rounded-lg border border-slate-200">
                                    <div className="flex items-center mb-2">
                                        <div className={`w-4 h-4 rounded-full ${typeInfo.color} mr-3 flex-shrink-0`}></div>
                                        <h4 className="text-lg font-bold text-slate-800">{typeInfo.name}</h4>
                                    </div>
                                    <p className="text-slate-600">{typeInfo.desc}</p>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </section>

            {/* --- BAGIAN REKOMENDASI MINAT DAN BAKAT --- */}
            <section className="bg-white p-6 sm:p-8 rounded-xl shadow-lg mb-8">
                <div className="text-center mb-8">
                    <Lightbulb className="mx-auto h-12 w-12 text-indigo-500" />
                    <h2 className="text-3xl font-bold text-gray-900 mt-4">
                        Rekomendasi Pengembangan Minat dan Bakat
                    </h2>
                    <p className="mt-2 text-gray-600 max-w-2xl mx-auto">
                        Kepribadianmu juga tercermin dalam hobimu. Berikut aktivitas yang bisa kamu jelajahi untuk mengembangkan diri!
                    </p>
                </div>

                {recommendedInterests && recommendedInterests.length > 0 ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {recommendedInterests.map((interest) => (
                            <div key={interest.id} className="border border-gray-200 rounded-lg p-6 flex flex-col items-center text-center transform hover:shadow-xl hover:-translate-y-1 transition-all duration-300">
                                <h3 className="text-xl font-bold text-gray-900">{interest.name}</h3>
                                <p className="text-gray-500 mt-2 flex-grow">
                                    {interest.description || "Deskripsi belum tersedia."}
                                </p>
                                <Link href="#" className="mt-4 inline-block bg-indigo-100 text-indigo-700 font-semibold py-2 px-4 rounded-lg hover:bg-indigo-200 transition-colors">
                                    Coba Jelajahi
                                </Link>
                            </div>
                        ))}
                    </div>
                ) : (
                    <div className="text-center py-10">
                        <p className="text-gray-500">Saat ini belum ada rekomendasi minat dan bakat untukmu. Cek lagi nanti!</p>
                    </div>
                )}
            </section>

            {/* --- BAGIAN REKOMENDASI PROGRAM --- */}
            <section className="bg-white p-6 sm:p-8 rounded-xl shadow-lg">
                <div className="text-center mb-8">
                    <Award className="mx-auto h-12 w-12 text-yellow-500" />
                    <h2 className="text-3xl font-bold text-gray-900 mt-4">
                        Program Rekomendasi Untukmu
                    </h2>
                    <p className="mt-2 text-gray-600 max-w-2xl mx-auto">
                        Berdasarkan profilmu dan pilihan siswa lain yang mirip, program berikut mungkin cocok untukmu!
                    </p>
                </div>

                {recommendedPrograms && recommendedPrograms.length > 0 ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {recommendedPrograms.map((program) => (
                            <div key={program.id} className="border border-gray-200 rounded-lg p-6 flex flex-col items-center text-center transform hover:shadow-xl hover:-translate-y-1 transition-all duration-300">
                                <BrainCircuit className="h-10 w-10 text-blue-500 mb-4" />
                                <h3 className="text-xl font-bold text-gray-900">{program.name}</h3>
                                <p className="text-gray-500 mt-2 flex-grow">
                                    {program.description || "Deskripsi program belum tersedia."}
                                </p>
                                <Link href="#" className="mt-4 inline-block bg-blue-100 text-blue-700 font-semibold py-2 px-4 rounded-lg hover:bg-blue-200 transition-colors">
                                    Pelajari Lebih Lanjut
                                </Link>
                            </div>
                        ))}
                    </div>
                ) : (
                    <div className="text-center py-10">
                        <p className="text-gray-500">Saat ini belum ada rekomendasi yang cocok untukmu. Cek lagi nanti!</p>
                    </div>
                )}
            </section>
        </>
    );
}

RiasecResultPage.layout = (page: any) => <UserLayout children={page} />;

// title: inertia/pages/user/riasec/.test.tsx
import { Head, useForm } from '@inertiajs/react'
import React, { useState } from 'react'
import UserLayout from '../layouts/main'

interface Question {
    id: number
    teksPertanyaan: string
    tipeRiasec: string
}

interface RiasecTestProps {
    questions: Question[]
}

const answerOptions = [
    { label: 'Sangat Tidak Suka', value: 1, color: 'bg-red-600', hover: 'hover:bg-red-700' },
    { label: 'Tidak Suka', value: 2, color: 'bg-orange-500', hover: 'hover:bg-orange-600' },
    { label: 'Netral', value: 3, color: 'bg-yellow-500', hover: 'hover:bg-yellow-600' },
    { label: 'Suka', value: 4, color: 'bg-lime-500', hover: 'hover:bg-lime-600' },
    { label: 'Sangat Suka', value: 5, color: 'bg-green-600', hover: 'hover:bg-green-700' },
]

export default function RiasecTest({ questions }: RiasecTestProps) {
    const { data, setData, post, processing, errors } = useForm<{ answers: Record<number, number> }>({
        answers: {},
    })

    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
    const totalQuestions = questions.length
    const currentQuestion = questions[currentQuestionIndex]

    const handleAnswer = (questionId: number, answerValue: number) => {
        setData('answers', {
            ...data.answers,
            [questionId]: answerValue,
        })
    }

    const handleNext = () => {
        if (currentQuestionIndex < totalQuestions - 1) {
            setCurrentQuestionIndex((prev) => prev + 1)
        }
    }

    const handleBack = () => {
        if (currentQuestionIndex > 0) {
            setCurrentQuestionIndex((prev) => prev - 1)
        }
    }

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault()
        post('/riasec/submit')
    }

    const progressPercentage =
        totalQuestions > 0 ? ((currentQuestionIndex + 1) / totalQuestions) * 100 : 0

    return (
        <>
            <Head title="Tes Minat RIASEC" />

            <div className="bg-slate-100 p-6 sm:p-10 min-h-screen flex items-center justify-center">
                <div className="max-w-2xl w-full bg-white rounded-xl shadow-lg p-6 sm:p-10">

                    {/* Progress */}
                    <div className="mb-6">
                        <div className="flex justify-between text-sm text-slate-500 font-medium mb-1">
                            <span>Pertanyaan {currentQuestionIndex + 1} dari {totalQuestions}</span>
                            <span>{Math.round(progressPercentage)}%</span>
                        </div>
                        <div className="w-full bg-slate-200 rounded-full h-2.5">
                            <div
                                className="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
                                style={{ width: `${progressPercentage}%` }}
                            ></div>
                        </div>
                    </div>

                    {/* Pertanyaan */}
                    <form onSubmit={handleSubmit}>
                        <div className="mb-6">
                            <p className="text-3xl text-center font-semibold text-slate-800 mb-4">
                                {currentQuestion.teksPertanyaan}
                            </p>

                            <div className="flex flex-wrap gap-3 justify-center">
                                {answerOptions.map((option) => (
                                    <button
                                        key={option.value}
                                        type="button"
                                        onClick={() => handleAnswer(currentQuestion.id, option.value)}
                                        className={`
                                            flex flex-row px-3 py-2 rounded-lg text-base font-semibold
                                            transition-all duration-200 focus:outline-none
                                            ${data.answers[currentQuestion.id] === option.value
                                                ? `${option.color} text-white shadow-md`
                                                : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
                                            }
                                        `}
                                    >
                                        {option.label}
                                    </button>
                                ))}
                            </div>
                        </div>

                        {/* Navigasi */}
                        <div className="flex justify-between mt-6">
                            <button
                                type="button"
                                onClick={handleBack}
                                disabled={currentQuestionIndex === 0}
                                className="px-6 py-2 text-sm font-bold text-slate-600 bg-slate-200 rounded-lg hover:bg-slate-300 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                Sebelumnya
                            </button>

                            {currentQuestionIndex < totalQuestions - 1 ? (
                                <button
                                    type="button"
                                    onClick={handleNext}
                                    disabled={!data.answers[currentQuestion.id]}
                                    className="px-6 py-2 text-white font-bold bg-blue-600 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    Selanjutnya
                                </button>
                            ) : (
                                <button
                                    type="submit"
                                    disabled={processing || !data.answers[currentQuestion.id]}
                                    className="px-6 py-2 text-white font-bold bg-green-600 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    {processing ? 'Memproses...' : 'Lihat Hasil Tes'}
                                </button>
                            )}
                        </div>

                        {/* Error Message */}
                        {errors.answers && (
                            <p className="text-sm text-red-600 mt-3">{errors.answers}</p>
                        )}
                    </form>
                </div>
            </div>
        </>
    )
}

RiasecTest.layout = (page: any) => <UserLayout children={page} />

// title: inertia/pages/user/riasec/test.tsx
import { FormEvent } from 'react'
import { Head, useForm } from '@inertiajs/react'
import UserLayout from '../layouts/main' // Pastikan layout ini sesuai

// Interface untuk properti yang diterima komponen
interface Question {
    id: number
    teksPertanyaan: string
    tipeRiasec: 'R' | 'I' | 'A' | 'S' | 'E' | 'C'
}

interface RiasecTestProps {
    questions: Question[]
}

// --- PERUBAHAN 1: Opsi jawaban diubah kembali menjadi Ya/Tidak ---
const answerOptions = [
    { label: 'Ya', value: 1 },
    { label: 'Tidak', value: 0 },
]

export default function RiasecTestCardViewYesNo({ questions }: RiasecTestProps) {
    // useForm untuk mengelola semua jawaban dalam satu state
    const { data, setData, post, processing, errors } = useForm({
        answers: {} as Record<string, number>,
    })

    // Fungsi untuk memperbarui state jawaban ketika radio button dipilih
    const handleAnswerChange = (questionId: number, value: number) => {
        setData('answers', {
            ...data.answers,
            [questionId]: value,
        })
    }

    // Fungsi untuk mengirim semua data jawaban ke backend saat form disubmit
    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault()
        post('/riasec/submit')
    }

    return (
        <>
            <Head title="Tes Minat Bakat" />
            <div className="bg-gray-100 dark:bg-gray-900 p-4 md:p-8 min-h-screen">
                <div className="max-w-4xl mx-auto">

                    <div className="text-center mb-8">
                        <h1 className="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white">Tes Minat & Karier</h1>
                        {/* --- PERUBAHAN 2: Instruksi disesuaikan untuk Ya/Tidak --- */}
                        <p className="mt-2 text-gray-600 dark:text-gray-400">
                            Jawab 'Ya' jika pernyataan berikut menggambarkan diri Anda, dan 'Tidak' jika tidak.
                        </p>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-4">
                        {/* Loop untuk menampilkan semua pertanyaan */}
                        {questions.map((question, index) => (
                            <div key={question.id} className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm">
                                <p className="text-lg font-medium text-gray-800 dark:text-gray-200 mb-4">
                                    {index + 1}. {question.teksPertanyaan}
                                </p>

                                {/* --- PERUBAHAN 3: Tata letak disesuaikan untuk 2 pilihan --- */}
                                <div className="flex justify-center items-center gap-x-12 pt-4">
                                    {answerOptions.map((option) => (
                                        <label key={option.value} className="flex items-center space-x-2 cursor-pointer text-gray-700 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors">
                                            <input
                                                type="radio"
                                                name={`question-${question.id}`}
                                                value={option.value}
                                                checked={data.answers[question.id] === option.value}
                                                onChange={() => handleAnswerChange(question.id, option.value)}
                                                className="form-radio h-4 w-4 text-indigo-600 dark:bg-gray-700 dark:border-gray-600 focus:ring-indigo-500"
                                            />
                                            <span className="text-lg">{option.label}</span>
                                        </label>
                                    ))}
                                </div>
                                {errors[`answers.${question.id}`] && <div className="text-red-500 text-sm mt-3 text-center">{errors[`answers.${question.id}`]}</div>}
                            </div>
                        ))}

                        <div className="pt-6 text-center">
                            <button
                                type="submit"
                                disabled={processing}
                                className="w-full md:w-auto px-10 py-3 bg-indigo-600 text-white font-bold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-300 disabled:bg-indigo-400 disabled:cursor-not-allowed"
                            >
                                {processing ? 'Memproses...' : 'Selesai & Lihat Hasil'}
                            </button>
                            {errors.answers && <div className="text-red-500 text-sm mt-4">{errors.answers}</div>}
                        </div>
                    </form>
                </div>
            </div>
        </>
    )
}

// Ganti nama komponen agar lebih jelas dan gunakan layout
RiasecTestCardViewYesNo.layout = (page: any) => <UserLayout children={page} />

// title: start/env.ts
/*
|--------------------------------------------------------------------------
| Environment variables service
|--------------------------------------------------------------------------
|
| The `Env.create` method creates an instance of the Env service. The
| service validates the environment variables and also cast values
| to JavaScript data types.
|
*/

import { Env } from '@adonisjs/core/env'

export default await Env.create(new URL('../', import.meta.url), {
  NODE_ENV: Env.schema.enum(['development', 'production', 'test'] as const),
  PORT: Env.schema.number(),
  APP_KEY: Env.schema.string(),
  HOST: Env.schema.string({ format: 'host' }),
  LOG_LEVEL: Env.schema.string(),

  /*
  |----------------------------------------------------------
  | Variables for configuring session package
  |----------------------------------------------------------
  */
  SESSION_DRIVER: Env.schema.enum(['cookie', 'memory'] as const),

  /*
  |----------------------------------------------------------
  | Variables for configuring database connection
  |----------------------------------------------------------
  */
  DB_HOST: Env.schema.string({ format: 'host' }),
  DB_PORT: Env.schema.number(),
  DB_USER: Env.schema.string(),
  DB_PASSWORD: Env.schema.string.optional(),
  DB_DATABASE: Env.schema.string()
})

// title: start/kernel.ts
/*
|--------------------------------------------------------------------------
| HTTP kernel file
|--------------------------------------------------------------------------
|
| The HTTP kernel file is used to register the middleware with the server
| or the router.
|
*/

import router from '@adonisjs/core/services/router'
import server from '@adonisjs/core/services/server'

/**
 * The error handler is used to convert an exception
 * to an HTTP response.
 */
server.errorHandler(() => import('#exceptions/handler'))

/**
 * The server middleware stack runs middleware on all the HTTP
 * requests, even if there is no route registered for
 * the request URL.
 */
server.use([
  () => import('#middleware/container_bindings_middleware'),
  () => import('@adonisjs/static/static_middleware'),
  () => import('@adonisjs/cors/cors_middleware'),
  () => import('@adonisjs/vite/vite_middleware'),
  () => import('@adonisjs/inertia/inertia_middleware')
])

/**
 * The router middleware stack runs middleware on all the HTTP
 * requests with a registered route.
 */
router.use([
  () => import('@adonisjs/core/bodyparser_middleware'),
  () => import('@adonisjs/session/session_middleware'),
  () => import('@adonisjs/shield/shield_middleware'),
  () => import('@adonisjs/auth/initialize_auth_middleware'),
  () => import('#middleware/initialize_bouncer_middleware')
])

/**
 * Named middleware collection must be explicitly assigned to
 * the routes or the routes group.
 */
export const middleware = router.named({
  isUser: () => import('#middleware/is_user_middleware'),
  admin: () => import('#middleware/admin_middleware'),
  guest: () => import('#middleware/guest_middleware'),
  auth: () => import('#middleware/auth_middleware')
})

// title: start/routes.ts
// title: start/routes.ts
import router from '@adonisjs/core/services/router'
import { middleware } from '#start/kernel'

const SessionController = () => import('#controllers/session_controller')
const HomeController = () => import('#controllers/homepages_controller')
const RegisterController = () => import('#controllers/auth/registers_controller')

const UserDashboardController = () => import('#controllers/user/dashboard_controller')
const NotesController = () => import('#controllers/user/notes_controller')
const TestsController = () => import('#controllers/user/tests_controller')

const AdminDashboardController = () => import('#controllers/admin/dashboard_controller')
const AdminUsersController = () => import('#controllers/admin/users_controller')

const ProfilesController = () => import('#controllers/admin/profiles_controller')

const SiswaRiasecsController = () => import('#controllers/admin/riasec/siswa_riasecs_controller')
const PertanyaanRiasecsController = () =>
  import('#controllers/admin/riasec/pertanyaan_riasecs_controller')

const RecommendationsController = () => import('#controllers/user/recommendations_controller')

router.get('/', [HomeController, 'index']).as('home')

router
  .group(() => {
    router.get('/login', [SessionController, 'create']).as('auth.login')
    router.post('/login', [SessionController, 'store']).as('auth.store')
    router.get('/register', [RegisterController, 'create']).as('auth.register')
    router.post('/register', [RegisterController, 'store']).as('auth.register.store')
  })
  .use(middleware.guest())

router.post('/logout', [SessionController, 'destroy']).as('auth.logout')

router
  .group(() => {
    router.get('/dashboard', [UserDashboardController, 'index']).as('dashboard')
    router.resource('notes', NotesController).except(['show'])

    router.get('/riasec', [TestsController, 'index']).as('riasec.index')
    router.get('/riasec/test', [TestsController, 'start']).as('riasec.start')
    router.post('/riasec/submit', [TestsController, 'store']).as('riasec.store')
    router.get('/riasec/result', [TestsController, 'showMyResult']).as('riasec.result')

    router.get('/recommendations', [RecommendationsController, 'index']).as('recommendations.index')
  })
  .use([middleware.auth(), middleware.isUser()])

router
  .group(() => {
    router.get('/dashboard', [AdminDashboardController, 'index']).as('admin.dashboard')
    router.resource('users', AdminUsersController).as('admin.users')

    router.get('/siswa-riasec/create', [SiswaRiasecsController, 'create']).as('admin.siswa.create')
    router.post('/siswa-riasec', [SiswaRiasecsController, 'store']).as('admin.siswa.store')

    router.get('/siswa-riasec/:id/edit', [SiswaRiasecsController, 'edit']).as('admin.siswa.edit')

    // Rute untuk menyimpan perubahan data siswa
    router.put('/siswa-riasec/:id', [SiswaRiasecsController, 'update']).as('admin.siswa.update')

    router.get('/siswa-riasec', [SiswaRiasecsController, 'index']).as('admin.siswaRiasec.index')
    router.get('/siswa-riasec/:id', [SiswaRiasecsController, 'show']).as('admin.siswaRiasec.show')
    router
      .delete('/siswa-riasec/:id', [SiswaRiasecsController, 'destroy'])
      .as('admin.siswaRiasec.destroy')

    router
      .post('/siswa-riasec/:id/reset', [SiswaRiasecsController, 'resetTest'])
      .as('admin.siswaRiasec.reset')

    router.get('/pertanyaan', [PertanyaanRiasecsController, 'index']).as('admin.pertanyaan.index')

    
    router
      .get('/pertanyaan/create', [PertanyaanRiasecsController, 'create'])
      .as('admin.pertanyaan.create')
    router.post('/pertanyaan', [PertanyaanRiasecsController, 'store']).as('admin.pertanyaan.store')

    router.get('/profile', [ProfilesController, 'show']).as('admin.profile.show')
    router.put('/profile', [ProfilesController, 'update']).as('admin.profile.update')
  })
  .prefix('admin')
  .use([middleware.auth(), middleware.admin()])

// title: tests/bootstrap.ts
import { assert } from '@japa/assert'
import app from '@adonisjs/core/services/app'
import type { Config } from '@japa/runner/types'
import { pluginAdonisJS } from '@japa/plugin-adonisjs'
import testUtils from '@adonisjs/core/services/test_utils'

/**
 * This file is imported by the "bin/test.ts" entrypoint file
 */

/**
 * Configure Japa plugins in the plugins array.
 * Learn more - https://japa.dev/docs/runner-config#plugins-optional
 */
export const plugins: Config['plugins'] = [assert(), pluginAdonisJS(app)]

/**
 * Configure lifecycle function to run before and after all the
 * tests.
 *
 * The setup functions are executed before all the tests
 * The teardown functions are executed after all the tests
 */
export const runnerHooks: Required<Pick<Config, 'setup' | 'teardown'>> = {
  setup: [],
  teardown: [],
}

/**
 * Configure suites by tapping into the test suite instance.
 * Learn more - https://japa.dev/docs/test-suites#lifecycle-hooks
 */
export const configureSuite: Config['configureSuite'] = (suite) => {
  if (['browser', 'functional', 'e2e'].includes(suite.name)) {
    return suite.setup(() => testUtils.httpServer().start())
  }
}

// title: vite.config.ts
import { defineConfig } from 'vite'
import { getDirname } from '@adonisjs/core/helpers'
import inertia from '@adonisjs/inertia/client'
import react from '@vitejs/plugin-react'
import adonisjs from '@adonisjs/vite/client'

export default defineConfig({
  plugins: [inertia({ ssr: { enabled: true, entrypoint: 'inertia/app/ssr.tsx' } }), react(), adonisjs({ entrypoints: ['inertia/app/app.tsx'], reload: ['resources/views/**/*.edge'] })],

  /**
   * Define aliases for importing modules from
   * your frontend code
   */
  resolve: {
    alias: {
      '~/': `${getDirname(import.meta.url)}/inertia/`,
    },
  },
})
